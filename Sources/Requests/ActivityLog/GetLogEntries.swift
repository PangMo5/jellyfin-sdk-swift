//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.ActivityLog {

    /** Gets activity log entries. */
    public enum GetLogEntries {

        public static let service = APIService<Response>(id: "GetLogEntries", tag: "ActivityLog", method: "GET", path: "/System/ActivityLog/Entries", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["RequiresElevation"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Optional. The record index to start at. All items with a lower index will be dropped from the results. */
                public var startIndex: Int?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** Optional. The minimum date. Format = ISO. */
                public var minDate: DateTime?

                /** Optional. Filter log entries if it has user id, or not. */
                public var hasUserId: Bool?

                public init(startIndex: Int? = nil, limit: Int? = nil, minDate: DateTime? = nil, hasUserId: Bool? = nil) {
                    self.startIndex = startIndex
                    self.limit = limit
                    self.minDate = minDate
                    self.hasUserId = hasUserId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetLogEntries.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(startIndex: Int? = nil, limit: Int? = nil, minDate: DateTime? = nil, hasUserId: Bool? = nil) {
                let options = Options(startIndex: startIndex, limit: limit, minDate: minDate, hasUserId: hasUserId)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let minDate = options.minDate?.encode() {
                  params["minDate"] = minDate
                }
                if let hasUserId = options.hasUserId {
                  params["hasUserId"] = hasUserId
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = ActivityLogEntryQueryResultModel

            /** Activity log returned. */
            case status200(ActivityLogEntryQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: ActivityLogEntryQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(ActivityLogEntryQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
