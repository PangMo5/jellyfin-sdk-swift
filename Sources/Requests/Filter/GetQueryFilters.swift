//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Filter {

    /** Gets query filters. */
    public enum GetQueryFilters {

        public static let service = APIService<Response>(id: "GetQueryFilters", tag: "Filter", method: "GET", path: "/Items/Filters2", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Optional. User id. */
                public var userId: ID?

                /** Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. */
                public var parentId: ID?

                /** Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. */
                public var includeItemTypes: [String]?

                /** Optional. Is item airing. */
                public var isAiring: Bool?

                /** Optional. Is item movie. */
                public var isMovie: Bool?

                /** Optional. Is item sports. */
                public var isSports: Bool?

                /** Optional. Is item kids. */
                public var isKids: Bool?

                /** Optional. Is item news. */
                public var isNews: Bool?

                /** Optional. Is item series. */
                public var isSeries: Bool?

                /** Optional. Search recursive. */
                public var recursive: Bool?

                public init(userId: ID? = nil, parentId: ID? = nil, includeItemTypes: [String]? = nil, isAiring: Bool? = nil, isMovie: Bool? = nil, isSports: Bool? = nil, isKids: Bool? = nil, isNews: Bool? = nil, isSeries: Bool? = nil, recursive: Bool? = nil) {
                    self.userId = userId
                    self.parentId = parentId
                    self.includeItemTypes = includeItemTypes
                    self.isAiring = isAiring
                    self.isMovie = isMovie
                    self.isSports = isSports
                    self.isKids = isKids
                    self.isNews = isNews
                    self.isSeries = isSeries
                    self.recursive = recursive
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetQueryFilters.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID? = nil, parentId: ID? = nil, includeItemTypes: [String]? = nil, isAiring: Bool? = nil, isMovie: Bool? = nil, isSports: Bool? = nil, isKids: Bool? = nil, isNews: Bool? = nil, isSeries: Bool? = nil, recursive: Bool? = nil) {
                let options = Options(userId: userId, parentId: parentId, includeItemTypes: includeItemTypes, isAiring: isAiring, isMovie: isMovie, isSports: isSports, isKids: isKids, isNews: isNews, isSeries: isSeries, recursive: recursive)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let parentId = options.parentId?.encode() {
                  params["parentId"] = parentId
                }
                if let includeItemTypes = options.includeItemTypes?.joined(separator: ",") {
                  params["includeItemTypes"] = includeItemTypes
                }
                if let isAiring = options.isAiring {
                  params["isAiring"] = isAiring
                }
                if let isMovie = options.isMovie {
                  params["isMovie"] = isMovie
                }
                if let isSports = options.isSports {
                  params["isSports"] = isSports
                }
                if let isKids = options.isKids {
                  params["isKids"] = isKids
                }
                if let isNews = options.isNews {
                  params["isNews"] = isNews
                }
                if let isSeries = options.isSeries {
                  params["isSeries"] = isSeries
                }
                if let recursive = options.recursive {
                  params["recursive"] = recursive
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = QueryFiltersModel

            /** Filters retrieved. */
            case status200(QueryFiltersModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: QueryFiltersModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(QueryFiltersModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
