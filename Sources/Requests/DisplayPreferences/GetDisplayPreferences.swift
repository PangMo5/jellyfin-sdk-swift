//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.DisplayPreferences {

    /** Get Display Preferences. */
    public enum GetDisplayPreferences {

        public static let service = APIService<Response>(id: "GetDisplayPreferences", tag: "DisplayPreferences", method: "GET", path: "/DisplayPreferences/{displayPreferencesId}", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Display preferences id. */
                public var displayPreferencesId: String

                /** User id. */
                public var userId: ID

                /** Client. */
                public var client: String

                public init(displayPreferencesId: String, userId: ID, client: String) {
                    self.displayPreferencesId = displayPreferencesId
                    self.userId = userId
                    self.client = client
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetDisplayPreferences.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(displayPreferencesId: String, userId: ID, client: String) {
                let options = Options(displayPreferencesId: displayPreferencesId, userId: userId, client: client)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "displayPreferencesId" + "}", with: "\(self.options.displayPreferencesId)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["userId"] = options.userId.encode()
                params["client"] = options.client
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = DisplayPreferencesDtoModel

            /** Display preferences retrieved. */
            case status200(DisplayPreferencesDtoModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: DisplayPreferencesDtoModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(DisplayPreferencesDtoModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
