//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Subtitle {

    /** Gets an HLS subtitle playlist. */
    public enum GetSubtitlePlaylist {

        public static let service = APIService<Response>(id: "GetSubtitlePlaylist", tag: "Subtitle", method: "GET", path: "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The item id. */
                public var itemId: ID

                /** The subtitle stream index. */
                public var index: Int

                /** The media source id. */
                public var mediaSourceId: String

                /** The subtitle segment length. */
                public var segmentLength: Int

                public init(itemId: ID, index: Int, mediaSourceId: String, segmentLength: Int) {
                    self.itemId = itemId
                    self.index = index
                    self.mediaSourceId = mediaSourceId
                    self.segmentLength = segmentLength
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSubtitlePlaylist.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(itemId: ID, index: Int, mediaSourceId: String, segmentLength: Int) {
                let options = Options(itemId: itemId, index: index, mediaSourceId: mediaSourceId, segmentLength: segmentLength)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "itemId" + "}", with: "\(self.options.itemId.encode())").replacingOccurrences(of: "{" + "index" + "}", with: "\(self.options.index)").replacingOccurrences(of: "{" + "mediaSourceId" + "}", with: "\(self.options.mediaSourceId)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["segmentLength"] = options.segmentLength
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = File

            /** Subtitle playlist retrieved. */
            case status200(File)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: File? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(data)
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
