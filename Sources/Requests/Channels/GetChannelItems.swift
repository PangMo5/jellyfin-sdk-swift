//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Channels {

    /** Get channel items. */
    public enum GetChannelItems {

        public static let service = APIService<Response>(id: "GetChannelItems", tag: "Channels", method: "GET", path: "/Channels/{channelId}/Items", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Channel Id. */
                public var channelId: ID

                /** Optional. Folder Id. */
                public var folderId: ID?

                /** Optional. User Id. */
                public var userId: ID?

                /** Optional. The record index to start at. All items with a lower index will be dropped from the results. */
                public var startIndex: Int?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** Optional. Sort Order - Ascending,Descending. */
                public var sortOrder: [SortOrder]?

                /** Optional. Specify additional filters to apply. */
                public var filters: [ItemFilter]?

                /** Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. */
                public var sortBy: [String]?

                /** Optional. Specify additional fields of information to return in the output. */
                public var fields: [ItemFields]?

                public init(channelId: ID, folderId: ID? = nil, userId: ID? = nil, startIndex: Int? = nil, limit: Int? = nil, sortOrder: [SortOrder]? = nil, filters: [ItemFilter]? = nil, sortBy: [String]? = nil, fields: [ItemFields]? = nil) {
                    self.channelId = channelId
                    self.folderId = folderId
                    self.userId = userId
                    self.startIndex = startIndex
                    self.limit = limit
                    self.sortOrder = sortOrder
                    self.filters = filters
                    self.sortBy = sortBy
                    self.fields = fields
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetChannelItems.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(channelId: ID, folderId: ID? = nil, userId: ID? = nil, startIndex: Int? = nil, limit: Int? = nil, sortOrder: [SortOrder]? = nil, filters: [ItemFilter]? = nil, sortBy: [String]? = nil, fields: [ItemFields]? = nil) {
                let options = Options(channelId: channelId, folderId: folderId, userId: userId, startIndex: startIndex, limit: limit, sortOrder: sortOrder, filters: filters, sortBy: sortBy, fields: fields)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "channelId" + "}", with: "\(self.options.channelId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let folderId = options.folderId?.encode() {
                  params["folderId"] = folderId
                }
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let sortOrder = options.sortOrder?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["sortOrder"] = sortOrder
                }
                if let filters = options.filters?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filters"] = filters
                }
                if let sortBy = options.sortBy?.joined(separator: ",") {
                  params["sortBy"] = sortBy
                }
                if let fields = options.fields?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields"] = fields
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Channel items returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
