//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Channels {

    /** Gets available channels. */
    public enum GetChannels {

        public static let service = APIService<Response>(id: "GetChannels", tag: "Channels", method: "GET", path: "/Channels", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** User Id to filter by. Use System.Guid.Empty to not filter by user. */
                public var userId: ID?

                /** Optional. The record index to start at. All items with a lower index will be dropped from the results. */
                public var startIndex: Int?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** Optional. Filter by channels that support getting latest items. */
                public var supportsLatestItems: Bool?

                /** Optional. Filter by channels that support media deletion. */
                public var supportsMediaDeletion: Bool?

                /** Optional. Filter by channels that are favorite. */
                public var isFavorite: Bool?

                public init(userId: ID? = nil, startIndex: Int? = nil, limit: Int? = nil, supportsLatestItems: Bool? = nil, supportsMediaDeletion: Bool? = nil, isFavorite: Bool? = nil) {
                    self.userId = userId
                    self.startIndex = startIndex
                    self.limit = limit
                    self.supportsLatestItems = supportsLatestItems
                    self.supportsMediaDeletion = supportsMediaDeletion
                    self.isFavorite = isFavorite
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetChannels.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID? = nil, startIndex: Int? = nil, limit: Int? = nil, supportsLatestItems: Bool? = nil, supportsMediaDeletion: Bool? = nil, isFavorite: Bool? = nil) {
                let options = Options(userId: userId, startIndex: startIndex, limit: limit, supportsLatestItems: supportsLatestItems, supportsMediaDeletion: supportsMediaDeletion, isFavorite: isFavorite)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let supportsLatestItems = options.supportsLatestItems {
                  params["supportsLatestItems"] = supportsLatestItems
                }
                if let supportsMediaDeletion = options.supportsMediaDeletion {
                  params["supportsMediaDeletion"] = supportsMediaDeletion
                }
                if let isFavorite = options.isFavorite {
                  params["isFavorite"] = isFavorite
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Channels returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
