//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.User {

    /** Authenticates a user. */
    public enum AuthenticateUser {

        public static let service = APIService<Response>(id: "AuthenticateUser", tag: "User", method: "POST", path: "/Users/{userId}/Authenticate", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The user id. */
                public var userId: ID

                /** The password as plain text. */
                public var pw: String

                /** The password sha1-hash. */
                public var password: String?

                public init(userId: ID, pw: String, password: String? = nil) {
                    self.userId = userId
                    self.pw = pw
                    self.password = password
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AuthenticateUser.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID, pw: String, password: String? = nil) {
                let options = Options(userId: userId, pw: pw, password: password)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "userId" + "}", with: "\(self.options.userId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["pw"] = options.pw
                if let password = options.password {
                  params["password"] = password
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = AuthenticationResultModel

            /** User authenticated. */
            case status200(AuthenticationResultModel)

            /** Sha1-hashed password only is not allowed. */
            case status403(ProblemDetailsModel)

            /** User not found. */
            case status404(ProblemDetailsModel)

            public var success: AuthenticationResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ProblemDetailsModel? {
                switch self {
                case .status403(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<AuthenticationResultModel, ProblemDetailsModel> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(AuthenticationResultModel.self, from: data))
                case 403: self = try .status403(decoder.decode(ProblemDetailsModel.self, from: data))
                case 404: self = try .status404(decoder.decode(ProblemDetailsModel.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
