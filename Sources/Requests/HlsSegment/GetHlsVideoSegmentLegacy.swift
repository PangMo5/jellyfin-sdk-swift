//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.HlsSegment {

    /** Gets a hls video segment. */
    public enum GetHlsVideoSegmentLegacy {

        public static let service = APIService<Response>(id: "GetHlsVideoSegmentLegacy", tag: "HlsSegment", method: "GET", path: "/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The item id. */
                public var itemId: String

                /** The playlist id. */
                public var playlistId: String

                /** The segment id. */
                public var segmentId: String

                /** The segment container. */
                public var segmentContainer: String

                public init(itemId: String, playlistId: String, segmentId: String, segmentContainer: String) {
                    self.itemId = itemId
                    self.playlistId = playlistId
                    self.segmentId = segmentId
                    self.segmentContainer = segmentContainer
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetHlsVideoSegmentLegacy.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(itemId: String, playlistId: String, segmentId: String, segmentContainer: String) {
                let options = Options(itemId: itemId, playlistId: playlistId, segmentId: segmentId, segmentContainer: segmentContainer)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "itemId" + "}", with: "\(self.options.itemId)").replacingOccurrences(of: "{" + "playlistId" + "}", with: "\(self.options.playlistId)").replacingOccurrences(of: "{" + "segmentId" + "}", with: "\(self.options.segmentId)").replacingOccurrences(of: "{" + "segmentContainer" + "}", with: "\(self.options.segmentContainer)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = File

            /** Hls video segment returned. */
            case status200(File)

            /** Hls segment not found. */
            case status404(ProblemDetailsModel)

            public var success: File? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ProblemDetailsModel? {
                switch self {
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<File, ProblemDetailsModel> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(data)
                case 404: self = try .status404(decoder.decode(ProblemDetailsModel.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
