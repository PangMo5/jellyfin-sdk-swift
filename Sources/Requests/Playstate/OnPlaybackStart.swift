//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Playstate {

    /** Reports that a user has begun playing an item. */
    public enum OnPlaybackStart {

        public static let service = APIService<Response>(id: "OnPlaybackStart", tag: "Playstate", method: "POST", path: "/Users/{userId}/PlayingItems/{itemId}", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** User id. */
                public var userId: ID

                /** Item id. */
                public var itemId: ID

                /** The id of the MediaSource. */
                public var mediaSourceId: String?

                /** The audio stream index. */
                public var audioStreamIndex: Int?

                /** The subtitle stream index. */
                public var subtitleStreamIndex: Int?

                /** The play method. */
                public var playMethod: PlayMethod?

                /** The live stream id. */
                public var liveStreamId: String?

                /** The play session id. */
                public var playSessionId: String?

                /** Indicates if the client can seek. */
                public var canSeek: Bool?

                public init(userId: ID, itemId: ID, mediaSourceId: String? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, playMethod: PlayMethod? = nil, liveStreamId: String? = nil, playSessionId: String? = nil, canSeek: Bool? = nil) {
                    self.userId = userId
                    self.itemId = itemId
                    self.mediaSourceId = mediaSourceId
                    self.audioStreamIndex = audioStreamIndex
                    self.subtitleStreamIndex = subtitleStreamIndex
                    self.playMethod = playMethod
                    self.liveStreamId = liveStreamId
                    self.playSessionId = playSessionId
                    self.canSeek = canSeek
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: OnPlaybackStart.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID, itemId: ID, mediaSourceId: String? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, playMethod: PlayMethod? = nil, liveStreamId: String? = nil, playSessionId: String? = nil, canSeek: Bool? = nil) {
                let options = Options(userId: userId, itemId: itemId, mediaSourceId: mediaSourceId, audioStreamIndex: audioStreamIndex, subtitleStreamIndex: subtitleStreamIndex, playMethod: playMethod, liveStreamId: liveStreamId, playSessionId: playSessionId, canSeek: canSeek)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "userId" + "}", with: "\(self.options.userId.encode())").replacingOccurrences(of: "{" + "itemId" + "}", with: "\(self.options.itemId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let mediaSourceId = options.mediaSourceId {
                  params["mediaSourceId"] = mediaSourceId
                }
                if let audioStreamIndex = options.audioStreamIndex {
                  params["audioStreamIndex"] = audioStreamIndex
                }
                if let subtitleStreamIndex = options.subtitleStreamIndex {
                  params["subtitleStreamIndex"] = subtitleStreamIndex
                }
                if let playMethod = options.playMethod?.encode() {
                  params["playMethod"] = playMethod
                }
                if let liveStreamId = options.liveStreamId {
                  params["liveStreamId"] = liveStreamId
                }
                if let playSessionId = options.playSessionId {
                  params["playSessionId"] = playSessionId
                }
                if let canSeek = options.canSeek {
                  params["canSeek"] = canSeek
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Play start recorded. */
            case status204

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
