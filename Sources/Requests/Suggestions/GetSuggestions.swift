//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Suggestions {

    /** Gets suggestions. */
    public enum GetSuggestions {

        public static let service = APIService<Response>(id: "GetSuggestions", tag: "Suggestions", method: "GET", path: "/Users/{userId}/Suggestions", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The user id. */
                public var userId: ID

                /** The media types. */
                public var mediaType: [String]?

                /** The type. */
                public var type: [String]?

                /** Optional. The start index. */
                public var startIndex: Int?

                /** Optional. The limit. */
                public var limit: Int?

                /** Whether to enable the total record count. */
                public var enableTotalRecordCount: Bool?

                public init(userId: ID, mediaType: [String]? = nil, type: [String]? = nil, startIndex: Int? = nil, limit: Int? = nil, enableTotalRecordCount: Bool? = nil) {
                    self.userId = userId
                    self.mediaType = mediaType
                    self.type = type
                    self.startIndex = startIndex
                    self.limit = limit
                    self.enableTotalRecordCount = enableTotalRecordCount
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSuggestions.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID, mediaType: [String]? = nil, type: [String]? = nil, startIndex: Int? = nil, limit: Int? = nil, enableTotalRecordCount: Bool? = nil) {
                let options = Options(userId: userId, mediaType: mediaType, type: type, startIndex: startIndex, limit: limit, enableTotalRecordCount: enableTotalRecordCount)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "userId" + "}", with: "\(self.options.userId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let mediaType = options.mediaType?.joined(separator: ",") {
                  params["mediaType"] = mediaType
                }
                if let type = options.type?.joined(separator: ",") {
                  params["type"] = type
                }
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let enableTotalRecordCount = options.enableTotalRecordCount {
                  params["enableTotalRecordCount"] = enableTotalRecordCount
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Suggestions returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
