//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Persons {

    /** Gets all persons. */
    public enum GetPersons {

        public static let service = APIService<Response>(id: "GetPersons", tag: "Persons", method: "GET", path: "/Persons", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** The search term. */
                public var searchTerm: String?

                /** Optional. Specify additional fields of information to return in the output. */
                public var fields: [ItemFields]?

                /** Optional. Specify additional filters to apply. */
                public var filters: [ItemFilter]?

                /** Optional filter by items that are marked as favorite, or not. userId is required. */
                public var isFavorite: Bool?

                /** Optional, include user data. */
                public var enableUserData: Bool?

                /** Optional, the max number of images to return, per image type. */
                public var imageTypeLimit: Int?

                /** Optional. The image types to include in the output. */
                public var enableImageTypes: [ImageType]?

                /** Optional. If specified results will be filtered to exclude those containing the specified PersonType. Allows multiple, comma-delimited. */
                public var excludePersonTypes: [String]?

                /** Optional. If specified results will be filtered to include only those containing the specified PersonType. Allows multiple, comma-delimited. */
                public var personTypes: [String]?

                /** Optional. If specified, person results will be filtered on items related to said persons. */
                public var appearsInItemId: ID?

                /** User id. */
                public var userId: ID?

                /** Optional, include image information in output. */
                public var enableImages: Bool?

                public init(limit: Int? = nil, searchTerm: String? = nil, fields: [ItemFields]? = nil, filters: [ItemFilter]? = nil, isFavorite: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, excludePersonTypes: [String]? = nil, personTypes: [String]? = nil, appearsInItemId: ID? = nil, userId: ID? = nil, enableImages: Bool? = nil) {
                    self.limit = limit
                    self.searchTerm = searchTerm
                    self.fields = fields
                    self.filters = filters
                    self.isFavorite = isFavorite
                    self.enableUserData = enableUserData
                    self.imageTypeLimit = imageTypeLimit
                    self.enableImageTypes = enableImageTypes
                    self.excludePersonTypes = excludePersonTypes
                    self.personTypes = personTypes
                    self.appearsInItemId = appearsInItemId
                    self.userId = userId
                    self.enableImages = enableImages
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetPersons.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(limit: Int? = nil, searchTerm: String? = nil, fields: [ItemFields]? = nil, filters: [ItemFilter]? = nil, isFavorite: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, excludePersonTypes: [String]? = nil, personTypes: [String]? = nil, appearsInItemId: ID? = nil, userId: ID? = nil, enableImages: Bool? = nil) {
                let options = Options(limit: limit, searchTerm: searchTerm, fields: fields, filters: filters, isFavorite: isFavorite, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, excludePersonTypes: excludePersonTypes, personTypes: personTypes, appearsInItemId: appearsInItemId, userId: userId, enableImages: enableImages)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let searchTerm = options.searchTerm {
                  params["searchTerm"] = searchTerm
                }
                if let fields = options.fields?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields"] = fields
                }
                if let filters = options.filters?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filters"] = filters
                }
                if let isFavorite = options.isFavorite {
                  params["isFavorite"] = isFavorite
                }
                if let enableUserData = options.enableUserData {
                  params["enableUserData"] = enableUserData
                }
                if let imageTypeLimit = options.imageTypeLimit {
                  params["imageTypeLimit"] = imageTypeLimit
                }
                if let enableImageTypes = options.enableImageTypes?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["enableImageTypes"] = enableImageTypes
                }
                if let excludePersonTypes = options.excludePersonTypes?.joined(separator: ",") {
                  params["excludePersonTypes"] = excludePersonTypes
                }
                if let personTypes = options.personTypes?.joined(separator: ",") {
                  params["personTypes"] = personTypes
                }
                if let appearsInItemId = options.appearsInItemId?.encode() {
                  params["appearsInItemId"] = appearsInItemId
                }
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let enableImages = options.enableImages {
                  params["enableImages"] = enableImages
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Persons returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
