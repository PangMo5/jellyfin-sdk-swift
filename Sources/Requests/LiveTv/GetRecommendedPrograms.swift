//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.LiveTv {

    /** Gets recommended live tv epgs. */
    public enum GetRecommendedPrograms {

        public static let service = APIService<Response>(id: "GetRecommendedPrograms", tag: "LiveTv", method: "GET", path: "/LiveTv/Programs/Recommended", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Optional. filter by user id. */
                public var userId: ID?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** Optional. Filter by programs that are currently airing, or not. */
                public var isAiring: Bool?

                /** Optional. Filter by programs that have completed airing, or not. */
                public var hasAired: Bool?

                /** Optional. Filter for series. */
                public var isSeries: Bool?

                /** Optional. Filter for movies. */
                public var isMovie: Bool?

                /** Optional. Filter for news. */
                public var isNews: Bool?

                /** Optional. Filter for kids. */
                public var isKids: Bool?

                /** Optional. Filter for sports. */
                public var isSports: Bool?

                /** Optional. Include image information in output. */
                public var enableImages: Bool?

                /** Optional. The max number of images to return, per image type. */
                public var imageTypeLimit: Int?

                /** Optional. The image types to include in the output. */
                public var enableImageTypes: [ImageType]?

                /** The genres to return guide information for. */
                public var genreIds: [ID]?

                /** Optional. Specify additional fields of information to return in the output. */
                public var fields: [ItemFields]?

                /** Optional. include user data. */
                public var enableUserData: Bool?

                /** Retrieve total record count. */
                public var enableTotalRecordCount: Bool?

                public init(userId: ID? = nil, limit: Int? = nil, isAiring: Bool? = nil, hasAired: Bool? = nil, isSeries: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, genreIds: [ID]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, enableTotalRecordCount: Bool? = nil) {
                    self.userId = userId
                    self.limit = limit
                    self.isAiring = isAiring
                    self.hasAired = hasAired
                    self.isSeries = isSeries
                    self.isMovie = isMovie
                    self.isNews = isNews
                    self.isKids = isKids
                    self.isSports = isSports
                    self.enableImages = enableImages
                    self.imageTypeLimit = imageTypeLimit
                    self.enableImageTypes = enableImageTypes
                    self.genreIds = genreIds
                    self.fields = fields
                    self.enableUserData = enableUserData
                    self.enableTotalRecordCount = enableTotalRecordCount
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetRecommendedPrograms.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID? = nil, limit: Int? = nil, isAiring: Bool? = nil, hasAired: Bool? = nil, isSeries: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, genreIds: [ID]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, enableTotalRecordCount: Bool? = nil) {
                let options = Options(userId: userId, limit: limit, isAiring: isAiring, hasAired: hasAired, isSeries: isSeries, isMovie: isMovie, isNews: isNews, isKids: isKids, isSports: isSports, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, genreIds: genreIds, fields: fields, enableUserData: enableUserData, enableTotalRecordCount: enableTotalRecordCount)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let isAiring = options.isAiring {
                  params["isAiring"] = isAiring
                }
                if let hasAired = options.hasAired {
                  params["hasAired"] = hasAired
                }
                if let isSeries = options.isSeries {
                  params["isSeries"] = isSeries
                }
                if let isMovie = options.isMovie {
                  params["isMovie"] = isMovie
                }
                if let isNews = options.isNews {
                  params["isNews"] = isNews
                }
                if let isKids = options.isKids {
                  params["isKids"] = isKids
                }
                if let isSports = options.isSports {
                  params["isSports"] = isSports
                }
                if let enableImages = options.enableImages {
                  params["enableImages"] = enableImages
                }
                if let imageTypeLimit = options.imageTypeLimit {
                  params["imageTypeLimit"] = imageTypeLimit
                }
                if let enableImageTypes = options.enableImageTypes?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["enableImageTypes"] = enableImageTypes
                }
                if let genreIds = options.genreIds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["genreIds"] = genreIds
                }
                if let fields = options.fields?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields"] = fields
                }
                if let enableUserData = options.enableUserData {
                  params["enableUserData"] = enableUserData
                }
                if let enableTotalRecordCount = options.enableTotalRecordCount {
                  params["enableTotalRecordCount"] = enableTotalRecordCount
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Recommended epgs returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
