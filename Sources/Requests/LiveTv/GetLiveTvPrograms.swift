//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.LiveTv {

    /** Gets available live tv epgs. */
    public enum GetLiveTvPrograms {

        public static let service = APIService<Response>(id: "GetLiveTvPrograms", tag: "LiveTv", method: "GET", path: "/LiveTv/Programs", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The channels to return guide information for. */
                public var channelIds: [ID]?

                /** Optional. Filter by user id. */
                public var userId: ID?

                /** Optional. The minimum premiere start date. */
                public var minStartDate: DateTime?

                /** Optional. Filter by programs that have completed airing, or not. */
                public var hasAired: Bool?

                /** Optional. Filter by programs that are currently airing, or not. */
                public var isAiring: Bool?

                /** Optional. The maximum premiere start date. */
                public var maxStartDate: DateTime?

                /** Optional. The minimum premiere end date. */
                public var minEndDate: DateTime?

                /** Optional. The maximum premiere end date. */
                public var maxEndDate: DateTime?

                /** Optional. Filter for movies. */
                public var isMovie: Bool?

                /** Optional. Filter for series. */
                public var isSeries: Bool?

                /** Optional. Filter for news. */
                public var isNews: Bool?

                /** Optional. Filter for kids. */
                public var isKids: Bool?

                /** Optional. Filter for sports. */
                public var isSports: Bool?

                /** Optional. The record index to start at. All items with a lower index will be dropped from the results. */
                public var startIndex: Int?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. */
                public var sortBy: [String]?

                /** Sort Order - Ascending,Descending. */
                public var sortOrder: [SortOrder]?

                /** The genres to return guide information for. */
                public var genres: [String]?

                /** The genre ids to return guide information for. */
                public var genreIds: [ID]?

                /** Optional. Include image information in output. */
                public var enableImages: Bool?

                /** Optional. The max number of images to return, per image type. */
                public var imageTypeLimit: Int?

                /** Optional. The image types to include in the output. */
                public var enableImageTypes: [ImageType]?

                /** Optional. Include user data. */
                public var enableUserData: Bool?

                /** Optional. Filter by series timer id. */
                public var seriesTimerId: String?

                /** Optional. Filter by library series id. */
                public var librarySeriesId: ID?

                /** Optional. Specify additional fields of information to return in the output. */
                public var fields: [ItemFields]?

                /** Retrieve total record count. */
                public var enableTotalRecordCount: Bool?

                public init(channelIds: [ID]? = nil, userId: ID? = nil, minStartDate: DateTime? = nil, hasAired: Bool? = nil, isAiring: Bool? = nil, maxStartDate: DateTime? = nil, minEndDate: DateTime? = nil, maxEndDate: DateTime? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, sortBy: [String]? = nil, sortOrder: [SortOrder]? = nil, genres: [String]? = nil, genreIds: [ID]? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, enableUserData: Bool? = nil, seriesTimerId: String? = nil, librarySeriesId: ID? = nil, fields: [ItemFields]? = nil, enableTotalRecordCount: Bool? = nil) {
                    self.channelIds = channelIds
                    self.userId = userId
                    self.minStartDate = minStartDate
                    self.hasAired = hasAired
                    self.isAiring = isAiring
                    self.maxStartDate = maxStartDate
                    self.minEndDate = minEndDate
                    self.maxEndDate = maxEndDate
                    self.isMovie = isMovie
                    self.isSeries = isSeries
                    self.isNews = isNews
                    self.isKids = isKids
                    self.isSports = isSports
                    self.startIndex = startIndex
                    self.limit = limit
                    self.sortBy = sortBy
                    self.sortOrder = sortOrder
                    self.genres = genres
                    self.genreIds = genreIds
                    self.enableImages = enableImages
                    self.imageTypeLimit = imageTypeLimit
                    self.enableImageTypes = enableImageTypes
                    self.enableUserData = enableUserData
                    self.seriesTimerId = seriesTimerId
                    self.librarySeriesId = librarySeriesId
                    self.fields = fields
                    self.enableTotalRecordCount = enableTotalRecordCount
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetLiveTvPrograms.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(channelIds: [ID]? = nil, userId: ID? = nil, minStartDate: DateTime? = nil, hasAired: Bool? = nil, isAiring: Bool? = nil, maxStartDate: DateTime? = nil, minEndDate: DateTime? = nil, maxEndDate: DateTime? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, sortBy: [String]? = nil, sortOrder: [SortOrder]? = nil, genres: [String]? = nil, genreIds: [ID]? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, enableUserData: Bool? = nil, seriesTimerId: String? = nil, librarySeriesId: ID? = nil, fields: [ItemFields]? = nil, enableTotalRecordCount: Bool? = nil) {
                let options = Options(channelIds: channelIds, userId: userId, minStartDate: minStartDate, hasAired: hasAired, isAiring: isAiring, maxStartDate: maxStartDate, minEndDate: minEndDate, maxEndDate: maxEndDate, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, startIndex: startIndex, limit: limit, sortBy: sortBy, sortOrder: sortOrder, genres: genres, genreIds: genreIds, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData, seriesTimerId: seriesTimerId, librarySeriesId: librarySeriesId, fields: fields, enableTotalRecordCount: enableTotalRecordCount)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let channelIds = options.channelIds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["channelIds"] = channelIds
                }
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let minStartDate = options.minStartDate?.encode() {
                  params["minStartDate"] = minStartDate
                }
                if let hasAired = options.hasAired {
                  params["hasAired"] = hasAired
                }
                if let isAiring = options.isAiring {
                  params["isAiring"] = isAiring
                }
                if let maxStartDate = options.maxStartDate?.encode() {
                  params["maxStartDate"] = maxStartDate
                }
                if let minEndDate = options.minEndDate?.encode() {
                  params["minEndDate"] = minEndDate
                }
                if let maxEndDate = options.maxEndDate?.encode() {
                  params["maxEndDate"] = maxEndDate
                }
                if let isMovie = options.isMovie {
                  params["isMovie"] = isMovie
                }
                if let isSeries = options.isSeries {
                  params["isSeries"] = isSeries
                }
                if let isNews = options.isNews {
                  params["isNews"] = isNews
                }
                if let isKids = options.isKids {
                  params["isKids"] = isKids
                }
                if let isSports = options.isSports {
                  params["isSports"] = isSports
                }
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let sortBy = options.sortBy?.joined(separator: ",") {
                  params["sortBy"] = sortBy
                }
                if let sortOrder = options.sortOrder?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["sortOrder"] = sortOrder
                }
                if let genres = options.genres?.joined(separator: ",") {
                  params["genres"] = genres
                }
                if let genreIds = options.genreIds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["genreIds"] = genreIds
                }
                if let enableImages = options.enableImages {
                  params["enableImages"] = enableImages
                }
                if let imageTypeLimit = options.imageTypeLimit {
                  params["imageTypeLimit"] = imageTypeLimit
                }
                if let enableImageTypes = options.enableImageTypes?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["enableImageTypes"] = enableImageTypes
                }
                if let enableUserData = options.enableUserData {
                  params["enableUserData"] = enableUserData
                }
                if let seriesTimerId = options.seriesTimerId {
                  params["seriesTimerId"] = seriesTimerId
                }
                if let librarySeriesId = options.librarySeriesId?.encode() {
                  params["librarySeriesId"] = librarySeriesId
                }
                if let fields = options.fields?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields"] = fields
                }
                if let enableTotalRecordCount = options.enableTotalRecordCount {
                  params["enableTotalRecordCount"] = enableTotalRecordCount
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Live tv epgs returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
