//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.LiveTv {

    /** Gets available live tv channels. */
    public enum GetLiveTvChannels {

        public static let service = APIService<Response>(id: "GetLiveTvChannels", tag: "LiveTv", method: "GET", path: "/LiveTv/Channels", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Optional. Filter by channel type. */
                public var type: ChannelType?

                /** Optional. Filter by user and attach user data. */
                public var userId: ID?

                /** Optional. The record index to start at. All items with a lower index will be dropped from the results. */
                public var startIndex: Int?

                /** Optional. Filter for movies. */
                public var isMovie: Bool?

                /** Optional. Filter for series. */
                public var isSeries: Bool?

                /** Optional. Filter for news. */
                public var isNews: Bool?

                /** Optional. Filter for kids. */
                public var isKids: Bool?

                /** Optional. Filter for sports. */
                public var isSports: Bool?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** Optional. Filter by channels that are favorites, or not. */
                public var isFavorite: Bool?

                /** Optional. Filter by channels that are liked, or not. */
                public var isLiked: Bool?

                /** Optional. Filter by channels that are disliked, or not. */
                public var isDisliked: Bool?

                /** Optional. Include image information in output. */
                public var enableImages: Bool?

                /** Optional. The max number of images to return, per image type. */
                public var imageTypeLimit: Int?

                /** "Optional. The image types to include in the output. */
                public var enableImageTypes: [ImageType]?

                /** Optional. Specify additional fields of information to return in the output. */
                public var fields: [ItemFields]?

                /** Optional. Include user data. */
                public var enableUserData: Bool?

                /** Optional. Key to sort by. */
                public var sortBy: [String]?

                /** Optional. Sort order. */
                public var sortOrder: SortOrder?

                /** Optional. Incorporate favorite and like status into channel sorting. */
                public var enableFavoriteSorting: Bool?

                /** Optional. Adds current program info to each channel. */
                public var addCurrentProgram: Bool?

                public init(type: ChannelType? = nil, userId: ID? = nil, startIndex: Int? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, limit: Int? = nil, isFavorite: Bool? = nil, isLiked: Bool? = nil, isDisliked: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, sortBy: [String]? = nil, sortOrder: SortOrder? = nil, enableFavoriteSorting: Bool? = nil, addCurrentProgram: Bool? = nil) {
                    self.type = type
                    self.userId = userId
                    self.startIndex = startIndex
                    self.isMovie = isMovie
                    self.isSeries = isSeries
                    self.isNews = isNews
                    self.isKids = isKids
                    self.isSports = isSports
                    self.limit = limit
                    self.isFavorite = isFavorite
                    self.isLiked = isLiked
                    self.isDisliked = isDisliked
                    self.enableImages = enableImages
                    self.imageTypeLimit = imageTypeLimit
                    self.enableImageTypes = enableImageTypes
                    self.fields = fields
                    self.enableUserData = enableUserData
                    self.sortBy = sortBy
                    self.sortOrder = sortOrder
                    self.enableFavoriteSorting = enableFavoriteSorting
                    self.addCurrentProgram = addCurrentProgram
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetLiveTvChannels.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(type: ChannelType? = nil, userId: ID? = nil, startIndex: Int? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, limit: Int? = nil, isFavorite: Bool? = nil, isLiked: Bool? = nil, isDisliked: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, sortBy: [String]? = nil, sortOrder: SortOrder? = nil, enableFavoriteSorting: Bool? = nil, addCurrentProgram: Bool? = nil) {
                let options = Options(type: type, userId: userId, startIndex: startIndex, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, limit: limit, isFavorite: isFavorite, isLiked: isLiked, isDisliked: isDisliked, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, fields: fields, enableUserData: enableUserData, sortBy: sortBy, sortOrder: sortOrder, enableFavoriteSorting: enableFavoriteSorting, addCurrentProgram: addCurrentProgram)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let type = options.type?.encode() {
                  params["type"] = type
                }
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let isMovie = options.isMovie {
                  params["isMovie"] = isMovie
                }
                if let isSeries = options.isSeries {
                  params["isSeries"] = isSeries
                }
                if let isNews = options.isNews {
                  params["isNews"] = isNews
                }
                if let isKids = options.isKids {
                  params["isKids"] = isKids
                }
                if let isSports = options.isSports {
                  params["isSports"] = isSports
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let isFavorite = options.isFavorite {
                  params["isFavorite"] = isFavorite
                }
                if let isLiked = options.isLiked {
                  params["isLiked"] = isLiked
                }
                if let isDisliked = options.isDisliked {
                  params["isDisliked"] = isDisliked
                }
                if let enableImages = options.enableImages {
                  params["enableImages"] = enableImages
                }
                if let imageTypeLimit = options.imageTypeLimit {
                  params["imageTypeLimit"] = imageTypeLimit
                }
                if let enableImageTypes = options.enableImageTypes?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["enableImageTypes"] = enableImageTypes
                }
                if let fields = options.fields?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields"] = fields
                }
                if let enableUserData = options.enableUserData {
                  params["enableUserData"] = enableUserData
                }
                if let sortBy = options.sortBy?.joined(separator: ",") {
                  params["sortBy"] = sortBy
                }
                if let sortOrder = options.sortOrder?.encode() {
                  params["sortOrder"] = sortOrder
                }
                if let enableFavoriteSorting = options.enableFavoriteSorting {
                  params["enableFavoriteSorting"] = enableFavoriteSorting
                }
                if let addCurrentProgram = options.addCurrentProgram {
                  params["addCurrentProgram"] = addCurrentProgram
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Available live tv channels returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
