//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Dashboard {

    /** Gets the configuration pages. */
    public enum GetConfigurationPages {

        public static let service = APIService<Response>(id: "GetConfigurationPages", tag: "Dashboard", method: "GET", path: "/web/ConfigurationPages", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Whether to enable in the main menu. */
                public var enableInMainMenu: Bool?

                /** The Jellyfin.Api.Models.ConfigurationPageInfo. */
                public var pageType: ConfigurationPageType?

                public init(enableInMainMenu: Bool? = nil, pageType: ConfigurationPageType? = nil) {
                    self.enableInMainMenu = enableInMainMenu
                    self.pageType = pageType
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetConfigurationPages.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(enableInMainMenu: Bool? = nil, pageType: ConfigurationPageType? = nil) {
                let options = Options(enableInMainMenu: enableInMainMenu, pageType: pageType)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let enableInMainMenu = options.enableInMainMenu {
                  params["enableInMainMenu"] = enableInMainMenu
                }
                if let pageType = options.pageType?.encode() {
                  params["pageType"] = pageType
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [ConfigurationPageInfoModel]

            /** ConfigurationPages returned. */
            case status200([ConfigurationPageInfoModel])

            /** Server still loading. */
            case status404(ProblemDetailsModel)

            public var success: [ConfigurationPageInfoModel]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ProblemDetailsModel? {
                switch self {
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[ConfigurationPageInfoModel], ProblemDetailsModel> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([ConfigurationPageInfoModel].self, from: data))
                case 404: self = try .status404(decoder.decode(ProblemDetailsModel.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
