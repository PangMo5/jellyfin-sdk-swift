//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.MediaInfo {

    /**
    Gets live playback media info for an item.

    For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
Query parameters are obsolete.
    */
    public enum GetPostedPlaybackInfo {

        public static let service = APIService<Response>(id: "GetPostedPlaybackInfo", tag: "MediaInfo", method: "POST", path: "/Items/{itemId}/PlaybackInfo", hasBody: true, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The item id. */
                public var itemId: ID

                /** The user id. */
                public var userId: ID?

                /** The maximum streaming bitrate. */
                public var maxStreamingBitrate: Int?

                /** The start time in ticks. */
                public var startTimeTicks: Int?

                /** The audio stream index. */
                public var audioStreamIndex: Int?

                /** The subtitle stream index. */
                public var subtitleStreamIndex: Int?

                /** The maximum number of audio channels. */
                public var maxAudioChannels: Int?

                /** The media source id. */
                public var mediaSourceId: String?

                /** The livestream id. */
                public var liveStreamId: String?

                /** Whether to auto open the livestream. */
                public var autoOpenLiveStream: Bool?

                /** Whether to enable direct play. Default: true. */
                public var enableDirectPlay: Bool?

                /** Whether to enable direct stream. Default: true. */
                public var enableDirectStream: Bool?

                /** Whether to enable transcoding. Default: true. */
                public var enableTranscoding: Bool?

                /** Whether to allow to copy the video stream. Default: true. */
                public var allowVideoStreamCopy: Bool?

                /** Whether to allow to copy the audio stream. Default: true. */
                public var allowAudioStreamCopy: Bool?

                public init(itemId: ID, userId: ID? = nil, maxStreamingBitrate: Int? = nil, startTimeTicks: Int? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, maxAudioChannels: Int? = nil, mediaSourceId: String? = nil, liveStreamId: String? = nil, autoOpenLiveStream: Bool? = nil, enableDirectPlay: Bool? = nil, enableDirectStream: Bool? = nil, enableTranscoding: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil) {
                    self.itemId = itemId
                    self.userId = userId
                    self.maxStreamingBitrate = maxStreamingBitrate
                    self.startTimeTicks = startTimeTicks
                    self.audioStreamIndex = audioStreamIndex
                    self.subtitleStreamIndex = subtitleStreamIndex
                    self.maxAudioChannels = maxAudioChannels
                    self.mediaSourceId = mediaSourceId
                    self.liveStreamId = liveStreamId
                    self.autoOpenLiveStream = autoOpenLiveStream
                    self.enableDirectPlay = enableDirectPlay
                    self.enableDirectStream = enableDirectStream
                    self.enableTranscoding = enableTranscoding
                    self.allowVideoStreamCopy = allowVideoStreamCopy
                    self.allowAudioStreamCopy = allowAudioStreamCopy
                }
            }

            public var options: Options

            public var body: PlaybackInfoDtoModel?

            public init(body: PlaybackInfoDtoModel?, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: GetPostedPlaybackInfo.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(itemId: ID, userId: ID? = nil, maxStreamingBitrate: Int? = nil, startTimeTicks: Int? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, maxAudioChannels: Int? = nil, mediaSourceId: String? = nil, liveStreamId: String? = nil, autoOpenLiveStream: Bool? = nil, enableDirectPlay: Bool? = nil, enableDirectStream: Bool? = nil, enableTranscoding: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, body: PlaybackInfoDtoModel? = nil) {
                let options = Options(itemId: itemId, userId: userId, maxStreamingBitrate: maxStreamingBitrate, startTimeTicks: startTimeTicks, audioStreamIndex: audioStreamIndex, subtitleStreamIndex: subtitleStreamIndex, maxAudioChannels: maxAudioChannels, mediaSourceId: mediaSourceId, liveStreamId: liveStreamId, autoOpenLiveStream: autoOpenLiveStream, enableDirectPlay: enableDirectPlay, enableDirectStream: enableDirectStream, enableTranscoding: enableTranscoding, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "itemId" + "}", with: "\(self.options.itemId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let maxStreamingBitrate = options.maxStreamingBitrate {
                  params["maxStreamingBitrate"] = maxStreamingBitrate
                }
                if let startTimeTicks = options.startTimeTicks {
                  params["startTimeTicks"] = startTimeTicks
                }
                if let audioStreamIndex = options.audioStreamIndex {
                  params["audioStreamIndex"] = audioStreamIndex
                }
                if let subtitleStreamIndex = options.subtitleStreamIndex {
                  params["subtitleStreamIndex"] = subtitleStreamIndex
                }
                if let maxAudioChannels = options.maxAudioChannels {
                  params["maxAudioChannels"] = maxAudioChannels
                }
                if let mediaSourceId = options.mediaSourceId {
                  params["mediaSourceId"] = mediaSourceId
                }
                if let liveStreamId = options.liveStreamId {
                  params["liveStreamId"] = liveStreamId
                }
                if let autoOpenLiveStream = options.autoOpenLiveStream {
                  params["autoOpenLiveStream"] = autoOpenLiveStream
                }
                if let enableDirectPlay = options.enableDirectPlay {
                  params["enableDirectPlay"] = enableDirectPlay
                }
                if let enableDirectStream = options.enableDirectStream {
                  params["enableDirectStream"] = enableDirectStream
                }
                if let enableTranscoding = options.enableTranscoding {
                  params["enableTranscoding"] = enableTranscoding
                }
                if let allowVideoStreamCopy = options.allowVideoStreamCopy {
                  params["allowVideoStreamCopy"] = allowVideoStreamCopy
                }
                if let allowAudioStreamCopy = options.allowAudioStreamCopy {
                  params["allowAudioStreamCopy"] = allowAudioStreamCopy
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PlaybackInfoResponseModel

            /** Playback info returned. */
            case status200(PlaybackInfoResponseModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: PlaybackInfoResponseModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(PlaybackInfoResponseModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
