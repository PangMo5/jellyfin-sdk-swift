//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Session {

    /** Updates capabilities for a device. */
    public enum PostCapabilities {

        public static let service = APIService<Response>(id: "PostCapabilities", tag: "Session", method: "POST", path: "/Sessions/Capabilities", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The session id. */
                public var id: String?

                /** A list of playable media types, comma delimited. Audio, Video, Book, Photo. */
                public var playableMediaTypes: [String]?

                /** A list of supported remote control commands, comma delimited. */
                public var supportedCommands: [GeneralCommandType]?

                /** Determines whether media can be played remotely.. */
                public var supportsMediaControl: Bool?

                /** Determines whether sync is supported. */
                public var supportsSync: Bool?

                /** Determines whether the device supports a unique identifier. */
                public var supportsPersistentIdentifier: Bool?

                public init(id: String? = nil, playableMediaTypes: [String]? = nil, supportedCommands: [GeneralCommandType]? = nil, supportsMediaControl: Bool? = nil, supportsSync: Bool? = nil, supportsPersistentIdentifier: Bool? = nil) {
                    self.id = id
                    self.playableMediaTypes = playableMediaTypes
                    self.supportedCommands = supportedCommands
                    self.supportsMediaControl = supportsMediaControl
                    self.supportsSync = supportsSync
                    self.supportsPersistentIdentifier = supportsPersistentIdentifier
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: PostCapabilities.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String? = nil, playableMediaTypes: [String]? = nil, supportedCommands: [GeneralCommandType]? = nil, supportsMediaControl: Bool? = nil, supportsSync: Bool? = nil, supportsPersistentIdentifier: Bool? = nil) {
                let options = Options(id: id, playableMediaTypes: playableMediaTypes, supportedCommands: supportedCommands, supportsMediaControl: supportsMediaControl, supportsSync: supportsSync, supportsPersistentIdentifier: supportsPersistentIdentifier)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id {
                  params["id"] = id
                }
                if let playableMediaTypes = options.playableMediaTypes?.joined(separator: ",") {
                  params["playableMediaTypes"] = playableMediaTypes
                }
                if let supportedCommands = options.supportedCommands?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["supportedCommands"] = supportedCommands
                }
                if let supportsMediaControl = options.supportsMediaControl {
                  params["supportsMediaControl"] = supportsMediaControl
                }
                if let supportsSync = options.supportsSync {
                  params["supportsSync"] = supportsSync
                }
                if let supportsPersistentIdentifier = options.supportsPersistentIdentifier {
                  params["supportsPersistentIdentifier"] = supportsPersistentIdentifier
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Capabilities posted. */
            case status204

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
