//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Session {

    /** Gets a list of sessions. */
    public enum GetSessions {

        public static let service = APIService<Response>(id: "GetSessions", tag: "Session", method: "GET", path: "/Sessions", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Filter by sessions that a given user is allowed to remote control. */
                public var controllableByUserId: ID?

                /** Filter by device Id. */
                public var deviceId: String?

                /** Optional. Filter by sessions that were active in the last n seconds. */
                public var activeWithinSeconds: Int?

                public init(controllableByUserId: ID? = nil, deviceId: String? = nil, activeWithinSeconds: Int? = nil) {
                    self.controllableByUserId = controllableByUserId
                    self.deviceId = deviceId
                    self.activeWithinSeconds = activeWithinSeconds
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSessions.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(controllableByUserId: ID? = nil, deviceId: String? = nil, activeWithinSeconds: Int? = nil) {
                let options = Options(controllableByUserId: controllableByUserId, deviceId: deviceId, activeWithinSeconds: activeWithinSeconds)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let controllableByUserId = options.controllableByUserId?.encode() {
                  params["controllableByUserId"] = controllableByUserId
                }
                if let deviceId = options.deviceId {
                  params["deviceId"] = deviceId
                }
                if let activeWithinSeconds = options.activeWithinSeconds {
                  params["activeWithinSeconds"] = activeWithinSeconds
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [SessionInfoModel]

            /** List of sessions returned. */
            case status200([SessionInfoModel])

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: [SessionInfoModel]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([SessionInfoModel].self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
