//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Session {

    /** Instructs a session to play an item. */
    public enum Play {

        public static let service = APIService<Response>(id: "Play", tag: "Session", method: "POST", path: "/Sessions/{sessionId}/Playing", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** The session id. */
                public var sessionId: String

                /** The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. */
                public var playCommand: PlayCommand

                /** The ids of the items to play, comma delimited. */
                public var itemIds: [ID]

                /** The starting position of the first item. */
                public var startPositionTicks: Int?

                /** Optional. The media source id. */
                public var mediaSourceId: String?

                /** Optional. The index of the audio stream to play. */
                public var audioStreamIndex: Int?

                /** Optional. The index of the subtitle stream to play. */
                public var subtitleStreamIndex: Int?

                /** Optional. The start index. */
                public var startIndex: Int?

                public init(sessionId: String, playCommand: PlayCommand, itemIds: [ID], startPositionTicks: Int? = nil, mediaSourceId: String? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, startIndex: Int? = nil) {
                    self.sessionId = sessionId
                    self.playCommand = playCommand
                    self.itemIds = itemIds
                    self.startPositionTicks = startPositionTicks
                    self.mediaSourceId = mediaSourceId
                    self.audioStreamIndex = audioStreamIndex
                    self.subtitleStreamIndex = subtitleStreamIndex
                    self.startIndex = startIndex
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: Play.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(sessionId: String, playCommand: PlayCommand, itemIds: [ID], startPositionTicks: Int? = nil, mediaSourceId: String? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, startIndex: Int? = nil) {
                let options = Options(sessionId: sessionId, playCommand: playCommand, itemIds: itemIds, startPositionTicks: startPositionTicks, mediaSourceId: mediaSourceId, audioStreamIndex: audioStreamIndex, subtitleStreamIndex: subtitleStreamIndex, startIndex: startIndex)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "sessionId" + "}", with: "\(self.options.sessionId)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["playCommand"] = options.playCommand.encode()
                params["itemIds"] = options.itemIds.encode().map({ String(describing: $0) }).joined(separator: ",")
                if let startPositionTicks = options.startPositionTicks {
                  params["startPositionTicks"] = startPositionTicks
                }
                if let mediaSourceId = options.mediaSourceId {
                  params["mediaSourceId"] = mediaSourceId
                }
                if let audioStreamIndex = options.audioStreamIndex {
                  params["audioStreamIndex"] = audioStreamIndex
                }
                if let subtitleStreamIndex = options.subtitleStreamIndex {
                  params["subtitleStreamIndex"] = subtitleStreamIndex
                }
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Instruction sent to session. */
            case status204

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
