//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.ItemLookup {

    /** Applies search criteria to an item and refreshes metadata. */
    public enum ApplySearchCriteria {

        public static let service = APIService<Response>(id: "ApplySearchCriteria", tag: "ItemLookup", method: "POST", path: "/Items/RemoteSearch/Apply/{itemId}", hasBody: true, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["RequiresElevation", "DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Item id. */
                public var itemId: ID

                /** Optional. Whether or not to replace all images. Default: True. */
                public var replaceAllImages: Bool?

                public init(itemId: ID, replaceAllImages: Bool? = nil) {
                    self.itemId = itemId
                    self.replaceAllImages = replaceAllImages
                }
            }

            public var options: Options

            public var body: RemoteSearchResultModel

            public init(body: RemoteSearchResultModel, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: ApplySearchCriteria.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(itemId: ID, replaceAllImages: Bool? = nil, body: RemoteSearchResultModel) {
                let options = Options(itemId: itemId, replaceAllImages: replaceAllImages)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "itemId" + "}", with: "\(self.options.itemId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let replaceAllImages = options.replaceAllImages {
                  params["replaceAllImages"] = replaceAllImages
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Item metadata refreshed. */
            case status204

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
