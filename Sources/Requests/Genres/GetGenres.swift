//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.Genres {

    /** Gets all genres from a given item, folder, or the entire library. */
    public enum GetGenres {

        public static let service = APIService<Response>(id: "GetGenres", tag: "Genres", method: "GET", path: "/Genres", hasBody: false, securityRequirements: [SecurityRequirement(type: "CustomAuthentication", scopes: ["DefaultAuthorization"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Optional. The record index to start at. All items with a lower index will be dropped from the results. */
                public var startIndex: Int?

                /** Optional. The maximum number of records to return. */
                public var limit: Int?

                /** The search term. */
                public var searchTerm: String?

                /** Specify this to localize the search to a specific item or folder. Omit to use the root. */
                public var parentId: ID?

                /** Optional. Specify additional fields of information to return in the output. */
                public var fields: [ItemFields]?

                /** Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited. */
                public var excludeItemTypes: [String]?

                /** Optional. If specified, results will be filtered in based on item type. This allows multiple, comma delimited. */
                public var includeItemTypes: [String]?

                /** Optional filter by items that are marked as favorite, or not. */
                public var isFavorite: Bool?

                /** Optional, the max number of images to return, per image type. */
                public var imageTypeLimit: Int?

                /** Optional. The image types to include in the output. */
                public var enableImageTypes: [ImageType]?

                /** User id. */
                public var userId: ID?

                /** Optional filter by items whose name is sorted equally or greater than a given input string. */
                public var nameStartsWithOrGreater: String?

                /** Optional filter by items whose name is sorted equally than a given input string. */
                public var nameStartsWith: String?

                /** Optional filter by items whose name is equally or lesser than a given input string. */
                public var nameLessThan: String?

                /** Optional, include image information in output. */
                public var enableImages: Bool?

                /** Optional. Include total record count. */
                public var enableTotalRecordCount: Bool?

                public init(startIndex: Int? = nil, limit: Int? = nil, searchTerm: String? = nil, parentId: ID? = nil, fields: [ItemFields]? = nil, excludeItemTypes: [String]? = nil, includeItemTypes: [String]? = nil, isFavorite: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, userId: ID? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, enableImages: Bool? = nil, enableTotalRecordCount: Bool? = nil) {
                    self.startIndex = startIndex
                    self.limit = limit
                    self.searchTerm = searchTerm
                    self.parentId = parentId
                    self.fields = fields
                    self.excludeItemTypes = excludeItemTypes
                    self.includeItemTypes = includeItemTypes
                    self.isFavorite = isFavorite
                    self.imageTypeLimit = imageTypeLimit
                    self.enableImageTypes = enableImageTypes
                    self.userId = userId
                    self.nameStartsWithOrGreater = nameStartsWithOrGreater
                    self.nameStartsWith = nameStartsWith
                    self.nameLessThan = nameLessThan
                    self.enableImages = enableImages
                    self.enableTotalRecordCount = enableTotalRecordCount
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetGenres.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(startIndex: Int? = nil, limit: Int? = nil, searchTerm: String? = nil, parentId: ID? = nil, fields: [ItemFields]? = nil, excludeItemTypes: [String]? = nil, includeItemTypes: [String]? = nil, isFavorite: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, userId: ID? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, enableImages: Bool? = nil, enableTotalRecordCount: Bool? = nil) {
                let options = Options(startIndex: startIndex, limit: limit, searchTerm: searchTerm, parentId: parentId, fields: fields, excludeItemTypes: excludeItemTypes, includeItemTypes: includeItemTypes, isFavorite: isFavorite, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, userId: userId, nameStartsWithOrGreater: nameStartsWithOrGreater, nameStartsWith: nameStartsWith, nameLessThan: nameLessThan, enableImages: enableImages, enableTotalRecordCount: enableTotalRecordCount)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let startIndex = options.startIndex {
                  params["startIndex"] = startIndex
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let searchTerm = options.searchTerm {
                  params["searchTerm"] = searchTerm
                }
                if let parentId = options.parentId?.encode() {
                  params["parentId"] = parentId
                }
                if let fields = options.fields?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields"] = fields
                }
                if let excludeItemTypes = options.excludeItemTypes?.joined(separator: ",") {
                  params["excludeItemTypes"] = excludeItemTypes
                }
                if let includeItemTypes = options.includeItemTypes?.joined(separator: ",") {
                  params["includeItemTypes"] = includeItemTypes
                }
                if let isFavorite = options.isFavorite {
                  params["isFavorite"] = isFavorite
                }
                if let imageTypeLimit = options.imageTypeLimit {
                  params["imageTypeLimit"] = imageTypeLimit
                }
                if let enableImageTypes = options.enableImageTypes?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["enableImageTypes"] = enableImageTypes
                }
                if let userId = options.userId?.encode() {
                  params["userId"] = userId
                }
                if let nameStartsWithOrGreater = options.nameStartsWithOrGreater {
                  params["nameStartsWithOrGreater"] = nameStartsWithOrGreater
                }
                if let nameStartsWith = options.nameStartsWith {
                  params["nameStartsWith"] = nameStartsWith
                }
                if let nameLessThan = options.nameLessThan {
                  params["nameLessThan"] = nameLessThan
                }
                if let enableImages = options.enableImages {
                  params["enableImages"] = enableImages
                }
                if let enableTotalRecordCount = options.enableTotalRecordCount {
                  params["enableTotalRecordCount"] = enableTotalRecordCount
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** Genres returned. */
            case status200(BaseItemDtoQueryResultModel)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
