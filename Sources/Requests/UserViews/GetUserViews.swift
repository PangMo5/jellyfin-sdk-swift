//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JellyfinAPI.UserViews {

    /** Get user views. */
    public enum GetUserViews {

        public static let service = APIService<Response>(id: "GetUserViews", tag: "UserViews", method: "GET", path: "/Users/{userId}/Views", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** User id. */
                public var userId: ID

                /** Whether or not to include external views such as channels or live tv. */
                public var includeExternalContent: Bool?

                /** Preset views. */
                public var presetViews: [String]?

                /** Whether or not to include hidden content. */
                public var includeHidden: Bool?

                public init(userId: ID, includeExternalContent: Bool? = nil, presetViews: [String]? = nil, includeHidden: Bool? = nil) {
                    self.userId = userId
                    self.includeExternalContent = includeExternalContent
                    self.presetViews = presetViews
                    self.includeHidden = includeHidden
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetUserViews.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: ID, includeExternalContent: Bool? = nil, presetViews: [String]? = nil, includeHidden: Bool? = nil) {
                let options = Options(userId: userId, includeExternalContent: includeExternalContent, presetViews: presetViews, includeHidden: includeHidden)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "userId" + "}", with: "\(self.options.userId.encode())")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let includeExternalContent = options.includeExternalContent {
                  params["includeExternalContent"] = includeExternalContent
                }
                if let presetViews = options.presetViews?.joined(separator: ",") {
                  params["presetViews"] = presetViews
                }
                if let includeHidden = options.includeHidden {
                  params["includeHidden"] = includeHidden
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BaseItemDtoQueryResultModel

            /** User views returned. */
            case status200(BaseItemDtoQueryResultModel)

            public var success: BaseItemDtoQueryResultModel? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BaseItemDtoQueryResultModel.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
