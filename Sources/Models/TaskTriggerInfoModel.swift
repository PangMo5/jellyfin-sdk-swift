//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class TaskTriggerInfo. */
public struct TaskTriggerInfoModel: APIModel {

    public var dayOfWeek: DayOfWeek?

    /** Gets or sets the interval. */
    public var intervalTicks: Int?

    /** Gets or sets the maximum runtime ticks. */
    public var maxRuntimeTicks: Int?

    /** Gets or sets the time of day. */
    public var timeOfDayTicks: Int?

    /** Gets or sets the type. */
    public var type: String?

    public init(dayOfWeek: DayOfWeek? = nil, intervalTicks: Int? = nil, maxRuntimeTicks: Int? = nil, timeOfDayTicks: Int? = nil, type: String? = nil) {
        self.dayOfWeek = dayOfWeek
        self.intervalTicks = intervalTicks
        self.maxRuntimeTicks = maxRuntimeTicks
        self.timeOfDayTicks = timeOfDayTicks
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        dayOfWeek = try decoderContainer.decodeIfPresent("DayOfWeek")
        intervalTicks = try decoderContainer.decodeIfPresent("IntervalTicks")
        maxRuntimeTicks = try decoderContainer.decodeIfPresent("MaxRuntimeTicks")
        timeOfDayTicks = try decoderContainer.decodeIfPresent("TimeOfDayTicks")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(dayOfWeek, forKey: "DayOfWeek")
        try encoderContainer.encodeIfPresent(intervalTicks, forKey: "IntervalTicks")
        try encoderContainer.encodeIfPresent(maxRuntimeTicks, forKey: "MaxRuntimeTicks")
        try encoderContainer.encodeIfPresent(timeOfDayTicks, forKey: "TimeOfDayTicks")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
