//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ListingsProviderInfoModel: APIModel {

    public var channelMappings: [NameValuePairModel]?

    public var country: String?

    public var enableAllTuners: Bool?

    public var enabledTuners: [String]?

    public var id: String?

    public var kidsCategories: [String]?

    public var listingsId: String?

    public var movieCategories: [String]?

    public var moviePrefix: String?

    public var newsCategories: [String]?

    public var password: String?

    public var path: String?

    public var preferredLanguage: String?

    public var sportsCategories: [String]?

    public var type: String?

    public var userAgent: String?

    public var username: String?

    public var zipCode: String?

    public init(channelMappings: [NameValuePairModel]? = nil, country: String? = nil, enableAllTuners: Bool? = nil, enabledTuners: [String]? = nil, id: String? = nil, kidsCategories: [String]? = nil, listingsId: String? = nil, movieCategories: [String]? = nil, moviePrefix: String? = nil, newsCategories: [String]? = nil, password: String? = nil, path: String? = nil, preferredLanguage: String? = nil, sportsCategories: [String]? = nil, type: String? = nil, userAgent: String? = nil, username: String? = nil, zipCode: String? = nil) {
        self.channelMappings = channelMappings
        self.country = country
        self.enableAllTuners = enableAllTuners
        self.enabledTuners = enabledTuners
        self.id = id
        self.kidsCategories = kidsCategories
        self.listingsId = listingsId
        self.movieCategories = movieCategories
        self.moviePrefix = moviePrefix
        self.newsCategories = newsCategories
        self.password = password
        self.path = path
        self.preferredLanguage = preferredLanguage
        self.sportsCategories = sportsCategories
        self.type = type
        self.userAgent = userAgent
        self.username = username
        self.zipCode = zipCode
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        channelMappings = try decoderContainer.decodeArrayIfPresent("ChannelMappings")
        country = try decoderContainer.decodeIfPresent("Country")
        enableAllTuners = try decoderContainer.decodeIfPresent("EnableAllTuners")
        enabledTuners = try decoderContainer.decodeArrayIfPresent("EnabledTuners")
        id = try decoderContainer.decodeIfPresent("Id")
        kidsCategories = try decoderContainer.decodeArrayIfPresent("KidsCategories")
        listingsId = try decoderContainer.decodeIfPresent("ListingsId")
        movieCategories = try decoderContainer.decodeArrayIfPresent("MovieCategories")
        moviePrefix = try decoderContainer.decodeIfPresent("MoviePrefix")
        newsCategories = try decoderContainer.decodeArrayIfPresent("NewsCategories")
        password = try decoderContainer.decodeIfPresent("Password")
        path = try decoderContainer.decodeIfPresent("Path")
        preferredLanguage = try decoderContainer.decodeIfPresent("PreferredLanguage")
        sportsCategories = try decoderContainer.decodeArrayIfPresent("SportsCategories")
        type = try decoderContainer.decodeIfPresent("Type")
        userAgent = try decoderContainer.decodeIfPresent("UserAgent")
        username = try decoderContainer.decodeIfPresent("Username")
        zipCode = try decoderContainer.decodeIfPresent("ZipCode")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(channelMappings, forKey: "ChannelMappings")
        try encoderContainer.encodeIfPresent(country, forKey: "Country")
        try encoderContainer.encodeIfPresent(enableAllTuners, forKey: "EnableAllTuners")
        try encoderContainer.encodeIfPresent(enabledTuners, forKey: "EnabledTuners")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(kidsCategories, forKey: "KidsCategories")
        try encoderContainer.encodeIfPresent(listingsId, forKey: "ListingsId")
        try encoderContainer.encodeIfPresent(movieCategories, forKey: "MovieCategories")
        try encoderContainer.encodeIfPresent(moviePrefix, forKey: "MoviePrefix")
        try encoderContainer.encodeIfPresent(newsCategories, forKey: "NewsCategories")
        try encoderContainer.encodeIfPresent(password, forKey: "Password")
        try encoderContainer.encodeIfPresent(path, forKey: "Path")
        try encoderContainer.encodeIfPresent(preferredLanguage, forKey: "PreferredLanguage")
        try encoderContainer.encodeIfPresent(sportsCategories, forKey: "SportsCategories")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(userAgent, forKey: "UserAgent")
        try encoderContainer.encodeIfPresent(username, forKey: "Username")
        try encoderContainer.encodeIfPresent(zipCode, forKey: "ZipCode")
    }

}
