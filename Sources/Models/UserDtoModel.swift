//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class UserDto. */
public struct UserDtoModel: APIModel {

    public var configuration: UserConfigurationModel?

    /** Gets or sets whether async login is enabled or not. */
    public var enableAutoLogin: Bool?

    /** Gets or sets a value indicating whether this instance has configured easy password. */
    public var hasConfiguredEasyPassword: Bool?

    /** Gets or sets a value indicating whether this instance has configured password. */
    public var hasConfiguredPassword: Bool?

    /** Gets or sets a value indicating whether this instance has password. */
    public var hasPassword: Bool?

    /** Gets or sets the id. */
    public var id: ID?

    /** Gets or sets the last activity date. */
    public var lastActivityDate: DateTime?

    /** Gets or sets the last login date. */
    public var lastLoginDate: DateTime?

    /** Gets or sets the name. */
    public var name: String?

    public var policy: UserPolicyModel?

    /** Gets or sets the primary image aspect ratio. */
    public var primaryImageAspectRatio: Double?

    /** Gets or sets the primary image tag. */
    public var primaryImageTag: String?

    /** Gets or sets the server identifier. */
    public var serverId: String?

    /** Gets or sets the name of the server.
This is not used by the server and is for client-side usage only. */
    public var serverName: String?

    public init(configuration: UserConfigurationModel? = nil, enableAutoLogin: Bool? = nil, hasConfiguredEasyPassword: Bool? = nil, hasConfiguredPassword: Bool? = nil, hasPassword: Bool? = nil, id: ID? = nil, lastActivityDate: DateTime? = nil, lastLoginDate: DateTime? = nil, name: String? = nil, policy: UserPolicyModel? = nil, primaryImageAspectRatio: Double? = nil, primaryImageTag: String? = nil, serverId: String? = nil, serverName: String? = nil) {
        self.configuration = configuration
        self.enableAutoLogin = enableAutoLogin
        self.hasConfiguredEasyPassword = hasConfiguredEasyPassword
        self.hasConfiguredPassword = hasConfiguredPassword
        self.hasPassword = hasPassword
        self.id = id
        self.lastActivityDate = lastActivityDate
        self.lastLoginDate = lastLoginDate
        self.name = name
        self.policy = policy
        self.primaryImageAspectRatio = primaryImageAspectRatio
        self.primaryImageTag = primaryImageTag
        self.serverId = serverId
        self.serverName = serverName
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        configuration = try decoderContainer.decodeIfPresent("Configuration")
        enableAutoLogin = try decoderContainer.decodeIfPresent("EnableAutoLogin")
        hasConfiguredEasyPassword = try decoderContainer.decodeIfPresent("HasConfiguredEasyPassword")
        hasConfiguredPassword = try decoderContainer.decodeIfPresent("HasConfiguredPassword")
        hasPassword = try decoderContainer.decodeIfPresent("HasPassword")
        id = try decoderContainer.decodeIfPresent("Id")
        lastActivityDate = try decoderContainer.decodeIfPresent("LastActivityDate")
        lastLoginDate = try decoderContainer.decodeIfPresent("LastLoginDate")
        name = try decoderContainer.decodeIfPresent("Name")
        policy = try decoderContainer.decodeIfPresent("Policy")
        primaryImageAspectRatio = try decoderContainer.decodeIfPresent("PrimaryImageAspectRatio")
        primaryImageTag = try decoderContainer.decodeIfPresent("PrimaryImageTag")
        serverId = try decoderContainer.decodeIfPresent("ServerId")
        serverName = try decoderContainer.decodeIfPresent("ServerName")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(configuration, forKey: "Configuration")
        try encoderContainer.encodeIfPresent(enableAutoLogin, forKey: "EnableAutoLogin")
        try encoderContainer.encodeIfPresent(hasConfiguredEasyPassword, forKey: "HasConfiguredEasyPassword")
        try encoderContainer.encodeIfPresent(hasConfiguredPassword, forKey: "HasConfiguredPassword")
        try encoderContainer.encodeIfPresent(hasPassword, forKey: "HasPassword")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(lastActivityDate, forKey: "LastActivityDate")
        try encoderContainer.encodeIfPresent(lastLoginDate, forKey: "LastLoginDate")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(policy, forKey: "Policy")
        try encoderContainer.encodeIfPresent(primaryImageAspectRatio, forKey: "PrimaryImageAspectRatio")
        try encoderContainer.encodeIfPresent(primaryImageTag, forKey: "PrimaryImageTag")
        try encoderContainer.encodeIfPresent(serverId, forKey: "ServerId")
        try encoderContainer.encodeIfPresent(serverName, forKey: "ServerName")
    }

}
