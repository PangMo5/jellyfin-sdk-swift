//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class SystemInfo. */
public struct SystemInfoModel: APIModel {

    /** Gets or sets the cache path. */
    public var cachePath: String?

    public var canLaunchWebBrowser: Bool?

    /** Gets or sets a value indicating whether this instance can self restart. */
    public var canSelfRestart: Bool?

    /** Gets or sets the completed installations. */
    public var completedInstallations: [InstallationInfoModel]?

    public var encoderLocation: FFmpegLocation?

    /** Gets or sets a value indicating whether this instance has pending restart. */
    public var hasPendingRestart: Bool?

    /** Gets or sets a value indicating whether this instance has update available. */
    public var hasUpdateAvailable: Bool?

    /** Gets or sets the id. */
    public var id: String?

    /** Gets or sets the internal metadata path. */
    public var internalMetadataPath: String?

    public var isShuttingDown: Bool?

    /** Gets or sets the items by name path. */
    public var itemsByNamePath: String?

    /** Gets or sets the local address. */
    public var localAddress: String?

    /** Gets or sets the log path. */
    public var logPath: String?

    /** Gets or sets the operating system. */
    public var operatingSystem: String?

    /** Gets or sets the display name of the operating system. */
    public var operatingSystemDisplayName: String?

    /** Get or sets the package name. */
    public var packageName: String?

    /** Gets or sets the product name. This is the AssemblyProduct name. */
    public var productName: String?

    /** Gets or sets the program data path. */
    public var programDataPath: String?

    /** Gets or sets the name of the server. */
    public var serverName: String?

    /** Gets or sets a value indicating whether the startup wizard is completed. */
    public var startupWizardCompleted: Bool?

    /** Gets or sets a value indicating whether [supports library monitor]. */
    public var supportsLibraryMonitor: Bool?

    public var systemArchitecture: Architecture?

    /** Gets or sets the transcode path. */
    public var transcodingTempPath: String?

    /** Gets or sets the server version. */
    public var version: String?

    /** Gets or sets the web UI resources path. */
    public var webPath: String?

    /** Gets or sets the web socket port number. */
    public var webSocketPortNumber: Int?

    public init(cachePath: String? = nil, canLaunchWebBrowser: Bool? = nil, canSelfRestart: Bool? = nil, completedInstallations: [InstallationInfoModel]? = nil, encoderLocation: FFmpegLocation? = nil, hasPendingRestart: Bool? = nil, hasUpdateAvailable: Bool? = nil, id: String? = nil, internalMetadataPath: String? = nil, isShuttingDown: Bool? = nil, itemsByNamePath: String? = nil, localAddress: String? = nil, logPath: String? = nil, operatingSystem: String? = nil, operatingSystemDisplayName: String? = nil, packageName: String? = nil, productName: String? = nil, programDataPath: String? = nil, serverName: String? = nil, startupWizardCompleted: Bool? = nil, supportsLibraryMonitor: Bool? = nil, systemArchitecture: Architecture? = nil, transcodingTempPath: String? = nil, version: String? = nil, webPath: String? = nil, webSocketPortNumber: Int? = nil) {
        self.cachePath = cachePath
        self.canLaunchWebBrowser = canLaunchWebBrowser
        self.canSelfRestart = canSelfRestart
        self.completedInstallations = completedInstallations
        self.encoderLocation = encoderLocation
        self.hasPendingRestart = hasPendingRestart
        self.hasUpdateAvailable = hasUpdateAvailable
        self.id = id
        self.internalMetadataPath = internalMetadataPath
        self.isShuttingDown = isShuttingDown
        self.itemsByNamePath = itemsByNamePath
        self.localAddress = localAddress
        self.logPath = logPath
        self.operatingSystem = operatingSystem
        self.operatingSystemDisplayName = operatingSystemDisplayName
        self.packageName = packageName
        self.productName = productName
        self.programDataPath = programDataPath
        self.serverName = serverName
        self.startupWizardCompleted = startupWizardCompleted
        self.supportsLibraryMonitor = supportsLibraryMonitor
        self.systemArchitecture = systemArchitecture
        self.transcodingTempPath = transcodingTempPath
        self.version = version
        self.webPath = webPath
        self.webSocketPortNumber = webSocketPortNumber
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        cachePath = try decoderContainer.decodeIfPresent("CachePath")
        canLaunchWebBrowser = try decoderContainer.decodeIfPresent("CanLaunchWebBrowser")
        canSelfRestart = try decoderContainer.decodeIfPresent("CanSelfRestart")
        completedInstallations = try decoderContainer.decodeArrayIfPresent("CompletedInstallations")
        encoderLocation = try decoderContainer.decodeIfPresent("EncoderLocation")
        hasPendingRestart = try decoderContainer.decodeIfPresent("HasPendingRestart")
        hasUpdateAvailable = try decoderContainer.decodeIfPresent("HasUpdateAvailable")
        id = try decoderContainer.decodeIfPresent("Id")
        internalMetadataPath = try decoderContainer.decodeIfPresent("InternalMetadataPath")
        isShuttingDown = try decoderContainer.decodeIfPresent("IsShuttingDown")
        itemsByNamePath = try decoderContainer.decodeIfPresent("ItemsByNamePath")
        localAddress = try decoderContainer.decodeIfPresent("LocalAddress")
        logPath = try decoderContainer.decodeIfPresent("LogPath")
        operatingSystem = try decoderContainer.decodeIfPresent("OperatingSystem")
        operatingSystemDisplayName = try decoderContainer.decodeIfPresent("OperatingSystemDisplayName")
        packageName = try decoderContainer.decodeIfPresent("PackageName")
        productName = try decoderContainer.decodeIfPresent("ProductName")
        programDataPath = try decoderContainer.decodeIfPresent("ProgramDataPath")
        serverName = try decoderContainer.decodeIfPresent("ServerName")
        startupWizardCompleted = try decoderContainer.decodeIfPresent("StartupWizardCompleted")
        supportsLibraryMonitor = try decoderContainer.decodeIfPresent("SupportsLibraryMonitor")
        systemArchitecture = try decoderContainer.decodeIfPresent("SystemArchitecture")
        transcodingTempPath = try decoderContainer.decodeIfPresent("TranscodingTempPath")
        version = try decoderContainer.decodeIfPresent("Version")
        webPath = try decoderContainer.decodeIfPresent("WebPath")
        webSocketPortNumber = try decoderContainer.decodeIfPresent("WebSocketPortNumber")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(cachePath, forKey: "CachePath")
        try encoderContainer.encodeIfPresent(canLaunchWebBrowser, forKey: "CanLaunchWebBrowser")
        try encoderContainer.encodeIfPresent(canSelfRestart, forKey: "CanSelfRestart")
        try encoderContainer.encodeIfPresent(completedInstallations, forKey: "CompletedInstallations")
        try encoderContainer.encodeIfPresent(encoderLocation, forKey: "EncoderLocation")
        try encoderContainer.encodeIfPresent(hasPendingRestart, forKey: "HasPendingRestart")
        try encoderContainer.encodeIfPresent(hasUpdateAvailable, forKey: "HasUpdateAvailable")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(internalMetadataPath, forKey: "InternalMetadataPath")
        try encoderContainer.encodeIfPresent(isShuttingDown, forKey: "IsShuttingDown")
        try encoderContainer.encodeIfPresent(itemsByNamePath, forKey: "ItemsByNamePath")
        try encoderContainer.encodeIfPresent(localAddress, forKey: "LocalAddress")
        try encoderContainer.encodeIfPresent(logPath, forKey: "LogPath")
        try encoderContainer.encodeIfPresent(operatingSystem, forKey: "OperatingSystem")
        try encoderContainer.encodeIfPresent(operatingSystemDisplayName, forKey: "OperatingSystemDisplayName")
        try encoderContainer.encodeIfPresent(packageName, forKey: "PackageName")
        try encoderContainer.encodeIfPresent(productName, forKey: "ProductName")
        try encoderContainer.encodeIfPresent(programDataPath, forKey: "ProgramDataPath")
        try encoderContainer.encodeIfPresent(serverName, forKey: "ServerName")
        try encoderContainer.encodeIfPresent(startupWizardCompleted, forKey: "StartupWizardCompleted")
        try encoderContainer.encodeIfPresent(supportsLibraryMonitor, forKey: "SupportsLibraryMonitor")
        try encoderContainer.encodeIfPresent(systemArchitecture, forKey: "SystemArchitecture")
        try encoderContainer.encodeIfPresent(transcodingTempPath, forKey: "TranscodingTempPath")
        try encoderContainer.encodeIfPresent(version, forKey: "Version")
        try encoderContainer.encodeIfPresent(webPath, forKey: "WebPath")
        try encoderContainer.encodeIfPresent(webSocketPortNumber, forKey: "WebSocketPortNumber")
    }

}
