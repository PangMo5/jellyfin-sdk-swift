//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ImageByNameInfoModel: APIModel {

    /** Gets or sets the context. */
    public var context: String?

    /** Gets or sets the length of the file. */
    public var fileLength: Int?

    /** Gets or sets the format. */
    public var format: String?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets the theme. */
    public var theme: String?

    public init(context: String? = nil, fileLength: Int? = nil, format: String? = nil, name: String? = nil, theme: String? = nil) {
        self.context = context
        self.fileLength = fileLength
        self.format = format
        self.name = name
        self.theme = theme
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        context = try decoderContainer.decodeIfPresent("Context")
        fileLength = try decoderContainer.decodeIfPresent("FileLength")
        format = try decoderContainer.decodeIfPresent("Format")
        name = try decoderContainer.decodeIfPresent("Name")
        theme = try decoderContainer.decodeIfPresent("Theme")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(context, forKey: "Context")
        try encoderContainer.encodeIfPresent(fileLength, forKey: "FileLength")
        try encoderContainer.encodeIfPresent(format, forKey: "Format")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(theme, forKey: "Theme")
    }

}
