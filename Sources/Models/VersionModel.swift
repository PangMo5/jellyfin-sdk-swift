//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct VersionModel: APIModel {

    public var build: Int?

    public var major: Int?

    public var majorRevision: Int?

    public var minor: Int?

    public var minorRevision: Int?

    public var revision: Int?

    public init(build: Int? = nil, major: Int? = nil, majorRevision: Int? = nil, minor: Int? = nil, minorRevision: Int? = nil, revision: Int? = nil) {
        self.build = build
        self.major = major
        self.majorRevision = majorRevision
        self.minor = minor
        self.minorRevision = minorRevision
        self.revision = revision
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        build = try decoderContainer.decodeIfPresent("Build")
        major = try decoderContainer.decodeIfPresent("Major")
        majorRevision = try decoderContainer.decodeIfPresent("MajorRevision")
        minor = try decoderContainer.decodeIfPresent("Minor")
        minorRevision = try decoderContainer.decodeIfPresent("MinorRevision")
        revision = try decoderContainer.decodeIfPresent("Revision")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(build, forKey: "Build")
        try encoderContainer.encodeIfPresent(major, forKey: "Major")
        try encoderContainer.encodeIfPresent(majorRevision, forKey: "MajorRevision")
        try encoderContainer.encodeIfPresent(minor, forKey: "Minor")
        try encoderContainer.encodeIfPresent(minorRevision, forKey: "MinorRevision")
        try encoderContainer.encodeIfPresent(revision, forKey: "Revision")
    }

}
