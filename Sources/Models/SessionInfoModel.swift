//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class SessionInfo. */
public struct SessionInfoModel: APIModel {

    public var additionalUsers: [SessionUserInfoModel]?

    /** Gets or sets the application version. */
    public var applicationVersion: String?

    public var capabilities: ClientCapabilitiesModel?

    /** Gets or sets the type of the client. */
    public var client: String?

    /** Gets or sets the device id. */
    public var deviceId: String?

    /** Gets or sets the name of the device. */
    public var deviceName: String?

    /** Gets or sets the type of the device. */
    public var deviceType: String?

    public var fullNowPlayingItem: BaseItemModel?

    public var hasCustomDeviceName: Bool?

    /** Gets or sets the id. */
    public var id: String?

    /** Gets a value indicating whether this instance is active. */
    public var isActive: Bool?

    /** Gets or sets the last activity date. */
    public var lastActivityDate: DateTime?

    /** Gets or sets the last playback check in. */
    public var lastPlaybackCheckIn: DateTime?

    public var nowPlayingItem: BaseItemDtoModel?

    public var nowPlayingQueue: [QueueItemModel]?

    public var nowViewingItem: BaseItemDtoModel?

    public var playState: PlayerStateInfoModel?

    /** Gets or sets the playable media types. */
    public var playableMediaTypes: [String]?

    public var playlistItemId: String?

    /** Gets or sets the remote end point. */
    public var remoteEndPoint: String?

    public var serverId: String?

    /** Gets or sets the supported commands. */
    public var supportedCommands: [GeneralCommandType]?

    public var supportsMediaControl: Bool?

    public var supportsRemoteControl: Bool?

    public var transcodingInfo: TranscodingInfoModel?

    /** Gets or sets the user id. */
    public var userId: ID?

    /** Gets or sets the username. */
    public var userName: String?

    public var userPrimaryImageTag: String?

    public init(additionalUsers: [SessionUserInfoModel]? = nil, applicationVersion: String? = nil, capabilities: ClientCapabilitiesModel? = nil, client: String? = nil, deviceId: String? = nil, deviceName: String? = nil, deviceType: String? = nil, fullNowPlayingItem: BaseItemModel? = nil, hasCustomDeviceName: Bool? = nil, id: String? = nil, isActive: Bool? = nil, lastActivityDate: DateTime? = nil, lastPlaybackCheckIn: DateTime? = nil, nowPlayingItem: BaseItemDtoModel? = nil, nowPlayingQueue: [QueueItemModel]? = nil, nowViewingItem: BaseItemDtoModel? = nil, playState: PlayerStateInfoModel? = nil, playableMediaTypes: [String]? = nil, playlistItemId: String? = nil, remoteEndPoint: String? = nil, serverId: String? = nil, supportedCommands: [GeneralCommandType]? = nil, supportsMediaControl: Bool? = nil, supportsRemoteControl: Bool? = nil, transcodingInfo: TranscodingInfoModel? = nil, userId: ID? = nil, userName: String? = nil, userPrimaryImageTag: String? = nil) {
        self.additionalUsers = additionalUsers
        self.applicationVersion = applicationVersion
        self.capabilities = capabilities
        self.client = client
        self.deviceId = deviceId
        self.deviceName = deviceName
        self.deviceType = deviceType
        self.fullNowPlayingItem = fullNowPlayingItem
        self.hasCustomDeviceName = hasCustomDeviceName
        self.id = id
        self.isActive = isActive
        self.lastActivityDate = lastActivityDate
        self.lastPlaybackCheckIn = lastPlaybackCheckIn
        self.nowPlayingItem = nowPlayingItem
        self.nowPlayingQueue = nowPlayingQueue
        self.nowViewingItem = nowViewingItem
        self.playState = playState
        self.playableMediaTypes = playableMediaTypes
        self.playlistItemId = playlistItemId
        self.remoteEndPoint = remoteEndPoint
        self.serverId = serverId
        self.supportedCommands = supportedCommands
        self.supportsMediaControl = supportsMediaControl
        self.supportsRemoteControl = supportsRemoteControl
        self.transcodingInfo = transcodingInfo
        self.userId = userId
        self.userName = userName
        self.userPrimaryImageTag = userPrimaryImageTag
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        additionalUsers = try decoderContainer.decodeArrayIfPresent("AdditionalUsers")
        applicationVersion = try decoderContainer.decodeIfPresent("ApplicationVersion")
        capabilities = try decoderContainer.decodeIfPresent("Capabilities")
        client = try decoderContainer.decodeIfPresent("Client")
        deviceId = try decoderContainer.decodeIfPresent("DeviceId")
        deviceName = try decoderContainer.decodeIfPresent("DeviceName")
        deviceType = try decoderContainer.decodeIfPresent("DeviceType")
        fullNowPlayingItem = try decoderContainer.decodeIfPresent("FullNowPlayingItem")
        hasCustomDeviceName = try decoderContainer.decodeIfPresent("HasCustomDeviceName")
        id = try decoderContainer.decodeIfPresent("Id")
        isActive = try decoderContainer.decodeIfPresent("IsActive")
        lastActivityDate = try decoderContainer.decodeIfPresent("LastActivityDate")
        lastPlaybackCheckIn = try decoderContainer.decodeIfPresent("LastPlaybackCheckIn")
        nowPlayingItem = try decoderContainer.decodeIfPresent("NowPlayingItem")
        nowPlayingQueue = try decoderContainer.decodeArrayIfPresent("NowPlayingQueue")
        nowViewingItem = try decoderContainer.decodeIfPresent("NowViewingItem")
        playState = try decoderContainer.decodeIfPresent("PlayState")
        playableMediaTypes = try decoderContainer.decodeArrayIfPresent("PlayableMediaTypes")
        playlistItemId = try decoderContainer.decodeIfPresent("PlaylistItemId")
        remoteEndPoint = try decoderContainer.decodeIfPresent("RemoteEndPoint")
        serverId = try decoderContainer.decodeIfPresent("ServerId")
        supportedCommands = try decoderContainer.decodeArrayIfPresent("SupportedCommands")
        supportsMediaControl = try decoderContainer.decodeIfPresent("SupportsMediaControl")
        supportsRemoteControl = try decoderContainer.decodeIfPresent("SupportsRemoteControl")
        transcodingInfo = try decoderContainer.decodeIfPresent("TranscodingInfo")
        userId = try decoderContainer.decodeIfPresent("UserId")
        userName = try decoderContainer.decodeIfPresent("UserName")
        userPrimaryImageTag = try decoderContainer.decodeIfPresent("UserPrimaryImageTag")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(additionalUsers, forKey: "AdditionalUsers")
        try encoderContainer.encodeIfPresent(applicationVersion, forKey: "ApplicationVersion")
        try encoderContainer.encodeIfPresent(capabilities, forKey: "Capabilities")
        try encoderContainer.encodeIfPresent(client, forKey: "Client")
        try encoderContainer.encodeIfPresent(deviceId, forKey: "DeviceId")
        try encoderContainer.encodeIfPresent(deviceName, forKey: "DeviceName")
        try encoderContainer.encodeIfPresent(deviceType, forKey: "DeviceType")
        try encoderContainer.encodeIfPresent(fullNowPlayingItem, forKey: "FullNowPlayingItem")
        try encoderContainer.encodeIfPresent(hasCustomDeviceName, forKey: "HasCustomDeviceName")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(isActive, forKey: "IsActive")
        try encoderContainer.encodeIfPresent(lastActivityDate, forKey: "LastActivityDate")
        try encoderContainer.encodeIfPresent(lastPlaybackCheckIn, forKey: "LastPlaybackCheckIn")
        try encoderContainer.encodeIfPresent(nowPlayingItem, forKey: "NowPlayingItem")
        try encoderContainer.encodeIfPresent(nowPlayingQueue, forKey: "NowPlayingQueue")
        try encoderContainer.encodeIfPresent(nowViewingItem, forKey: "NowViewingItem")
        try encoderContainer.encodeIfPresent(playState, forKey: "PlayState")
        try encoderContainer.encodeIfPresent(playableMediaTypes, forKey: "PlayableMediaTypes")
        try encoderContainer.encodeIfPresent(playlistItemId, forKey: "PlaylistItemId")
        try encoderContainer.encodeIfPresent(remoteEndPoint, forKey: "RemoteEndPoint")
        try encoderContainer.encodeIfPresent(serverId, forKey: "ServerId")
        try encoderContainer.encodeIfPresent(supportedCommands, forKey: "SupportedCommands")
        try encoderContainer.encodeIfPresent(supportsMediaControl, forKey: "SupportsMediaControl")
        try encoderContainer.encodeIfPresent(supportsRemoteControl, forKey: "SupportsRemoteControl")
        try encoderContainer.encodeIfPresent(transcodingInfo, forKey: "TranscodingInfo")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
        try encoderContainer.encodeIfPresent(userName, forKey: "UserName")
        try encoderContainer.encodeIfPresent(userPrimaryImageTag, forKey: "UserPrimaryImageTag")
    }

}
