//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This is used by the api to get information about a Person within a BaseItem. */
public struct BaseItemPersonModel: APIModel {

    /** Gets or sets the identifier. */
    public var id: String?

    /** Gets or sets the primary image blurhash. */
    public var imageBlurHashes: ImageBlurHashes?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets the primary image tag. */
    public var primaryImageTag: String?

    /** Gets or sets the role. */
    public var role: String?

    /** Gets or sets the type. */
    public var type: String?

    /** Gets or sets the primary image blurhash. */
    public struct ImageBlurHashes: APIModel {

        public var art: [String: String]?

        public var backdrop: [String: String]?

        public var banner: [String: String]?

        public var box: [String: String]?

        public var boxRear: [String: String]?

        public var chapter: [String: String]?

        public var disc: [String: String]?

        public var logo: [String: String]?

        public var menu: [String: String]?

        public var primary: [String: String]?

        public var profile: [String: String]?

        public var screenshot: [String: String]?

        public var thumb: [String: String]?

        public init(art: [String: String]? = nil, backdrop: [String: String]? = nil, banner: [String: String]? = nil, box: [String: String]? = nil, boxRear: [String: String]? = nil, chapter: [String: String]? = nil, disc: [String: String]? = nil, logo: [String: String]? = nil, menu: [String: String]? = nil, primary: [String: String]? = nil, profile: [String: String]? = nil, screenshot: [String: String]? = nil, thumb: [String: String]? = nil) {
            self.art = art
            self.backdrop = backdrop
            self.banner = banner
            self.box = box
            self.boxRear = boxRear
            self.chapter = chapter
            self.disc = disc
            self.logo = logo
            self.menu = menu
            self.primary = primary
            self.profile = profile
            self.screenshot = screenshot
            self.thumb = thumb
        }

        public init(from decoder: Decoder) throws {
            let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

            art = try decoderContainer.decodeIfPresent("Art")
            backdrop = try decoderContainer.decodeIfPresent("Backdrop")
            banner = try decoderContainer.decodeIfPresent("Banner")
            box = try decoderContainer.decodeIfPresent("Box")
            boxRear = try decoderContainer.decodeIfPresent("BoxRear")
            chapter = try decoderContainer.decodeIfPresent("Chapter")
            disc = try decoderContainer.decodeIfPresent("Disc")
            logo = try decoderContainer.decodeIfPresent("Logo")
            menu = try decoderContainer.decodeIfPresent("Menu")
            primary = try decoderContainer.decodeIfPresent("Primary")
            profile = try decoderContainer.decodeIfPresent("Profile")
            screenshot = try decoderContainer.decodeIfPresent("Screenshot")
            thumb = try decoderContainer.decodeIfPresent("Thumb")
        }

        public func encode(to encoder: Encoder) throws {
            var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

            try encoderContainer.encodeIfPresent(art, forKey: "Art")
            try encoderContainer.encodeIfPresent(backdrop, forKey: "Backdrop")
            try encoderContainer.encodeIfPresent(banner, forKey: "Banner")
            try encoderContainer.encodeIfPresent(box, forKey: "Box")
            try encoderContainer.encodeIfPresent(boxRear, forKey: "BoxRear")
            try encoderContainer.encodeIfPresent(chapter, forKey: "Chapter")
            try encoderContainer.encodeIfPresent(disc, forKey: "Disc")
            try encoderContainer.encodeIfPresent(logo, forKey: "Logo")
            try encoderContainer.encodeIfPresent(menu, forKey: "Menu")
            try encoderContainer.encodeIfPresent(primary, forKey: "Primary")
            try encoderContainer.encodeIfPresent(profile, forKey: "Profile")
            try encoderContainer.encodeIfPresent(screenshot, forKey: "Screenshot")
            try encoderContainer.encodeIfPresent(thumb, forKey: "Thumb")
        }

    }

    public init(id: String? = nil, imageBlurHashes: ImageBlurHashes? = nil, name: String? = nil, primaryImageTag: String? = nil, role: String? = nil, type: String? = nil) {
        self.id = id
        self.imageBlurHashes = imageBlurHashes
        self.name = name
        self.primaryImageTag = primaryImageTag
        self.role = role
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        id = try decoderContainer.decodeIfPresent("Id")
        imageBlurHashes = try decoderContainer.decodeIfPresent("ImageBlurHashes")
        name = try decoderContainer.decodeIfPresent("Name")
        primaryImageTag = try decoderContainer.decodeIfPresent("PrimaryImageTag")
        role = try decoderContainer.decodeIfPresent("Role")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(imageBlurHashes, forKey: "ImageBlurHashes")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(primaryImageTag, forKey: "PrimaryImageTag")
        try encoderContainer.encodeIfPresent(role, forKey: "Role")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
