//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class InstallationInfo. */
public struct InstallationInfoModel: APIModel {

    /** Gets or sets the changelog for this version. */
    public var changelog: String?

    /** Gets or sets a checksum for the binary. */
    public var checksum: String?

    /** Gets or sets the Id. */
    public var guid: ID?

    /** Gets or sets the name. */
    public var name: String?

    public var packageInfo: PackageInfoModel?

    /** Gets or sets the source URL. */
    public var sourceUrl: String?

    public var version: VersionModel?

    public init(changelog: String? = nil, checksum: String? = nil, guid: ID? = nil, name: String? = nil, packageInfo: PackageInfoModel? = nil, sourceUrl: String? = nil, version: VersionModel? = nil) {
        self.changelog = changelog
        self.checksum = checksum
        self.guid = guid
        self.name = name
        self.packageInfo = packageInfo
        self.sourceUrl = sourceUrl
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        changelog = try decoderContainer.decodeIfPresent("Changelog")
        checksum = try decoderContainer.decodeIfPresent("Checksum")
        guid = try decoderContainer.decodeIfPresent("Guid")
        name = try decoderContainer.decodeIfPresent("Name")
        packageInfo = try decoderContainer.decodeIfPresent("PackageInfo")
        sourceUrl = try decoderContainer.decodeIfPresent("SourceUrl")
        version = try decoderContainer.decodeIfPresent("Version")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(changelog, forKey: "Changelog")
        try encoderContainer.encodeIfPresent(checksum, forKey: "Checksum")
        try encoderContainer.encodeIfPresent(guid, forKey: "Guid")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(packageInfo, forKey: "PackageInfo")
        try encoderContainer.encodeIfPresent(sourceUrl, forKey: "SourceUrl")
        try encoderContainer.encodeIfPresent(version, forKey: "Version")
    }

}
