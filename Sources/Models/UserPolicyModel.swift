//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct UserPolicyModel: APIModel {

    public var accessSchedules: [AccessScheduleModel]?

    public var authenticationProviderId: String?

    public var blockUnratedItems: [UnratedItem]?

    public var blockedChannels: [ID]?

    public var blockedMediaFolders: [ID]?

    public var blockedTags: [String]?

    public var enableAllChannels: Bool?

    public var enableAllDevices: Bool?

    public var enableAllFolders: Bool?

    public var enableAudioPlaybackTranscoding: Bool?

    public var enableContentDeletion: Bool?

    public var enableContentDeletionFromFolders: [String]?

    public var enableContentDownloading: Bool?

    public var enableLiveTvAccess: Bool?

    public var enableLiveTvManagement: Bool?

    public var enableMediaConversion: Bool?

    public var enableMediaPlayback: Bool?

    public var enablePlaybackRemuxing: Bool?

    public var enablePublicSharing: Bool?

    public var enableRemoteAccess: Bool?

    public var enableRemoteControlOfOtherUsers: Bool?

    public var enableSharedDeviceControl: Bool?

    /** Gets or sets a value indicating whether [enable synchronize]. */
    public var enableSyncTranscoding: Bool?

    public var enableUserPreferenceAccess: Bool?

    public var enableVideoPlaybackTranscoding: Bool?

    public var enabledChannels: [ID]?

    public var enabledDevices: [String]?

    public var enabledFolders: [ID]?

    public var forceRemoteSourceTranscoding: Bool?

    public var invalidLoginAttemptCount: Int?

    /** Gets or sets a value indicating whether this instance is administrator. */
    public var isAdministrator: Bool?

    /** Gets or sets a value indicating whether this instance is disabled. */
    public var isDisabled: Bool?

    /** Gets or sets a value indicating whether this instance is hidden. */
    public var isHidden: Bool?

    public var loginAttemptsBeforeLockout: Int?

    public var maxActiveSessions: Int?

    /** Gets or sets the max parental rating. */
    public var maxParentalRating: Int?

    public var passwordResetProviderId: String?

    public var remoteClientBitrateLimit: Int?

    public var syncPlayAccess: SyncPlayUserAccessType?

    public init(accessSchedules: [AccessScheduleModel]? = nil, authenticationProviderId: String? = nil, blockUnratedItems: [UnratedItem]? = nil, blockedChannels: [ID]? = nil, blockedMediaFolders: [ID]? = nil, blockedTags: [String]? = nil, enableAllChannels: Bool? = nil, enableAllDevices: Bool? = nil, enableAllFolders: Bool? = nil, enableAudioPlaybackTranscoding: Bool? = nil, enableContentDeletion: Bool? = nil, enableContentDeletionFromFolders: [String]? = nil, enableContentDownloading: Bool? = nil, enableLiveTvAccess: Bool? = nil, enableLiveTvManagement: Bool? = nil, enableMediaConversion: Bool? = nil, enableMediaPlayback: Bool? = nil, enablePlaybackRemuxing: Bool? = nil, enablePublicSharing: Bool? = nil, enableRemoteAccess: Bool? = nil, enableRemoteControlOfOtherUsers: Bool? = nil, enableSharedDeviceControl: Bool? = nil, enableSyncTranscoding: Bool? = nil, enableUserPreferenceAccess: Bool? = nil, enableVideoPlaybackTranscoding: Bool? = nil, enabledChannels: [ID]? = nil, enabledDevices: [String]? = nil, enabledFolders: [ID]? = nil, forceRemoteSourceTranscoding: Bool? = nil, invalidLoginAttemptCount: Int? = nil, isAdministrator: Bool? = nil, isDisabled: Bool? = nil, isHidden: Bool? = nil, loginAttemptsBeforeLockout: Int? = nil, maxActiveSessions: Int? = nil, maxParentalRating: Int? = nil, passwordResetProviderId: String? = nil, remoteClientBitrateLimit: Int? = nil, syncPlayAccess: SyncPlayUserAccessType? = nil) {
        self.accessSchedules = accessSchedules
        self.authenticationProviderId = authenticationProviderId
        self.blockUnratedItems = blockUnratedItems
        self.blockedChannels = blockedChannels
        self.blockedMediaFolders = blockedMediaFolders
        self.blockedTags = blockedTags
        self.enableAllChannels = enableAllChannels
        self.enableAllDevices = enableAllDevices
        self.enableAllFolders = enableAllFolders
        self.enableAudioPlaybackTranscoding = enableAudioPlaybackTranscoding
        self.enableContentDeletion = enableContentDeletion
        self.enableContentDeletionFromFolders = enableContentDeletionFromFolders
        self.enableContentDownloading = enableContentDownloading
        self.enableLiveTvAccess = enableLiveTvAccess
        self.enableLiveTvManagement = enableLiveTvManagement
        self.enableMediaConversion = enableMediaConversion
        self.enableMediaPlayback = enableMediaPlayback
        self.enablePlaybackRemuxing = enablePlaybackRemuxing
        self.enablePublicSharing = enablePublicSharing
        self.enableRemoteAccess = enableRemoteAccess
        self.enableRemoteControlOfOtherUsers = enableRemoteControlOfOtherUsers
        self.enableSharedDeviceControl = enableSharedDeviceControl
        self.enableSyncTranscoding = enableSyncTranscoding
        self.enableUserPreferenceAccess = enableUserPreferenceAccess
        self.enableVideoPlaybackTranscoding = enableVideoPlaybackTranscoding
        self.enabledChannels = enabledChannels
        self.enabledDevices = enabledDevices
        self.enabledFolders = enabledFolders
        self.forceRemoteSourceTranscoding = forceRemoteSourceTranscoding
        self.invalidLoginAttemptCount = invalidLoginAttemptCount
        self.isAdministrator = isAdministrator
        self.isDisabled = isDisabled
        self.isHidden = isHidden
        self.loginAttemptsBeforeLockout = loginAttemptsBeforeLockout
        self.maxActiveSessions = maxActiveSessions
        self.maxParentalRating = maxParentalRating
        self.passwordResetProviderId = passwordResetProviderId
        self.remoteClientBitrateLimit = remoteClientBitrateLimit
        self.syncPlayAccess = syncPlayAccess
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        accessSchedules = try decoderContainer.decodeArrayIfPresent("AccessSchedules")
        authenticationProviderId = try decoderContainer.decodeIfPresent("AuthenticationProviderId")
        blockUnratedItems = try decoderContainer.decodeArrayIfPresent("BlockUnratedItems")
        blockedChannels = try decoderContainer.decodeArrayIfPresent("BlockedChannels")
        blockedMediaFolders = try decoderContainer.decodeArrayIfPresent("BlockedMediaFolders")
        blockedTags = try decoderContainer.decodeArrayIfPresent("BlockedTags")
        enableAllChannels = try decoderContainer.decodeIfPresent("EnableAllChannels")
        enableAllDevices = try decoderContainer.decodeIfPresent("EnableAllDevices")
        enableAllFolders = try decoderContainer.decodeIfPresent("EnableAllFolders")
        enableAudioPlaybackTranscoding = try decoderContainer.decodeIfPresent("EnableAudioPlaybackTranscoding")
        enableContentDeletion = try decoderContainer.decodeIfPresent("EnableContentDeletion")
        enableContentDeletionFromFolders = try decoderContainer.decodeArrayIfPresent("EnableContentDeletionFromFolders")
        enableContentDownloading = try decoderContainer.decodeIfPresent("EnableContentDownloading")
        enableLiveTvAccess = try decoderContainer.decodeIfPresent("EnableLiveTvAccess")
        enableLiveTvManagement = try decoderContainer.decodeIfPresent("EnableLiveTvManagement")
        enableMediaConversion = try decoderContainer.decodeIfPresent("EnableMediaConversion")
        enableMediaPlayback = try decoderContainer.decodeIfPresent("EnableMediaPlayback")
        enablePlaybackRemuxing = try decoderContainer.decodeIfPresent("EnablePlaybackRemuxing")
        enablePublicSharing = try decoderContainer.decodeIfPresent("EnablePublicSharing")
        enableRemoteAccess = try decoderContainer.decodeIfPresent("EnableRemoteAccess")
        enableRemoteControlOfOtherUsers = try decoderContainer.decodeIfPresent("EnableRemoteControlOfOtherUsers")
        enableSharedDeviceControl = try decoderContainer.decodeIfPresent("EnableSharedDeviceControl")
        enableSyncTranscoding = try decoderContainer.decodeIfPresent("EnableSyncTranscoding")
        enableUserPreferenceAccess = try decoderContainer.decodeIfPresent("EnableUserPreferenceAccess")
        enableVideoPlaybackTranscoding = try decoderContainer.decodeIfPresent("EnableVideoPlaybackTranscoding")
        enabledChannels = try decoderContainer.decodeArrayIfPresent("EnabledChannels")
        enabledDevices = try decoderContainer.decodeArrayIfPresent("EnabledDevices")
        enabledFolders = try decoderContainer.decodeArrayIfPresent("EnabledFolders")
        forceRemoteSourceTranscoding = try decoderContainer.decodeIfPresent("ForceRemoteSourceTranscoding")
        invalidLoginAttemptCount = try decoderContainer.decodeIfPresent("InvalidLoginAttemptCount")
        isAdministrator = try decoderContainer.decodeIfPresent("IsAdministrator")
        isDisabled = try decoderContainer.decodeIfPresent("IsDisabled")
        isHidden = try decoderContainer.decodeIfPresent("IsHidden")
        loginAttemptsBeforeLockout = try decoderContainer.decodeIfPresent("LoginAttemptsBeforeLockout")
        maxActiveSessions = try decoderContainer.decodeIfPresent("MaxActiveSessions")
        maxParentalRating = try decoderContainer.decodeIfPresent("MaxParentalRating")
        passwordResetProviderId = try decoderContainer.decodeIfPresent("PasswordResetProviderId")
        remoteClientBitrateLimit = try decoderContainer.decodeIfPresent("RemoteClientBitrateLimit")
        syncPlayAccess = try decoderContainer.decodeIfPresent("SyncPlayAccess")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(accessSchedules, forKey: "AccessSchedules")
        try encoderContainer.encodeIfPresent(authenticationProviderId, forKey: "AuthenticationProviderId")
        try encoderContainer.encodeIfPresent(blockUnratedItems, forKey: "BlockUnratedItems")
        try encoderContainer.encodeIfPresent(blockedChannels, forKey: "BlockedChannels")
        try encoderContainer.encodeIfPresent(blockedMediaFolders, forKey: "BlockedMediaFolders")
        try encoderContainer.encodeIfPresent(blockedTags, forKey: "BlockedTags")
        try encoderContainer.encodeIfPresent(enableAllChannels, forKey: "EnableAllChannels")
        try encoderContainer.encodeIfPresent(enableAllDevices, forKey: "EnableAllDevices")
        try encoderContainer.encodeIfPresent(enableAllFolders, forKey: "EnableAllFolders")
        try encoderContainer.encodeIfPresent(enableAudioPlaybackTranscoding, forKey: "EnableAudioPlaybackTranscoding")
        try encoderContainer.encodeIfPresent(enableContentDeletion, forKey: "EnableContentDeletion")
        try encoderContainer.encodeIfPresent(enableContentDeletionFromFolders, forKey: "EnableContentDeletionFromFolders")
        try encoderContainer.encodeIfPresent(enableContentDownloading, forKey: "EnableContentDownloading")
        try encoderContainer.encodeIfPresent(enableLiveTvAccess, forKey: "EnableLiveTvAccess")
        try encoderContainer.encodeIfPresent(enableLiveTvManagement, forKey: "EnableLiveTvManagement")
        try encoderContainer.encodeIfPresent(enableMediaConversion, forKey: "EnableMediaConversion")
        try encoderContainer.encodeIfPresent(enableMediaPlayback, forKey: "EnableMediaPlayback")
        try encoderContainer.encodeIfPresent(enablePlaybackRemuxing, forKey: "EnablePlaybackRemuxing")
        try encoderContainer.encodeIfPresent(enablePublicSharing, forKey: "EnablePublicSharing")
        try encoderContainer.encodeIfPresent(enableRemoteAccess, forKey: "EnableRemoteAccess")
        try encoderContainer.encodeIfPresent(enableRemoteControlOfOtherUsers, forKey: "EnableRemoteControlOfOtherUsers")
        try encoderContainer.encodeIfPresent(enableSharedDeviceControl, forKey: "EnableSharedDeviceControl")
        try encoderContainer.encodeIfPresent(enableSyncTranscoding, forKey: "EnableSyncTranscoding")
        try encoderContainer.encodeIfPresent(enableUserPreferenceAccess, forKey: "EnableUserPreferenceAccess")
        try encoderContainer.encodeIfPresent(enableVideoPlaybackTranscoding, forKey: "EnableVideoPlaybackTranscoding")
        try encoderContainer.encodeIfPresent(enabledChannels, forKey: "EnabledChannels")
        try encoderContainer.encodeIfPresent(enabledDevices, forKey: "EnabledDevices")
        try encoderContainer.encodeIfPresent(enabledFolders, forKey: "EnabledFolders")
        try encoderContainer.encodeIfPresent(forceRemoteSourceTranscoding, forKey: "ForceRemoteSourceTranscoding")
        try encoderContainer.encodeIfPresent(invalidLoginAttemptCount, forKey: "InvalidLoginAttemptCount")
        try encoderContainer.encodeIfPresent(isAdministrator, forKey: "IsAdministrator")
        try encoderContainer.encodeIfPresent(isDisabled, forKey: "IsDisabled")
        try encoderContainer.encodeIfPresent(isHidden, forKey: "IsHidden")
        try encoderContainer.encodeIfPresent(loginAttemptsBeforeLockout, forKey: "LoginAttemptsBeforeLockout")
        try encoderContainer.encodeIfPresent(maxActiveSessions, forKey: "MaxActiveSessions")
        try encoderContainer.encodeIfPresent(maxParentalRating, forKey: "MaxParentalRating")
        try encoderContainer.encodeIfPresent(passwordResetProviderId, forKey: "PasswordResetProviderId")
        try encoderContainer.encodeIfPresent(remoteClientBitrateLimit, forKey: "RemoteClientBitrateLimit")
        try encoderContainer.encodeIfPresent(syncPlayAccess, forKey: "SyncPlayAccess")
    }

}
