//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines the MediaBrowser.Common.Plugins.IPlugin. */
public struct IPluginModel: APIModel {

    /** Gets the path to the assembly file. */
    public var assemblyFilePath: String?

    /** Gets a value indicating whether the plugin can be uninstalled. */
    public var canUninstall: Bool?

    /** Gets the full path to the data folder, where the plugin can store any miscellaneous files needed. */
    public var dataFolderPath: String?

    /** Gets the Description. */
    public var description: String?

    /** Gets the unique id. */
    public var id: ID?

    /** Gets the name of the plugin. */
    public var name: String?

    public var version: VersionModel?

    public init(assemblyFilePath: String? = nil, canUninstall: Bool? = nil, dataFolderPath: String? = nil, description: String? = nil, id: ID? = nil, name: String? = nil, version: VersionModel? = nil) {
        self.assemblyFilePath = assemblyFilePath
        self.canUninstall = canUninstall
        self.dataFolderPath = dataFolderPath
        self.description = description
        self.id = id
        self.name = name
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        assemblyFilePath = try decoderContainer.decodeIfPresent("AssemblyFilePath")
        canUninstall = try decoderContainer.decodeIfPresent("CanUninstall")
        dataFolderPath = try decoderContainer.decodeIfPresent("DataFolderPath")
        description = try decoderContainer.decodeIfPresent("Description")
        id = try decoderContainer.decodeIfPresent("Id")
        name = try decoderContainer.decodeIfPresent("Name")
        version = try decoderContainer.decodeIfPresent("Version")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(assemblyFilePath, forKey: "AssemblyFilePath")
        try encoderContainer.encodeIfPresent(canUninstall, forKey: "CanUninstall")
        try encoderContainer.encodeIfPresent(dataFolderPath, forKey: "DataFolderPath")
        try encoderContainer.encodeIfPresent(description, forKey: "Description")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(version, forKey: "Version")
    }

}
