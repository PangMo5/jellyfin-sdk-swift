//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct MovieInfoModel: APIModel {

    public var indexNumber: Int?

    public var isAutomated: Bool?

    /** Gets or sets the metadata country code. */
    public var metadataCountryCode: String?

    /** Gets or sets the metadata language. */
    public var metadataLanguage: String?

    /** Gets or sets the name. */
    public var name: String?

    public var parentIndexNumber: Int?

    /** Gets or sets the path. */
    public var path: String?

    public var premiereDate: DateTime?

    /** Gets or sets the provider ids. */
    public var providerIds: [String: String]?

    /** Gets or sets the year. */
    public var year: Int?

    public init(indexNumber: Int? = nil, isAutomated: Bool? = nil, metadataCountryCode: String? = nil, metadataLanguage: String? = nil, name: String? = nil, parentIndexNumber: Int? = nil, path: String? = nil, premiereDate: DateTime? = nil, providerIds: [String: String]? = nil, year: Int? = nil) {
        self.indexNumber = indexNumber
        self.isAutomated = isAutomated
        self.metadataCountryCode = metadataCountryCode
        self.metadataLanguage = metadataLanguage
        self.name = name
        self.parentIndexNumber = parentIndexNumber
        self.path = path
        self.premiereDate = premiereDate
        self.providerIds = providerIds
        self.year = year
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        indexNumber = try decoderContainer.decodeIfPresent("IndexNumber")
        isAutomated = try decoderContainer.decodeIfPresent("IsAutomated")
        metadataCountryCode = try decoderContainer.decodeIfPresent("MetadataCountryCode")
        metadataLanguage = try decoderContainer.decodeIfPresent("MetadataLanguage")
        name = try decoderContainer.decodeIfPresent("Name")
        parentIndexNumber = try decoderContainer.decodeIfPresent("ParentIndexNumber")
        path = try decoderContainer.decodeIfPresent("Path")
        premiereDate = try decoderContainer.decodeIfPresent("PremiereDate")
        providerIds = try decoderContainer.decodeIfPresent("ProviderIds")
        year = try decoderContainer.decodeIfPresent("Year")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(indexNumber, forKey: "IndexNumber")
        try encoderContainer.encodeIfPresent(isAutomated, forKey: "IsAutomated")
        try encoderContainer.encodeIfPresent(metadataCountryCode, forKey: "MetadataCountryCode")
        try encoderContainer.encodeIfPresent(metadataLanguage, forKey: "MetadataLanguage")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(parentIndexNumber, forKey: "ParentIndexNumber")
        try encoderContainer.encodeIfPresent(path, forKey: "Path")
        try encoderContainer.encodeIfPresent(premiereDate, forKey: "PremiereDate")
        try encoderContainer.encodeIfPresent(providerIds, forKey: "ProviderIds")
        try encoderContainer.encodeIfPresent(year, forKey: "Year")
    }

}
