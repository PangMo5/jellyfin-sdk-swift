//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This is strictly used as a data transfer object from the api layer.
This holds information about a BaseItem in a format that is convenient for the client. */
public struct BaseItemDtoModel: APIModel {

    /** Gets or sets the air days. */
    public var airDays: [DayOfWeek]?

    /** Gets or sets the air time. */
    public var airTime: String?

    public var airsAfterSeasonNumber: Int?

    public var airsBeforeEpisodeNumber: Int?

    public var airsBeforeSeasonNumber: Int?

    /** Gets or sets the album. */
    public var album: String?

    /** Gets or sets the album artist. */
    public var albumArtist: String?

    /** Gets or sets the album artists. */
    public var albumArtists: [NameGuidPairModel]?

    /** Gets or sets the album count. */
    public var albumCount: Int?

    /** Gets or sets the album id. */
    public var albumId: ID?

    /** Gets or sets the album image tag. */
    public var albumPrimaryImageTag: String?

    public var altitude: Double?

    public var aperture: Double?

    public var artistCount: Int?

    /** Gets or sets the artist items. */
    public var artistItems: [NameGuidPairModel]?

    /** Gets or sets the artists. */
    public var artists: [String]?

    /** Gets or sets the aspect ratio. */
    public var aspectRatio: String?

    public var audio: ProgramAudio?

    /** Gets or sets the backdrop image tags. */
    public var backdropImageTags: [String]?

    public var cameraMake: String?

    public var cameraModel: String?

    public var canDelete: Bool?

    public var canDownload: Bool?

    /** Gets or sets the channel identifier. */
    public var channelId: ID?

    public var channelName: String?

    public var channelNumber: String?

    /** Gets or sets the channel primary image tag. */
    public var channelPrimaryImageTag: String?

    public var channelType: ChannelType?

    /** Gets or sets the chapters. */
    public var chapters: [ChapterInfoModel]?

    /** Gets or sets the child count. */
    public var childCount: Int?

    /** Gets or sets the type of the collection. */
    public var collectionType: String?

    /** Gets or sets the community rating. */
    public var communityRating: Float?

    /** Gets or sets the completion percentage. */
    public var completionPercentage: Double?

    public var container: String?

    /** Gets or sets the critic rating. */
    public var criticRating: Float?

    /** Gets or sets the cumulative run time ticks. */
    public var cumulativeRunTimeTicks: Int?

    public var currentProgram: BaseItemDtoModel?

    /** Gets or sets the custom rating. */
    public var customRating: String?

    /** Gets or sets the date created. */
    public var dateCreated: DateTime?

    public var dateLastMediaAdded: DateTime?

    /** Gets or sets the display order. */
    public var displayOrder: String?

    /** Gets or sets the display preferences id. */
    public var displayPreferencesId: String?

    public var enableMediaSourceDisplay: Bool?

    /** Gets or sets the end date. */
    public var endDate: DateTime?

    /** Gets or sets the episode count. */
    public var episodeCount: Int?

    /** Gets or sets the episode title. */
    public var episodeTitle: String?

    /** Gets or sets the etag. */
    public var etag: String?

    public var exposureTime: Double?

    /** Gets or sets the external urls. */
    public var externalUrls: [ExternalUrlModel]?

    public var extraType: String?

    public var focalLength: Double?

    public var forcedSortName: String?

    public var genreItems: [NameGuidPairModel]?

    /** Gets or sets the genres. */
    public var genres: [String]?

    public var hasSubtitles: Bool?

    public var height: Int?

    /** Gets or sets the id. */
    public var id: ID?

    /** Gets or sets the blurhashes for the image tags.
Maps image type to dictionary mapping image tag to blurhash value. */
    public var imageBlurHashes: ImageBlurHashes?

    public var imageOrientation: ImageOrientation?

    /** Gets or sets the image tags. */
    public var imageTags: [String: String]?

    /** Gets or sets the index number. */
    public var indexNumber: Int?

    /** Gets or sets the index number end. */
    public var indexNumberEnd: Int?

    /** Gets or sets a value indicating whether this instance is folder. */
    public var isFolder: Bool?

    /** Gets or sets a value indicating whether this instance is HD. */
    public var isHD: Bool?

    /** Gets or sets a value indicating whether this instance is kids. */
    public var isKids: Bool?

    /** Gets or sets a value indicating whether this instance is live. */
    public var isLive: Bool?

    /** Gets or sets a value indicating whether this instance is movie. */
    public var isMovie: Bool?

    /** Gets or sets a value indicating whether this instance is news. */
    public var isNews: Bool?

    /** Gets or sets a value indicating whether this instance is place holder. */
    public var isPlaceHolder: Bool?

    /** Gets or sets a value indicating whether this instance is premiere. */
    public var isPremiere: Bool?

    /** Gets or sets a value indicating whether this instance is repeat. */
    public var isRepeat: Bool?

    /** Gets or sets a value indicating whether this instance is series. */
    public var isSeries: Bool?

    /** Gets or sets a value indicating whether this instance is sports. */
    public var isSports: Bool?

    public var isoSpeedRating: Int?

    public var isoType: IsoType?

    public var latitude: Double?

    /** Gets or sets the local trailer count. */
    public var localTrailerCount: Int?

    public var locationType: LocationType?

    /** Gets or sets a value indicating whether [enable internet providers]. */
    public var lockData: Bool?

    /** Gets or sets the locked fields. */
    public var lockedFields: [MetadataField]?

    public var longitude: Double?

    public var mediaSourceCount: Int?

    /** Gets or sets the media versions. */
    public var mediaSources: [MediaSourceInfoModel]?

    /** Gets or sets the media streams. */
    public var mediaStreams: [MediaStreamModel]?

    /** Gets or sets the type of the media. */
    public var mediaType: String?

    /** Gets or sets the movie count. */
    public var movieCount: Int?

    /** Gets or sets the music video count. */
    public var musicVideoCount: Int?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets the number. */
    public var number: String?

    /** Gets or sets the official rating. */
    public var officialRating: String?

    public var originalTitle: String?

    /** Gets or sets the overview. */
    public var overview: String?

    /** Gets or sets the parent art image tag. */
    public var parentArtImageTag: String?

    /** If the item does not have a art, this will hold the Id of the Parent that has one. */
    public var parentArtItemId: String?

    /** Gets or sets the parent backdrop image tags. */
    public var parentBackdropImageTags: [String]?

    /** If the item does not have any backdrops, this will hold the Id of the Parent that has one. */
    public var parentBackdropItemId: String?

    /** Gets or sets the parent id. */
    public var parentId: ID?

    /** Gets or sets the parent index number. */
    public var parentIndexNumber: Int?

    /** Gets or sets the parent logo image tag. */
    public var parentLogoImageTag: String?

    /** If the item does not have a logo, this will hold the Id of the Parent that has one. */
    public var parentLogoItemId: String?

    /** Gets or sets the parent primary image item identifier. */
    public var parentPrimaryImageItemId: String?

    /** Gets or sets the parent primary image tag. */
    public var parentPrimaryImageTag: String?

    /** Gets or sets the parent thumb image tag. */
    public var parentThumbImageTag: String?

    /** Gets or sets the parent thumb item id. */
    public var parentThumbItemId: String?

    /** Gets or sets the part count. */
    public var partCount: Int?

    /** Gets or sets the path. */
    public var path: String?

    /** Gets or sets the people. */
    public var people: [BaseItemPersonModel]?

    public var playAccess: PlayAccess?

    /** Gets or sets the playlist item identifier. */
    public var playlistItemId: String?

    public var preferredMetadataCountryCode: String?

    public var preferredMetadataLanguage: String?

    /** Gets or sets the premiere date. */
    public var premiereDate: DateTime?

    /** Gets or sets the primary image aspect ratio, after image enhancements. */
    public var primaryImageAspectRatio: Double?

    public var productionLocations: [String]?

    /** Gets or sets the production year. */
    public var productionYear: Int?

    public var programCount: Int?

    /** Gets or sets the program identifier. */
    public var programId: String?

    /** Gets or sets the provider ids. */
    public var providerIds: [String: String]?

    /** Gets or sets the recursive item count. */
    public var recursiveItemCount: Int?

    /** Gets or sets the trailer urls. */
    public var remoteTrailers: [MediaUrlModel]?

    /** Gets or sets the run time ticks. */
    public var runTimeTicks: Int?

    /** Gets or sets the screenshot image tags. */
    public var screenshotImageTags: [String]?

    /** Gets or sets the season identifier. */
    public var seasonId: ID?

    /** Gets or sets the name of the season. */
    public var seasonName: String?

    /** Gets or sets the series count. */
    public var seriesCount: Int?

    /** Gets or sets the series id. */
    public var seriesId: ID?

    /** Gets or sets the name of the series. */
    public var seriesName: String?

    /** Gets or sets the series primary image tag. */
    public var seriesPrimaryImageTag: String?

    /** Gets or sets the series studio. */
    public var seriesStudio: String?

    /** Gets or sets the series thumb image tag. */
    public var seriesThumbImageTag: String?

    /** Gets or sets the series timer identifier. */
    public var seriesTimerId: String?

    /** Gets or sets the server identifier. */
    public var serverId: String?

    public var shutterSpeed: Double?

    public var software: String?

    /** Gets or sets the song count. */
    public var songCount: Int?

    /** Gets or sets the name of the sort. */
    public var sortName: String?

    /** Gets or sets the type of the source. */
    public var sourceType: String?

    /** Gets or sets the special feature count. */
    public var specialFeatureCount: Int?

    /** The start date of the recording, in UTC. */
    public var startDate: DateTime?

    /** Gets or sets the status. */
    public var status: String?

    /** Gets or sets the studios. */
    public var studios: [NameGuidPairModel]?

    /** Gets or sets a value indicating whether [supports synchronize]. */
    public var supportsSync: Bool?

    /** Gets or sets the taglines. */
    public var taglines: [String]?

    /** Gets or sets the tags. */
    public var tags: [String]?

    /** Gets or sets the timer identifier. */
    public var timerId: String?

    /** Gets or sets the trailer count. */
    public var trailerCount: Int?

    /** Gets or sets the type. */
    public var type: String?

    public var userData: UserItemDataDtoModel?

    public var video3DFormat: Video3DFormat?

    public var videoType: VideoType?

    public var width: Int?

    /** Gets or sets the blurhashes for the image tags.
    Maps image type to dictionary mapping image tag to blurhash value. */
    public struct ImageBlurHashes: APIModel {

        public var art: [String: String]?

        public var backdrop: [String: String]?

        public var banner: [String: String]?

        public var box: [String: String]?

        public var boxRear: [String: String]?

        public var chapter: [String: String]?

        public var disc: [String: String]?

        public var logo: [String: String]?

        public var menu: [String: String]?

        public var primary: [String: String]?

        public var profile: [String: String]?

        public var screenshot: [String: String]?

        public var thumb: [String: String]?

        public init(art: [String: String]? = nil, backdrop: [String: String]? = nil, banner: [String: String]? = nil, box: [String: String]? = nil, boxRear: [String: String]? = nil, chapter: [String: String]? = nil, disc: [String: String]? = nil, logo: [String: String]? = nil, menu: [String: String]? = nil, primary: [String: String]? = nil, profile: [String: String]? = nil, screenshot: [String: String]? = nil, thumb: [String: String]? = nil) {
            self.art = art
            self.backdrop = backdrop
            self.banner = banner
            self.box = box
            self.boxRear = boxRear
            self.chapter = chapter
            self.disc = disc
            self.logo = logo
            self.menu = menu
            self.primary = primary
            self.profile = profile
            self.screenshot = screenshot
            self.thumb = thumb
        }

        public init(from decoder: Decoder) throws {
            let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

            art = try decoderContainer.decodeIfPresent("Art")
            backdrop = try decoderContainer.decodeIfPresent("Backdrop")
            banner = try decoderContainer.decodeIfPresent("Banner")
            box = try decoderContainer.decodeIfPresent("Box")
            boxRear = try decoderContainer.decodeIfPresent("BoxRear")
            chapter = try decoderContainer.decodeIfPresent("Chapter")
            disc = try decoderContainer.decodeIfPresent("Disc")
            logo = try decoderContainer.decodeIfPresent("Logo")
            menu = try decoderContainer.decodeIfPresent("Menu")
            primary = try decoderContainer.decodeIfPresent("Primary")
            profile = try decoderContainer.decodeIfPresent("Profile")
            screenshot = try decoderContainer.decodeIfPresent("Screenshot")
            thumb = try decoderContainer.decodeIfPresent("Thumb")
        }

        public func encode(to encoder: Encoder) throws {
            var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

            try encoderContainer.encodeIfPresent(art, forKey: "Art")
            try encoderContainer.encodeIfPresent(backdrop, forKey: "Backdrop")
            try encoderContainer.encodeIfPresent(banner, forKey: "Banner")
            try encoderContainer.encodeIfPresent(box, forKey: "Box")
            try encoderContainer.encodeIfPresent(boxRear, forKey: "BoxRear")
            try encoderContainer.encodeIfPresent(chapter, forKey: "Chapter")
            try encoderContainer.encodeIfPresent(disc, forKey: "Disc")
            try encoderContainer.encodeIfPresent(logo, forKey: "Logo")
            try encoderContainer.encodeIfPresent(menu, forKey: "Menu")
            try encoderContainer.encodeIfPresent(primary, forKey: "Primary")
            try encoderContainer.encodeIfPresent(profile, forKey: "Profile")
            try encoderContainer.encodeIfPresent(screenshot, forKey: "Screenshot")
            try encoderContainer.encodeIfPresent(thumb, forKey: "Thumb")
        }

    }

    public init(airDays: [DayOfWeek]? = nil, airTime: String? = nil, airsAfterSeasonNumber: Int? = nil, airsBeforeEpisodeNumber: Int? = nil, airsBeforeSeasonNumber: Int? = nil, album: String? = nil, albumArtist: String? = nil, albumArtists: [NameGuidPairModel]? = nil, albumCount: Int? = nil, albumId: ID? = nil, albumPrimaryImageTag: String? = nil, altitude: Double? = nil, aperture: Double? = nil, artistCount: Int? = nil, artistItems: [NameGuidPairModel]? = nil, artists: [String]? = nil, aspectRatio: String? = nil, audio: ProgramAudio? = nil, backdropImageTags: [String]? = nil, cameraMake: String? = nil, cameraModel: String? = nil, canDelete: Bool? = nil, canDownload: Bool? = nil, channelId: ID? = nil, channelName: String? = nil, channelNumber: String? = nil, channelPrimaryImageTag: String? = nil, channelType: ChannelType? = nil, chapters: [ChapterInfoModel]? = nil, childCount: Int? = nil, collectionType: String? = nil, communityRating: Float? = nil, completionPercentage: Double? = nil, container: String? = nil, criticRating: Float? = nil, cumulativeRunTimeTicks: Int? = nil, currentProgram: BaseItemDtoModel? = nil, customRating: String? = nil, dateCreated: DateTime? = nil, dateLastMediaAdded: DateTime? = nil, displayOrder: String? = nil, displayPreferencesId: String? = nil, enableMediaSourceDisplay: Bool? = nil, endDate: DateTime? = nil, episodeCount: Int? = nil, episodeTitle: String? = nil, etag: String? = nil, exposureTime: Double? = nil, externalUrls: [ExternalUrlModel]? = nil, extraType: String? = nil, focalLength: Double? = nil, forcedSortName: String? = nil, genreItems: [NameGuidPairModel]? = nil, genres: [String]? = nil, hasSubtitles: Bool? = nil, height: Int? = nil, id: ID? = nil, imageBlurHashes: ImageBlurHashes? = nil, imageOrientation: ImageOrientation? = nil, imageTags: [String: String]? = nil, indexNumber: Int? = nil, indexNumberEnd: Int? = nil, isFolder: Bool? = nil, isHD: Bool? = nil, isKids: Bool? = nil, isLive: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isPlaceHolder: Bool? = nil, isPremiere: Bool? = nil, isRepeat: Bool? = nil, isSeries: Bool? = nil, isSports: Bool? = nil, isoSpeedRating: Int? = nil, isoType: IsoType? = nil, latitude: Double? = nil, localTrailerCount: Int? = nil, locationType: LocationType? = nil, lockData: Bool? = nil, lockedFields: [MetadataField]? = nil, longitude: Double? = nil, mediaSourceCount: Int? = nil, mediaSources: [MediaSourceInfoModel]? = nil, mediaStreams: [MediaStreamModel]? = nil, mediaType: String? = nil, movieCount: Int? = nil, musicVideoCount: Int? = nil, name: String? = nil, number: String? = nil, officialRating: String? = nil, originalTitle: String? = nil, overview: String? = nil, parentArtImageTag: String? = nil, parentArtItemId: String? = nil, parentBackdropImageTags: [String]? = nil, parentBackdropItemId: String? = nil, parentId: ID? = nil, parentIndexNumber: Int? = nil, parentLogoImageTag: String? = nil, parentLogoItemId: String? = nil, parentPrimaryImageItemId: String? = nil, parentPrimaryImageTag: String? = nil, parentThumbImageTag: String? = nil, parentThumbItemId: String? = nil, partCount: Int? = nil, path: String? = nil, people: [BaseItemPersonModel]? = nil, playAccess: PlayAccess? = nil, playlistItemId: String? = nil, preferredMetadataCountryCode: String? = nil, preferredMetadataLanguage: String? = nil, premiereDate: DateTime? = nil, primaryImageAspectRatio: Double? = nil, productionLocations: [String]? = nil, productionYear: Int? = nil, programCount: Int? = nil, programId: String? = nil, providerIds: [String: String]? = nil, recursiveItemCount: Int? = nil, remoteTrailers: [MediaUrlModel]? = nil, runTimeTicks: Int? = nil, screenshotImageTags: [String]? = nil, seasonId: ID? = nil, seasonName: String? = nil, seriesCount: Int? = nil, seriesId: ID? = nil, seriesName: String? = nil, seriesPrimaryImageTag: String? = nil, seriesStudio: String? = nil, seriesThumbImageTag: String? = nil, seriesTimerId: String? = nil, serverId: String? = nil, shutterSpeed: Double? = nil, software: String? = nil, songCount: Int? = nil, sortName: String? = nil, sourceType: String? = nil, specialFeatureCount: Int? = nil, startDate: DateTime? = nil, status: String? = nil, studios: [NameGuidPairModel]? = nil, supportsSync: Bool? = nil, taglines: [String]? = nil, tags: [String]? = nil, timerId: String? = nil, trailerCount: Int? = nil, type: String? = nil, userData: UserItemDataDtoModel? = nil, video3DFormat: Video3DFormat? = nil, videoType: VideoType? = nil, width: Int? = nil) {
        self.airDays = airDays
        self.airTime = airTime
        self.airsAfterSeasonNumber = airsAfterSeasonNumber
        self.airsBeforeEpisodeNumber = airsBeforeEpisodeNumber
        self.airsBeforeSeasonNumber = airsBeforeSeasonNumber
        self.album = album
        self.albumArtist = albumArtist
        self.albumArtists = albumArtists
        self.albumCount = albumCount
        self.albumId = albumId
        self.albumPrimaryImageTag = albumPrimaryImageTag
        self.altitude = altitude
        self.aperture = aperture
        self.artistCount = artistCount
        self.artistItems = artistItems
        self.artists = artists
        self.aspectRatio = aspectRatio
        self.audio = audio
        self.backdropImageTags = backdropImageTags
        self.cameraMake = cameraMake
        self.cameraModel = cameraModel
        self.canDelete = canDelete
        self.canDownload = canDownload
        self.channelId = channelId
        self.channelName = channelName
        self.channelNumber = channelNumber
        self.channelPrimaryImageTag = channelPrimaryImageTag
        self.channelType = channelType
        self.chapters = chapters
        self.childCount = childCount
        self.collectionType = collectionType
        self.communityRating = communityRating
        self.completionPercentage = completionPercentage
        self.container = container
        self.criticRating = criticRating
        self.cumulativeRunTimeTicks = cumulativeRunTimeTicks
        self.currentProgram = currentProgram
        self.customRating = customRating
        self.dateCreated = dateCreated
        self.dateLastMediaAdded = dateLastMediaAdded
        self.displayOrder = displayOrder
        self.displayPreferencesId = displayPreferencesId
        self.enableMediaSourceDisplay = enableMediaSourceDisplay
        self.endDate = endDate
        self.episodeCount = episodeCount
        self.episodeTitle = episodeTitle
        self.etag = etag
        self.exposureTime = exposureTime
        self.externalUrls = externalUrls
        self.extraType = extraType
        self.focalLength = focalLength
        self.forcedSortName = forcedSortName
        self.genreItems = genreItems
        self.genres = genres
        self.hasSubtitles = hasSubtitles
        self.height = height
        self.id = id
        self.imageBlurHashes = imageBlurHashes
        self.imageOrientation = imageOrientation
        self.imageTags = imageTags
        self.indexNumber = indexNumber
        self.indexNumberEnd = indexNumberEnd
        self.isFolder = isFolder
        self.isHD = isHD
        self.isKids = isKids
        self.isLive = isLive
        self.isMovie = isMovie
        self.isNews = isNews
        self.isPlaceHolder = isPlaceHolder
        self.isPremiere = isPremiere
        self.isRepeat = isRepeat
        self.isSeries = isSeries
        self.isSports = isSports
        self.isoSpeedRating = isoSpeedRating
        self.isoType = isoType
        self.latitude = latitude
        self.localTrailerCount = localTrailerCount
        self.locationType = locationType
        self.lockData = lockData
        self.lockedFields = lockedFields
        self.longitude = longitude
        self.mediaSourceCount = mediaSourceCount
        self.mediaSources = mediaSources
        self.mediaStreams = mediaStreams
        self.mediaType = mediaType
        self.movieCount = movieCount
        self.musicVideoCount = musicVideoCount
        self.name = name
        self.number = number
        self.officialRating = officialRating
        self.originalTitle = originalTitle
        self.overview = overview
        self.parentArtImageTag = parentArtImageTag
        self.parentArtItemId = parentArtItemId
        self.parentBackdropImageTags = parentBackdropImageTags
        self.parentBackdropItemId = parentBackdropItemId
        self.parentId = parentId
        self.parentIndexNumber = parentIndexNumber
        self.parentLogoImageTag = parentLogoImageTag
        self.parentLogoItemId = parentLogoItemId
        self.parentPrimaryImageItemId = parentPrimaryImageItemId
        self.parentPrimaryImageTag = parentPrimaryImageTag
        self.parentThumbImageTag = parentThumbImageTag
        self.parentThumbItemId = parentThumbItemId
        self.partCount = partCount
        self.path = path
        self.people = people
        self.playAccess = playAccess
        self.playlistItemId = playlistItemId
        self.preferredMetadataCountryCode = preferredMetadataCountryCode
        self.preferredMetadataLanguage = preferredMetadataLanguage
        self.premiereDate = premiereDate
        self.primaryImageAspectRatio = primaryImageAspectRatio
        self.productionLocations = productionLocations
        self.productionYear = productionYear
        self.programCount = programCount
        self.programId = programId
        self.providerIds = providerIds
        self.recursiveItemCount = recursiveItemCount
        self.remoteTrailers = remoteTrailers
        self.runTimeTicks = runTimeTicks
        self.screenshotImageTags = screenshotImageTags
        self.seasonId = seasonId
        self.seasonName = seasonName
        self.seriesCount = seriesCount
        self.seriesId = seriesId
        self.seriesName = seriesName
        self.seriesPrimaryImageTag = seriesPrimaryImageTag
        self.seriesStudio = seriesStudio
        self.seriesThumbImageTag = seriesThumbImageTag
        self.seriesTimerId = seriesTimerId
        self.serverId = serverId
        self.shutterSpeed = shutterSpeed
        self.software = software
        self.songCount = songCount
        self.sortName = sortName
        self.sourceType = sourceType
        self.specialFeatureCount = specialFeatureCount
        self.startDate = startDate
        self.status = status
        self.studios = studios
        self.supportsSync = supportsSync
        self.taglines = taglines
        self.tags = tags
        self.timerId = timerId
        self.trailerCount = trailerCount
        self.type = type
        self.userData = userData
        self.video3DFormat = video3DFormat
        self.videoType = videoType
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        airDays = try decoderContainer.decodeArrayIfPresent("AirDays")
        airTime = try decoderContainer.decodeIfPresent("AirTime")
        airsAfterSeasonNumber = try decoderContainer.decodeIfPresent("AirsAfterSeasonNumber")
        airsBeforeEpisodeNumber = try decoderContainer.decodeIfPresent("AirsBeforeEpisodeNumber")
        airsBeforeSeasonNumber = try decoderContainer.decodeIfPresent("AirsBeforeSeasonNumber")
        album = try decoderContainer.decodeIfPresent("Album")
        albumArtist = try decoderContainer.decodeIfPresent("AlbumArtist")
        albumArtists = try decoderContainer.decodeArrayIfPresent("AlbumArtists")
        albumCount = try decoderContainer.decodeIfPresent("AlbumCount")
        albumId = try decoderContainer.decodeIfPresent("AlbumId")
        albumPrimaryImageTag = try decoderContainer.decodeIfPresent("AlbumPrimaryImageTag")
        altitude = try decoderContainer.decodeIfPresent("Altitude")
        aperture = try decoderContainer.decodeIfPresent("Aperture")
        artistCount = try decoderContainer.decodeIfPresent("ArtistCount")
        artistItems = try decoderContainer.decodeArrayIfPresent("ArtistItems")
        artists = try decoderContainer.decodeArrayIfPresent("Artists")
        aspectRatio = try decoderContainer.decodeIfPresent("AspectRatio")
        audio = try decoderContainer.decodeIfPresent("Audio")
        backdropImageTags = try decoderContainer.decodeArrayIfPresent("BackdropImageTags")
        cameraMake = try decoderContainer.decodeIfPresent("CameraMake")
        cameraModel = try decoderContainer.decodeIfPresent("CameraModel")
        canDelete = try decoderContainer.decodeIfPresent("CanDelete")
        canDownload = try decoderContainer.decodeIfPresent("CanDownload")
        channelId = try decoderContainer.decodeIfPresent("ChannelId")
        channelName = try decoderContainer.decodeIfPresent("ChannelName")
        channelNumber = try decoderContainer.decodeIfPresent("ChannelNumber")
        channelPrimaryImageTag = try decoderContainer.decodeIfPresent("ChannelPrimaryImageTag")
        channelType = try decoderContainer.decodeIfPresent("ChannelType")
        chapters = try decoderContainer.decodeArrayIfPresent("Chapters")
        childCount = try decoderContainer.decodeIfPresent("ChildCount")
        collectionType = try decoderContainer.decodeIfPresent("CollectionType")
        communityRating = try decoderContainer.decodeIfPresent("CommunityRating")
        completionPercentage = try decoderContainer.decodeIfPresent("CompletionPercentage")
        container = try decoderContainer.decodeIfPresent("Container")
        criticRating = try decoderContainer.decodeIfPresent("CriticRating")
        cumulativeRunTimeTicks = try decoderContainer.decodeIfPresent("CumulativeRunTimeTicks")
        currentProgram = try decoderContainer.decodeIfPresent("CurrentProgram")
        customRating = try decoderContainer.decodeIfPresent("CustomRating")
        dateCreated = try decoderContainer.decodeIfPresent("DateCreated")
        dateLastMediaAdded = try decoderContainer.decodeIfPresent("DateLastMediaAdded")
        displayOrder = try decoderContainer.decodeIfPresent("DisplayOrder")
        displayPreferencesId = try decoderContainer.decodeIfPresent("DisplayPreferencesId")
        enableMediaSourceDisplay = try decoderContainer.decodeIfPresent("EnableMediaSourceDisplay")
        endDate = try decoderContainer.decodeIfPresent("EndDate")
        episodeCount = try decoderContainer.decodeIfPresent("EpisodeCount")
        episodeTitle = try decoderContainer.decodeIfPresent("EpisodeTitle")
        etag = try decoderContainer.decodeIfPresent("Etag")
        exposureTime = try decoderContainer.decodeIfPresent("ExposureTime")
        externalUrls = try decoderContainer.decodeArrayIfPresent("ExternalUrls")
        extraType = try decoderContainer.decodeIfPresent("ExtraType")
        focalLength = try decoderContainer.decodeIfPresent("FocalLength")
        forcedSortName = try decoderContainer.decodeIfPresent("ForcedSortName")
        genreItems = try decoderContainer.decodeArrayIfPresent("GenreItems")
        genres = try decoderContainer.decodeArrayIfPresent("Genres")
        hasSubtitles = try decoderContainer.decodeIfPresent("HasSubtitles")
        height = try decoderContainer.decodeIfPresent("Height")
        id = try decoderContainer.decodeIfPresent("Id")
        imageBlurHashes = try decoderContainer.decodeIfPresent("ImageBlurHashes")
        imageOrientation = try decoderContainer.decodeIfPresent("ImageOrientation")
        imageTags = try decoderContainer.decodeIfPresent("ImageTags")
        indexNumber = try decoderContainer.decodeIfPresent("IndexNumber")
        indexNumberEnd = try decoderContainer.decodeIfPresent("IndexNumberEnd")
        isFolder = try decoderContainer.decodeIfPresent("IsFolder")
        isHD = try decoderContainer.decodeIfPresent("IsHD")
        isKids = try decoderContainer.decodeIfPresent("IsKids")
        isLive = try decoderContainer.decodeIfPresent("IsLive")
        isMovie = try decoderContainer.decodeIfPresent("IsMovie")
        isNews = try decoderContainer.decodeIfPresent("IsNews")
        isPlaceHolder = try decoderContainer.decodeIfPresent("IsPlaceHolder")
        isPremiere = try decoderContainer.decodeIfPresent("IsPremiere")
        isRepeat = try decoderContainer.decodeIfPresent("IsRepeat")
        isSeries = try decoderContainer.decodeIfPresent("IsSeries")
        isSports = try decoderContainer.decodeIfPresent("IsSports")
        isoSpeedRating = try decoderContainer.decodeIfPresent("IsoSpeedRating")
        isoType = try decoderContainer.decodeIfPresent("IsoType")
        latitude = try decoderContainer.decodeIfPresent("Latitude")
        localTrailerCount = try decoderContainer.decodeIfPresent("LocalTrailerCount")
        locationType = try decoderContainer.decodeIfPresent("LocationType")
        lockData = try decoderContainer.decodeIfPresent("LockData")
        lockedFields = try decoderContainer.decodeArrayIfPresent("LockedFields")
        longitude = try decoderContainer.decodeIfPresent("Longitude")
        mediaSourceCount = try decoderContainer.decodeIfPresent("MediaSourceCount")
        mediaSources = try decoderContainer.decodeArrayIfPresent("MediaSources")
        mediaStreams = try decoderContainer.decodeArrayIfPresent("MediaStreams")
        mediaType = try decoderContainer.decodeIfPresent("MediaType")
        movieCount = try decoderContainer.decodeIfPresent("MovieCount")
        musicVideoCount = try decoderContainer.decodeIfPresent("MusicVideoCount")
        name = try decoderContainer.decodeIfPresent("Name")
        number = try decoderContainer.decodeIfPresent("Number")
        officialRating = try decoderContainer.decodeIfPresent("OfficialRating")
        originalTitle = try decoderContainer.decodeIfPresent("OriginalTitle")
        overview = try decoderContainer.decodeIfPresent("Overview")
        parentArtImageTag = try decoderContainer.decodeIfPresent("ParentArtImageTag")
        parentArtItemId = try decoderContainer.decodeIfPresent("ParentArtItemId")
        parentBackdropImageTags = try decoderContainer.decodeArrayIfPresent("ParentBackdropImageTags")
        parentBackdropItemId = try decoderContainer.decodeIfPresent("ParentBackdropItemId")
        parentId = try decoderContainer.decodeIfPresent("ParentId")
        parentIndexNumber = try decoderContainer.decodeIfPresent("ParentIndexNumber")
        parentLogoImageTag = try decoderContainer.decodeIfPresent("ParentLogoImageTag")
        parentLogoItemId = try decoderContainer.decodeIfPresent("ParentLogoItemId")
        parentPrimaryImageItemId = try decoderContainer.decodeIfPresent("ParentPrimaryImageItemId")
        parentPrimaryImageTag = try decoderContainer.decodeIfPresent("ParentPrimaryImageTag")
        parentThumbImageTag = try decoderContainer.decodeIfPresent("ParentThumbImageTag")
        parentThumbItemId = try decoderContainer.decodeIfPresent("ParentThumbItemId")
        partCount = try decoderContainer.decodeIfPresent("PartCount")
        path = try decoderContainer.decodeIfPresent("Path")
        people = try decoderContainer.decodeArrayIfPresent("People")
        playAccess = try decoderContainer.decodeIfPresent("PlayAccess")
        playlistItemId = try decoderContainer.decodeIfPresent("PlaylistItemId")
        preferredMetadataCountryCode = try decoderContainer.decodeIfPresent("PreferredMetadataCountryCode")
        preferredMetadataLanguage = try decoderContainer.decodeIfPresent("PreferredMetadataLanguage")
        premiereDate = try decoderContainer.decodeIfPresent("PremiereDate")
        primaryImageAspectRatio = try decoderContainer.decodeIfPresent("PrimaryImageAspectRatio")
        productionLocations = try decoderContainer.decodeArrayIfPresent("ProductionLocations")
        productionYear = try decoderContainer.decodeIfPresent("ProductionYear")
        programCount = try decoderContainer.decodeIfPresent("ProgramCount")
        programId = try decoderContainer.decodeIfPresent("ProgramId")
        providerIds = try decoderContainer.decodeIfPresent("ProviderIds")
        recursiveItemCount = try decoderContainer.decodeIfPresent("RecursiveItemCount")
        remoteTrailers = try decoderContainer.decodeArrayIfPresent("RemoteTrailers")
        runTimeTicks = try decoderContainer.decodeIfPresent("RunTimeTicks")
        screenshotImageTags = try decoderContainer.decodeArrayIfPresent("ScreenshotImageTags")
        seasonId = try decoderContainer.decodeIfPresent("SeasonId")
        seasonName = try decoderContainer.decodeIfPresent("SeasonName")
        seriesCount = try decoderContainer.decodeIfPresent("SeriesCount")
        seriesId = try decoderContainer.decodeIfPresent("SeriesId")
        seriesName = try decoderContainer.decodeIfPresent("SeriesName")
        seriesPrimaryImageTag = try decoderContainer.decodeIfPresent("SeriesPrimaryImageTag")
        seriesStudio = try decoderContainer.decodeIfPresent("SeriesStudio")
        seriesThumbImageTag = try decoderContainer.decodeIfPresent("SeriesThumbImageTag")
        seriesTimerId = try decoderContainer.decodeIfPresent("SeriesTimerId")
        serverId = try decoderContainer.decodeIfPresent("ServerId")
        shutterSpeed = try decoderContainer.decodeIfPresent("ShutterSpeed")
        software = try decoderContainer.decodeIfPresent("Software")
        songCount = try decoderContainer.decodeIfPresent("SongCount")
        sortName = try decoderContainer.decodeIfPresent("SortName")
        sourceType = try decoderContainer.decodeIfPresent("SourceType")
        specialFeatureCount = try decoderContainer.decodeIfPresent("SpecialFeatureCount")
        startDate = try decoderContainer.decodeIfPresent("StartDate")
        status = try decoderContainer.decodeIfPresent("Status")
        studios = try decoderContainer.decodeArrayIfPresent("Studios")
        supportsSync = try decoderContainer.decodeIfPresent("SupportsSync")
        taglines = try decoderContainer.decodeArrayIfPresent("Taglines")
        tags = try decoderContainer.decodeArrayIfPresent("Tags")
        timerId = try decoderContainer.decodeIfPresent("TimerId")
        trailerCount = try decoderContainer.decodeIfPresent("TrailerCount")
        type = try decoderContainer.decodeIfPresent("Type")
        userData = try decoderContainer.decodeIfPresent("UserData")
        video3DFormat = try decoderContainer.decodeIfPresent("Video3DFormat")
        videoType = try decoderContainer.decodeIfPresent("VideoType")
        width = try decoderContainer.decodeIfPresent("Width")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(airDays, forKey: "AirDays")
        try encoderContainer.encodeIfPresent(airTime, forKey: "AirTime")
        try encoderContainer.encodeIfPresent(airsAfterSeasonNumber, forKey: "AirsAfterSeasonNumber")
        try encoderContainer.encodeIfPresent(airsBeforeEpisodeNumber, forKey: "AirsBeforeEpisodeNumber")
        try encoderContainer.encodeIfPresent(airsBeforeSeasonNumber, forKey: "AirsBeforeSeasonNumber")
        try encoderContainer.encodeIfPresent(album, forKey: "Album")
        try encoderContainer.encodeIfPresent(albumArtist, forKey: "AlbumArtist")
        try encoderContainer.encodeIfPresent(albumArtists, forKey: "AlbumArtists")
        try encoderContainer.encodeIfPresent(albumCount, forKey: "AlbumCount")
        try encoderContainer.encodeIfPresent(albumId, forKey: "AlbumId")
        try encoderContainer.encodeIfPresent(albumPrimaryImageTag, forKey: "AlbumPrimaryImageTag")
        try encoderContainer.encodeIfPresent(altitude, forKey: "Altitude")
        try encoderContainer.encodeIfPresent(aperture, forKey: "Aperture")
        try encoderContainer.encodeIfPresent(artistCount, forKey: "ArtistCount")
        try encoderContainer.encodeIfPresent(artistItems, forKey: "ArtistItems")
        try encoderContainer.encodeIfPresent(artists, forKey: "Artists")
        try encoderContainer.encodeIfPresent(aspectRatio, forKey: "AspectRatio")
        try encoderContainer.encodeIfPresent(audio, forKey: "Audio")
        try encoderContainer.encodeIfPresent(backdropImageTags, forKey: "BackdropImageTags")
        try encoderContainer.encodeIfPresent(cameraMake, forKey: "CameraMake")
        try encoderContainer.encodeIfPresent(cameraModel, forKey: "CameraModel")
        try encoderContainer.encodeIfPresent(canDelete, forKey: "CanDelete")
        try encoderContainer.encodeIfPresent(canDownload, forKey: "CanDownload")
        try encoderContainer.encodeIfPresent(channelId, forKey: "ChannelId")
        try encoderContainer.encodeIfPresent(channelName, forKey: "ChannelName")
        try encoderContainer.encodeIfPresent(channelNumber, forKey: "ChannelNumber")
        try encoderContainer.encodeIfPresent(channelPrimaryImageTag, forKey: "ChannelPrimaryImageTag")
        try encoderContainer.encodeIfPresent(channelType, forKey: "ChannelType")
        try encoderContainer.encodeIfPresent(chapters, forKey: "Chapters")
        try encoderContainer.encodeIfPresent(childCount, forKey: "ChildCount")
        try encoderContainer.encodeIfPresent(collectionType, forKey: "CollectionType")
        try encoderContainer.encodeIfPresent(communityRating, forKey: "CommunityRating")
        try encoderContainer.encodeIfPresent(completionPercentage, forKey: "CompletionPercentage")
        try encoderContainer.encodeIfPresent(container, forKey: "Container")
        try encoderContainer.encodeIfPresent(criticRating, forKey: "CriticRating")
        try encoderContainer.encodeIfPresent(cumulativeRunTimeTicks, forKey: "CumulativeRunTimeTicks")
        try encoderContainer.encodeIfPresent(currentProgram, forKey: "CurrentProgram")
        try encoderContainer.encodeIfPresent(customRating, forKey: "CustomRating")
        try encoderContainer.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try encoderContainer.encodeIfPresent(dateLastMediaAdded, forKey: "DateLastMediaAdded")
        try encoderContainer.encodeIfPresent(displayOrder, forKey: "DisplayOrder")
        try encoderContainer.encodeIfPresent(displayPreferencesId, forKey: "DisplayPreferencesId")
        try encoderContainer.encodeIfPresent(enableMediaSourceDisplay, forKey: "EnableMediaSourceDisplay")
        try encoderContainer.encodeIfPresent(endDate, forKey: "EndDate")
        try encoderContainer.encodeIfPresent(episodeCount, forKey: "EpisodeCount")
        try encoderContainer.encodeIfPresent(episodeTitle, forKey: "EpisodeTitle")
        try encoderContainer.encodeIfPresent(etag, forKey: "Etag")
        try encoderContainer.encodeIfPresent(exposureTime, forKey: "ExposureTime")
        try encoderContainer.encodeIfPresent(externalUrls, forKey: "ExternalUrls")
        try encoderContainer.encodeIfPresent(extraType, forKey: "ExtraType")
        try encoderContainer.encodeIfPresent(focalLength, forKey: "FocalLength")
        try encoderContainer.encodeIfPresent(forcedSortName, forKey: "ForcedSortName")
        try encoderContainer.encodeIfPresent(genreItems, forKey: "GenreItems")
        try encoderContainer.encodeIfPresent(genres, forKey: "Genres")
        try encoderContainer.encodeIfPresent(hasSubtitles, forKey: "HasSubtitles")
        try encoderContainer.encodeIfPresent(height, forKey: "Height")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(imageBlurHashes, forKey: "ImageBlurHashes")
        try encoderContainer.encodeIfPresent(imageOrientation, forKey: "ImageOrientation")
        try encoderContainer.encodeIfPresent(imageTags, forKey: "ImageTags")
        try encoderContainer.encodeIfPresent(indexNumber, forKey: "IndexNumber")
        try encoderContainer.encodeIfPresent(indexNumberEnd, forKey: "IndexNumberEnd")
        try encoderContainer.encodeIfPresent(isFolder, forKey: "IsFolder")
        try encoderContainer.encodeIfPresent(isHD, forKey: "IsHD")
        try encoderContainer.encodeIfPresent(isKids, forKey: "IsKids")
        try encoderContainer.encodeIfPresent(isLive, forKey: "IsLive")
        try encoderContainer.encodeIfPresent(isMovie, forKey: "IsMovie")
        try encoderContainer.encodeIfPresent(isNews, forKey: "IsNews")
        try encoderContainer.encodeIfPresent(isPlaceHolder, forKey: "IsPlaceHolder")
        try encoderContainer.encodeIfPresent(isPremiere, forKey: "IsPremiere")
        try encoderContainer.encodeIfPresent(isRepeat, forKey: "IsRepeat")
        try encoderContainer.encodeIfPresent(isSeries, forKey: "IsSeries")
        try encoderContainer.encodeIfPresent(isSports, forKey: "IsSports")
        try encoderContainer.encodeIfPresent(isoSpeedRating, forKey: "IsoSpeedRating")
        try encoderContainer.encodeIfPresent(isoType, forKey: "IsoType")
        try encoderContainer.encodeIfPresent(latitude, forKey: "Latitude")
        try encoderContainer.encodeIfPresent(localTrailerCount, forKey: "LocalTrailerCount")
        try encoderContainer.encodeIfPresent(locationType, forKey: "LocationType")
        try encoderContainer.encodeIfPresent(lockData, forKey: "LockData")
        try encoderContainer.encodeIfPresent(lockedFields, forKey: "LockedFields")
        try encoderContainer.encodeIfPresent(longitude, forKey: "Longitude")
        try encoderContainer.encodeIfPresent(mediaSourceCount, forKey: "MediaSourceCount")
        try encoderContainer.encodeIfPresent(mediaSources, forKey: "MediaSources")
        try encoderContainer.encodeIfPresent(mediaStreams, forKey: "MediaStreams")
        try encoderContainer.encodeIfPresent(mediaType, forKey: "MediaType")
        try encoderContainer.encodeIfPresent(movieCount, forKey: "MovieCount")
        try encoderContainer.encodeIfPresent(musicVideoCount, forKey: "MusicVideoCount")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(number, forKey: "Number")
        try encoderContainer.encodeIfPresent(officialRating, forKey: "OfficialRating")
        try encoderContainer.encodeIfPresent(originalTitle, forKey: "OriginalTitle")
        try encoderContainer.encodeIfPresent(overview, forKey: "Overview")
        try encoderContainer.encodeIfPresent(parentArtImageTag, forKey: "ParentArtImageTag")
        try encoderContainer.encodeIfPresent(parentArtItemId, forKey: "ParentArtItemId")
        try encoderContainer.encodeIfPresent(parentBackdropImageTags, forKey: "ParentBackdropImageTags")
        try encoderContainer.encodeIfPresent(parentBackdropItemId, forKey: "ParentBackdropItemId")
        try encoderContainer.encodeIfPresent(parentId, forKey: "ParentId")
        try encoderContainer.encodeIfPresent(parentIndexNumber, forKey: "ParentIndexNumber")
        try encoderContainer.encodeIfPresent(parentLogoImageTag, forKey: "ParentLogoImageTag")
        try encoderContainer.encodeIfPresent(parentLogoItemId, forKey: "ParentLogoItemId")
        try encoderContainer.encodeIfPresent(parentPrimaryImageItemId, forKey: "ParentPrimaryImageItemId")
        try encoderContainer.encodeIfPresent(parentPrimaryImageTag, forKey: "ParentPrimaryImageTag")
        try encoderContainer.encodeIfPresent(parentThumbImageTag, forKey: "ParentThumbImageTag")
        try encoderContainer.encodeIfPresent(parentThumbItemId, forKey: "ParentThumbItemId")
        try encoderContainer.encodeIfPresent(partCount, forKey: "PartCount")
        try encoderContainer.encodeIfPresent(path, forKey: "Path")
        try encoderContainer.encodeIfPresent(people, forKey: "People")
        try encoderContainer.encodeIfPresent(playAccess, forKey: "PlayAccess")
        try encoderContainer.encodeIfPresent(playlistItemId, forKey: "PlaylistItemId")
        try encoderContainer.encodeIfPresent(preferredMetadataCountryCode, forKey: "PreferredMetadataCountryCode")
        try encoderContainer.encodeIfPresent(preferredMetadataLanguage, forKey: "PreferredMetadataLanguage")
        try encoderContainer.encodeIfPresent(premiereDate, forKey: "PremiereDate")
        try encoderContainer.encodeIfPresent(primaryImageAspectRatio, forKey: "PrimaryImageAspectRatio")
        try encoderContainer.encodeIfPresent(productionLocations, forKey: "ProductionLocations")
        try encoderContainer.encodeIfPresent(productionYear, forKey: "ProductionYear")
        try encoderContainer.encodeIfPresent(programCount, forKey: "ProgramCount")
        try encoderContainer.encodeIfPresent(programId, forKey: "ProgramId")
        try encoderContainer.encodeIfPresent(providerIds, forKey: "ProviderIds")
        try encoderContainer.encodeIfPresent(recursiveItemCount, forKey: "RecursiveItemCount")
        try encoderContainer.encodeIfPresent(remoteTrailers, forKey: "RemoteTrailers")
        try encoderContainer.encodeIfPresent(runTimeTicks, forKey: "RunTimeTicks")
        try encoderContainer.encodeIfPresent(screenshotImageTags, forKey: "ScreenshotImageTags")
        try encoderContainer.encodeIfPresent(seasonId, forKey: "SeasonId")
        try encoderContainer.encodeIfPresent(seasonName, forKey: "SeasonName")
        try encoderContainer.encodeIfPresent(seriesCount, forKey: "SeriesCount")
        try encoderContainer.encodeIfPresent(seriesId, forKey: "SeriesId")
        try encoderContainer.encodeIfPresent(seriesName, forKey: "SeriesName")
        try encoderContainer.encodeIfPresent(seriesPrimaryImageTag, forKey: "SeriesPrimaryImageTag")
        try encoderContainer.encodeIfPresent(seriesStudio, forKey: "SeriesStudio")
        try encoderContainer.encodeIfPresent(seriesThumbImageTag, forKey: "SeriesThumbImageTag")
        try encoderContainer.encodeIfPresent(seriesTimerId, forKey: "SeriesTimerId")
        try encoderContainer.encodeIfPresent(serverId, forKey: "ServerId")
        try encoderContainer.encodeIfPresent(shutterSpeed, forKey: "ShutterSpeed")
        try encoderContainer.encodeIfPresent(software, forKey: "Software")
        try encoderContainer.encodeIfPresent(songCount, forKey: "SongCount")
        try encoderContainer.encodeIfPresent(sortName, forKey: "SortName")
        try encoderContainer.encodeIfPresent(sourceType, forKey: "SourceType")
        try encoderContainer.encodeIfPresent(specialFeatureCount, forKey: "SpecialFeatureCount")
        try encoderContainer.encodeIfPresent(startDate, forKey: "StartDate")
        try encoderContainer.encodeIfPresent(status, forKey: "Status")
        try encoderContainer.encodeIfPresent(studios, forKey: "Studios")
        try encoderContainer.encodeIfPresent(supportsSync, forKey: "SupportsSync")
        try encoderContainer.encodeIfPresent(taglines, forKey: "Taglines")
        try encoderContainer.encodeIfPresent(tags, forKey: "Tags")
        try encoderContainer.encodeIfPresent(timerId, forKey: "TimerId")
        try encoderContainer.encodeIfPresent(trailerCount, forKey: "TrailerCount")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(userData, forKey: "UserData")
        try encoderContainer.encodeIfPresent(video3DFormat, forKey: "Video3DFormat")
        try encoderContainer.encodeIfPresent(videoType, forKey: "VideoType")
        try encoderContainer.encodeIfPresent(width, forKey: "Width")
    }

}
