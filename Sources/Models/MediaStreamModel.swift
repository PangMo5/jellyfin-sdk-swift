//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class MediaStream. */
public struct MediaStreamModel: APIModel {

    /** Gets or sets the aspect ratio. */
    public var aspectRatio: String?

    /** Gets or sets the average frame rate. */
    public var averageFrameRate: Float?

    /** Gets or sets the bit depth. */
    public var bitDepth: Int?

    /** Gets or sets the bit rate. */
    public var bitRate: Int?

    /** Gets or sets the channel layout. */
    public var channelLayout: String?

    /** Gets or sets the channels. */
    public var channels: Int?

    /** Gets or sets the codec. */
    public var codec: String?

    /** Gets or sets the codec tag. */
    public var codecTag: String?

    /** Gets or sets the codec time base. */
    public var codecTimeBase: String?

    /** Gets or sets the color primaries. */
    public var colorPrimaries: String?

    /** Gets or sets the color range. */
    public var colorRange: String?

    /** Gets or sets the color space. */
    public var colorSpace: String?

    /** Gets or sets the color transfer. */
    public var colorTransfer: String?

    /** Gets or sets the comment. */
    public var comment: String?

    public var deliveryMethod: SubtitleDeliveryMethod?

    /** Gets or sets the delivery URL. */
    public var deliveryUrl: String?

    public var displayTitle: String?

    /** Gets or sets the height. */
    public var height: Int?

    /** Gets or sets the index. */
    public var index: Int?

    public var isAVC: Bool?

    /** Gets a value indicating whether this instance is anamorphic. */
    public var isAnamorphic: Bool?

    /** Gets or sets a value indicating whether this instance is default. */
    public var isDefault: Bool?

    /** Gets or sets a value indicating whether this instance is external. */
    public var isExternal: Bool?

    /** Gets or sets a value indicating whether this instance is external URL. */
    public var isExternalUrl: Bool?

    /** Gets or sets a value indicating whether this instance is forced. */
    public var isForced: Bool?

    /** Gets or sets a value indicating whether this instance is interlaced. */
    public var isInterlaced: Bool?

    public var isTextSubtitleStream: Bool?

    /** Gets or sets the language. */
    public var language: String?

    /** Gets or sets the level. */
    public var level: Double?

    public var nalLengthSize: String?

    /** Gets or sets the length of the packet. */
    public var packetLength: Int?

    /** Gets or sets the filename. */
    public var path: String?

    /** Gets or sets the pixel format. */
    public var pixelFormat: String?

    /** Gets or sets the profile. */
    public var profile: String?

    /** Gets or sets the real frame rate. */
    public var realFrameRate: Float?

    /** Gets or sets the reference frames. */
    public var refFrames: Int?

    /** Gets or sets the sample rate. */
    public var sampleRate: Int?

    /** Gets or sets the score. */
    public var score: Int?

    /** Gets or sets a value indicating whether [supports external stream]. */
    public var supportsExternalStream: Bool?

    /** Gets or sets the time base. */
    public var timeBase: String?

    /** Gets or sets the title. */
    public var title: String?

    public var type: MediaStreamType?

    /** Gets or sets the video range. */
    public var videoRange: String?

    /** Gets or sets the width. */
    public var width: Int?

    public var localizedDefault: String?

    public var localizedForced: String?

    public var localizedUndefined: String?

    public init(aspectRatio: String? = nil, averageFrameRate: Float? = nil, bitDepth: Int? = nil, bitRate: Int? = nil, channelLayout: String? = nil, channels: Int? = nil, codec: String? = nil, codecTag: String? = nil, codecTimeBase: String? = nil, colorPrimaries: String? = nil, colorRange: String? = nil, colorSpace: String? = nil, colorTransfer: String? = nil, comment: String? = nil, deliveryMethod: SubtitleDeliveryMethod? = nil, deliveryUrl: String? = nil, displayTitle: String? = nil, height: Int? = nil, index: Int? = nil, isAVC: Bool? = nil, isAnamorphic: Bool? = nil, isDefault: Bool? = nil, isExternal: Bool? = nil, isExternalUrl: Bool? = nil, isForced: Bool? = nil, isInterlaced: Bool? = nil, isTextSubtitleStream: Bool? = nil, language: String? = nil, level: Double? = nil, nalLengthSize: String? = nil, packetLength: Int? = nil, path: String? = nil, pixelFormat: String? = nil, profile: String? = nil, realFrameRate: Float? = nil, refFrames: Int? = nil, sampleRate: Int? = nil, score: Int? = nil, supportsExternalStream: Bool? = nil, timeBase: String? = nil, title: String? = nil, type: MediaStreamType? = nil, videoRange: String? = nil, width: Int? = nil, localizedDefault: String? = nil, localizedForced: String? = nil, localizedUndefined: String? = nil) {
        self.aspectRatio = aspectRatio
        self.averageFrameRate = averageFrameRate
        self.bitDepth = bitDepth
        self.bitRate = bitRate
        self.channelLayout = channelLayout
        self.channels = channels
        self.codec = codec
        self.codecTag = codecTag
        self.codecTimeBase = codecTimeBase
        self.colorPrimaries = colorPrimaries
        self.colorRange = colorRange
        self.colorSpace = colorSpace
        self.colorTransfer = colorTransfer
        self.comment = comment
        self.deliveryMethod = deliveryMethod
        self.deliveryUrl = deliveryUrl
        self.displayTitle = displayTitle
        self.height = height
        self.index = index
        self.isAVC = isAVC
        self.isAnamorphic = isAnamorphic
        self.isDefault = isDefault
        self.isExternal = isExternal
        self.isExternalUrl = isExternalUrl
        self.isForced = isForced
        self.isInterlaced = isInterlaced
        self.isTextSubtitleStream = isTextSubtitleStream
        self.language = language
        self.level = level
        self.nalLengthSize = nalLengthSize
        self.packetLength = packetLength
        self.path = path
        self.pixelFormat = pixelFormat
        self.profile = profile
        self.realFrameRate = realFrameRate
        self.refFrames = refFrames
        self.sampleRate = sampleRate
        self.score = score
        self.supportsExternalStream = supportsExternalStream
        self.timeBase = timeBase
        self.title = title
        self.type = type
        self.videoRange = videoRange
        self.width = width
        self.localizedDefault = localizedDefault
        self.localizedForced = localizedForced
        self.localizedUndefined = localizedUndefined
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        aspectRatio = try decoderContainer.decodeIfPresent("AspectRatio")
        averageFrameRate = try decoderContainer.decodeIfPresent("AverageFrameRate")
        bitDepth = try decoderContainer.decodeIfPresent("BitDepth")
        bitRate = try decoderContainer.decodeIfPresent("BitRate")
        channelLayout = try decoderContainer.decodeIfPresent("ChannelLayout")
        channels = try decoderContainer.decodeIfPresent("Channels")
        codec = try decoderContainer.decodeIfPresent("Codec")
        codecTag = try decoderContainer.decodeIfPresent("CodecTag")
        codecTimeBase = try decoderContainer.decodeIfPresent("CodecTimeBase")
        colorPrimaries = try decoderContainer.decodeIfPresent("ColorPrimaries")
        colorRange = try decoderContainer.decodeIfPresent("ColorRange")
        colorSpace = try decoderContainer.decodeIfPresent("ColorSpace")
        colorTransfer = try decoderContainer.decodeIfPresent("ColorTransfer")
        comment = try decoderContainer.decodeIfPresent("Comment")
        deliveryMethod = try decoderContainer.decodeIfPresent("DeliveryMethod")
        deliveryUrl = try decoderContainer.decodeIfPresent("DeliveryUrl")
        displayTitle = try decoderContainer.decodeIfPresent("DisplayTitle")
        height = try decoderContainer.decodeIfPresent("Height")
        index = try decoderContainer.decodeIfPresent("Index")
        isAVC = try decoderContainer.decodeIfPresent("IsAVC")
        isAnamorphic = try decoderContainer.decodeIfPresent("IsAnamorphic")
        isDefault = try decoderContainer.decodeIfPresent("IsDefault")
        isExternal = try decoderContainer.decodeIfPresent("IsExternal")
        isExternalUrl = try decoderContainer.decodeIfPresent("IsExternalUrl")
        isForced = try decoderContainer.decodeIfPresent("IsForced")
        isInterlaced = try decoderContainer.decodeIfPresent("IsInterlaced")
        isTextSubtitleStream = try decoderContainer.decodeIfPresent("IsTextSubtitleStream")
        language = try decoderContainer.decodeIfPresent("Language")
        level = try decoderContainer.decodeIfPresent("Level")
        nalLengthSize = try decoderContainer.decodeIfPresent("NalLengthSize")
        packetLength = try decoderContainer.decodeIfPresent("PacketLength")
        path = try decoderContainer.decodeIfPresent("Path")
        pixelFormat = try decoderContainer.decodeIfPresent("PixelFormat")
        profile = try decoderContainer.decodeIfPresent("Profile")
        realFrameRate = try decoderContainer.decodeIfPresent("RealFrameRate")
        refFrames = try decoderContainer.decodeIfPresent("RefFrames")
        sampleRate = try decoderContainer.decodeIfPresent("SampleRate")
        score = try decoderContainer.decodeIfPresent("Score")
        supportsExternalStream = try decoderContainer.decodeIfPresent("SupportsExternalStream")
        timeBase = try decoderContainer.decodeIfPresent("TimeBase")
        title = try decoderContainer.decodeIfPresent("Title")
        type = try decoderContainer.decodeIfPresent("Type")
        videoRange = try decoderContainer.decodeIfPresent("VideoRange")
        width = try decoderContainer.decodeIfPresent("Width")
        localizedDefault = try decoderContainer.decodeIfPresent("localizedDefault")
        localizedForced = try decoderContainer.decodeIfPresent("localizedForced")
        localizedUndefined = try decoderContainer.decodeIfPresent("localizedUndefined")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(aspectRatio, forKey: "AspectRatio")
        try encoderContainer.encodeIfPresent(averageFrameRate, forKey: "AverageFrameRate")
        try encoderContainer.encodeIfPresent(bitDepth, forKey: "BitDepth")
        try encoderContainer.encodeIfPresent(bitRate, forKey: "BitRate")
        try encoderContainer.encodeIfPresent(channelLayout, forKey: "ChannelLayout")
        try encoderContainer.encodeIfPresent(channels, forKey: "Channels")
        try encoderContainer.encodeIfPresent(codec, forKey: "Codec")
        try encoderContainer.encodeIfPresent(codecTag, forKey: "CodecTag")
        try encoderContainer.encodeIfPresent(codecTimeBase, forKey: "CodecTimeBase")
        try encoderContainer.encodeIfPresent(colorPrimaries, forKey: "ColorPrimaries")
        try encoderContainer.encodeIfPresent(colorRange, forKey: "ColorRange")
        try encoderContainer.encodeIfPresent(colorSpace, forKey: "ColorSpace")
        try encoderContainer.encodeIfPresent(colorTransfer, forKey: "ColorTransfer")
        try encoderContainer.encodeIfPresent(comment, forKey: "Comment")
        try encoderContainer.encodeIfPresent(deliveryMethod, forKey: "DeliveryMethod")
        try encoderContainer.encodeIfPresent(deliveryUrl, forKey: "DeliveryUrl")
        try encoderContainer.encodeIfPresent(displayTitle, forKey: "DisplayTitle")
        try encoderContainer.encodeIfPresent(height, forKey: "Height")
        try encoderContainer.encodeIfPresent(index, forKey: "Index")
        try encoderContainer.encodeIfPresent(isAVC, forKey: "IsAVC")
        try encoderContainer.encodeIfPresent(isAnamorphic, forKey: "IsAnamorphic")
        try encoderContainer.encodeIfPresent(isDefault, forKey: "IsDefault")
        try encoderContainer.encodeIfPresent(isExternal, forKey: "IsExternal")
        try encoderContainer.encodeIfPresent(isExternalUrl, forKey: "IsExternalUrl")
        try encoderContainer.encodeIfPresent(isForced, forKey: "IsForced")
        try encoderContainer.encodeIfPresent(isInterlaced, forKey: "IsInterlaced")
        try encoderContainer.encodeIfPresent(isTextSubtitleStream, forKey: "IsTextSubtitleStream")
        try encoderContainer.encodeIfPresent(language, forKey: "Language")
        try encoderContainer.encodeIfPresent(level, forKey: "Level")
        try encoderContainer.encodeIfPresent(nalLengthSize, forKey: "NalLengthSize")
        try encoderContainer.encodeIfPresent(packetLength, forKey: "PacketLength")
        try encoderContainer.encodeIfPresent(path, forKey: "Path")
        try encoderContainer.encodeIfPresent(pixelFormat, forKey: "PixelFormat")
        try encoderContainer.encodeIfPresent(profile, forKey: "Profile")
        try encoderContainer.encodeIfPresent(realFrameRate, forKey: "RealFrameRate")
        try encoderContainer.encodeIfPresent(refFrames, forKey: "RefFrames")
        try encoderContainer.encodeIfPresent(sampleRate, forKey: "SampleRate")
        try encoderContainer.encodeIfPresent(score, forKey: "Score")
        try encoderContainer.encodeIfPresent(supportsExternalStream, forKey: "SupportsExternalStream")
        try encoderContainer.encodeIfPresent(timeBase, forKey: "TimeBase")
        try encoderContainer.encodeIfPresent(title, forKey: "Title")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(videoRange, forKey: "VideoRange")
        try encoderContainer.encodeIfPresent(width, forKey: "Width")
        try encoderContainer.encodeIfPresent(localizedDefault, forKey: "localizedDefault")
        try encoderContainer.encodeIfPresent(localizedForced, forKey: "localizedForced")
        try encoderContainer.encodeIfPresent(localizedUndefined, forKey: "localizedUndefined")
    }

}
