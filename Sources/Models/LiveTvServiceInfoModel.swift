//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class ServiceInfo. */
public struct LiveTvServiceInfoModel: APIModel {

    /** Gets or sets a value indicating whether this instance has update available. */
    public var hasUpdateAvailable: Bool?

    /** Gets or sets the home page URL. */
    public var homePageUrl: String?

    /** Gets or sets a value indicating whether this instance is visible. */
    public var isVisible: Bool?

    /** Gets or sets the name. */
    public var name: String?

    public var status: LiveTvServiceStatus?

    /** Gets or sets the status message. */
    public var statusMessage: String?

    public var tuners: [String]?

    /** Gets or sets the version. */
    public var version: String?

    public init(hasUpdateAvailable: Bool? = nil, homePageUrl: String? = nil, isVisible: Bool? = nil, name: String? = nil, status: LiveTvServiceStatus? = nil, statusMessage: String? = nil, tuners: [String]? = nil, version: String? = nil) {
        self.hasUpdateAvailable = hasUpdateAvailable
        self.homePageUrl = homePageUrl
        self.isVisible = isVisible
        self.name = name
        self.status = status
        self.statusMessage = statusMessage
        self.tuners = tuners
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        hasUpdateAvailable = try decoderContainer.decodeIfPresent("HasUpdateAvailable")
        homePageUrl = try decoderContainer.decodeIfPresent("HomePageUrl")
        isVisible = try decoderContainer.decodeIfPresent("IsVisible")
        name = try decoderContainer.decodeIfPresent("Name")
        status = try decoderContainer.decodeIfPresent("Status")
        statusMessage = try decoderContainer.decodeIfPresent("StatusMessage")
        tuners = try decoderContainer.decodeArrayIfPresent("Tuners")
        version = try decoderContainer.decodeIfPresent("Version")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(hasUpdateAvailable, forKey: "HasUpdateAvailable")
        try encoderContainer.encodeIfPresent(homePageUrl, forKey: "HomePageUrl")
        try encoderContainer.encodeIfPresent(isVisible, forKey: "IsVisible")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(status, forKey: "Status")
        try encoderContainer.encodeIfPresent(statusMessage, forKey: "StatusMessage")
        try encoderContainer.encodeIfPresent(tuners, forKey: "Tuners")
        try encoderContainer.encodeIfPresent(version, forKey: "Version")
    }

}
