//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct MetadataEditorInfoModel: APIModel {

    public var contentType: String?

    public var contentTypeOptions: [NameValuePairModel]?

    public var countries: [CountryInfoModel]?

    public var cultures: [CultureDtoModel]?

    public var externalIdInfos: [ExternalIdInfoModel]?

    public var parentalRatingOptions: [ParentalRatingModel]?

    public init(contentType: String? = nil, contentTypeOptions: [NameValuePairModel]? = nil, countries: [CountryInfoModel]? = nil, cultures: [CultureDtoModel]? = nil, externalIdInfos: [ExternalIdInfoModel]? = nil, parentalRatingOptions: [ParentalRatingModel]? = nil) {
        self.contentType = contentType
        self.contentTypeOptions = contentTypeOptions
        self.countries = countries
        self.cultures = cultures
        self.externalIdInfos = externalIdInfos
        self.parentalRatingOptions = parentalRatingOptions
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        contentType = try decoderContainer.decodeIfPresent("ContentType")
        contentTypeOptions = try decoderContainer.decodeArrayIfPresent("ContentTypeOptions")
        countries = try decoderContainer.decodeArrayIfPresent("Countries")
        cultures = try decoderContainer.decodeArrayIfPresent("Cultures")
        externalIdInfos = try decoderContainer.decodeArrayIfPresent("ExternalIdInfos")
        parentalRatingOptions = try decoderContainer.decodeArrayIfPresent("ParentalRatingOptions")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(contentType, forKey: "ContentType")
        try encoderContainer.encodeIfPresent(contentTypeOptions, forKey: "ContentTypeOptions")
        try encoderContainer.encodeIfPresent(countries, forKey: "Countries")
        try encoderContainer.encodeIfPresent(cultures, forKey: "Cultures")
        try encoderContainer.encodeIfPresent(externalIdInfos, forKey: "ExternalIdInfos")
        try encoderContainer.encodeIfPresent(parentalRatingOptions, forKey: "ParentalRatingOptions")
    }

}
