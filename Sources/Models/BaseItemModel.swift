//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class BaseItem. */
public struct BaseItemModel: APIModel {

    public var container: String?

    public var dateLastSaved: DateTime?

    public var extraIds: [ID]?

    public var height: Int?

    public var isHD: Bool?

    public var isShortcut: Bool?

    /** Gets or sets the remote trailers. */
    public var remoteTrailers: [MediaUrlModel]?

    public var shortcutPath: String?

    public var size: Int?

    public var supportsExternalTransfer: Bool?

    public var width: Int?

    public init(container: String? = nil, dateLastSaved: DateTime? = nil, extraIds: [ID]? = nil, height: Int? = nil, isHD: Bool? = nil, isShortcut: Bool? = nil, remoteTrailers: [MediaUrlModel]? = nil, shortcutPath: String? = nil, size: Int? = nil, supportsExternalTransfer: Bool? = nil, width: Int? = nil) {
        self.container = container
        self.dateLastSaved = dateLastSaved
        self.extraIds = extraIds
        self.height = height
        self.isHD = isHD
        self.isShortcut = isShortcut
        self.remoteTrailers = remoteTrailers
        self.shortcutPath = shortcutPath
        self.size = size
        self.supportsExternalTransfer = supportsExternalTransfer
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        container = try decoderContainer.decodeIfPresent("Container")
        dateLastSaved = try decoderContainer.decodeIfPresent("DateLastSaved")
        extraIds = try decoderContainer.decodeArrayIfPresent("ExtraIds")
        height = try decoderContainer.decodeIfPresent("Height")
        isHD = try decoderContainer.decodeIfPresent("IsHD")
        isShortcut = try decoderContainer.decodeIfPresent("IsShortcut")
        remoteTrailers = try decoderContainer.decodeArrayIfPresent("RemoteTrailers")
        shortcutPath = try decoderContainer.decodeIfPresent("ShortcutPath")
        size = try decoderContainer.decodeIfPresent("Size")
        supportsExternalTransfer = try decoderContainer.decodeIfPresent("SupportsExternalTransfer")
        width = try decoderContainer.decodeIfPresent("Width")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(container, forKey: "Container")
        try encoderContainer.encodeIfPresent(dateLastSaved, forKey: "DateLastSaved")
        try encoderContainer.encodeIfPresent(extraIds, forKey: "ExtraIds")
        try encoderContainer.encodeIfPresent(height, forKey: "Height")
        try encoderContainer.encodeIfPresent(isHD, forKey: "IsHD")
        try encoderContainer.encodeIfPresent(isShortcut, forKey: "IsShortcut")
        try encoderContainer.encodeIfPresent(remoteTrailers, forKey: "RemoteTrailers")
        try encoderContainer.encodeIfPresent(shortcutPath, forKey: "ShortcutPath")
        try encoderContainer.encodeIfPresent(size, forKey: "Size")
        try encoderContainer.encodeIfPresent(supportsExternalTransfer, forKey: "SupportsExternalTransfer")
        try encoderContainer.encodeIfPresent(width, forKey: "Width")
    }

}
