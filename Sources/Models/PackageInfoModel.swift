//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class PackageInfo. */
public struct PackageInfoModel: APIModel {

    /** Gets or sets the category. */
    public var category: String?

    /** Gets or sets a long description of the plugin containing features or helpful explanations. */
    public var description: String?

    /** Gets or sets the guid of the assembly associated with this plugin.
This is used to identify the proper item for automatic updates. */
    public var guid: String?

    /** Gets or sets the image url for the package. */
    public var imageUrl: String?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets a short overview of what the plugin does. */
    public var overview: String?

    /** Gets or sets the owner. */
    public var owner: String?

    /** Gets or sets the versions. */
    public var versions: [VersionInfoModel]?

    public init(category: String? = nil, description: String? = nil, guid: String? = nil, imageUrl: String? = nil, name: String? = nil, overview: String? = nil, owner: String? = nil, versions: [VersionInfoModel]? = nil) {
        self.category = category
        self.description = description
        self.guid = guid
        self.imageUrl = imageUrl
        self.name = name
        self.overview = overview
        self.owner = owner
        self.versions = versions
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        category = try decoderContainer.decodeIfPresent("category")
        description = try decoderContainer.decodeIfPresent("description")
        guid = try decoderContainer.decodeIfPresent("guid")
        imageUrl = try decoderContainer.decodeIfPresent("imageUrl")
        name = try decoderContainer.decodeIfPresent("name")
        overview = try decoderContainer.decodeIfPresent("overview")
        owner = try decoderContainer.decodeIfPresent("owner")
        versions = try decoderContainer.decodeArrayIfPresent("versions")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(category, forKey: "category")
        try encoderContainer.encodeIfPresent(description, forKey: "description")
        try encoderContainer.encodeIfPresent(guid, forKey: "guid")
        try encoderContainer.encodeIfPresent(imageUrl, forKey: "imageUrl")
        try encoderContainer.encodeIfPresent(name, forKey: "name")
        try encoderContainer.encodeIfPresent(overview, forKey: "overview")
        try encoderContainer.encodeIfPresent(owner, forKey: "owner")
        try encoderContainer.encodeIfPresent(versions, forKey: "versions")
    }

}
