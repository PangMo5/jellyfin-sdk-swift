//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class PlayRequest. */
public struct PlayRequestModel: APIModel {

    public var audioStreamIndex: Int?

    /** Gets or sets the controlling user identifier. */
    public var controllingUserId: ID?

    /** Gets or sets the item ids. */
    public var itemIds: [ID]?

    public var mediaSourceId: String?

    public var playCommand: PlayCommand?

    public var startIndex: Int?

    /** Gets or sets the start position ticks that the first item should be played at. */
    public var startPositionTicks: Int?

    public var subtitleStreamIndex: Int?

    public init(audioStreamIndex: Int? = nil, controllingUserId: ID? = nil, itemIds: [ID]? = nil, mediaSourceId: String? = nil, playCommand: PlayCommand? = nil, startIndex: Int? = nil, startPositionTicks: Int? = nil, subtitleStreamIndex: Int? = nil) {
        self.audioStreamIndex = audioStreamIndex
        self.controllingUserId = controllingUserId
        self.itemIds = itemIds
        self.mediaSourceId = mediaSourceId
        self.playCommand = playCommand
        self.startIndex = startIndex
        self.startPositionTicks = startPositionTicks
        self.subtitleStreamIndex = subtitleStreamIndex
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioStreamIndex = try decoderContainer.decodeIfPresent("AudioStreamIndex")
        controllingUserId = try decoderContainer.decodeIfPresent("ControllingUserId")
        itemIds = try decoderContainer.decodeArrayIfPresent("ItemIds")
        mediaSourceId = try decoderContainer.decodeIfPresent("MediaSourceId")
        playCommand = try decoderContainer.decodeIfPresent("PlayCommand")
        startIndex = try decoderContainer.decodeIfPresent("StartIndex")
        startPositionTicks = try decoderContainer.decodeIfPresent("StartPositionTicks")
        subtitleStreamIndex = try decoderContainer.decodeIfPresent("SubtitleStreamIndex")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioStreamIndex, forKey: "AudioStreamIndex")
        try encoderContainer.encodeIfPresent(controllingUserId, forKey: "ControllingUserId")
        try encoderContainer.encodeIfPresent(itemIds, forKey: "ItemIds")
        try encoderContainer.encodeIfPresent(mediaSourceId, forKey: "MediaSourceId")
        try encoderContainer.encodeIfPresent(playCommand, forKey: "PlayCommand")
        try encoderContainer.encodeIfPresent(startIndex, forKey: "StartIndex")
        try encoderContainer.encodeIfPresent(startPositionTicks, forKey: "StartPositionTicks")
        try encoderContainer.encodeIfPresent(subtitleStreamIndex, forKey: "SubtitleStreamIndex")
    }

}
