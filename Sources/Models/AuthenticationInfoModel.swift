//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct AuthenticationInfoModel: APIModel {

    /** Gets or sets the access token. */
    public var accessToken: String?

    /** Gets or sets the name of the application. */
    public var appName: String?

    /** Gets or sets the application version. */
    public var appVersion: String?

    /** Gets or sets the date created. */
    public var dateCreated: DateTime?

    public var dateLastActivity: DateTime?

    /** Gets or sets the date revoked. */
    public var dateRevoked: DateTime?

    /** Gets or sets the device identifier. */
    public var deviceId: String?

    /** Gets or sets the name of the device. */
    public var deviceName: String?

    /** Gets or sets the identifier. */
    public var id: Int?

    /** Gets or sets a value indicating whether this instance is active. */
    public var isActive: Bool?

    /** Gets or sets the user identifier. */
    public var userId: ID?

    public var userName: String?

    public init(accessToken: String? = nil, appName: String? = nil, appVersion: String? = nil, dateCreated: DateTime? = nil, dateLastActivity: DateTime? = nil, dateRevoked: DateTime? = nil, deviceId: String? = nil, deviceName: String? = nil, id: Int? = nil, isActive: Bool? = nil, userId: ID? = nil, userName: String? = nil) {
        self.accessToken = accessToken
        self.appName = appName
        self.appVersion = appVersion
        self.dateCreated = dateCreated
        self.dateLastActivity = dateLastActivity
        self.dateRevoked = dateRevoked
        self.deviceId = deviceId
        self.deviceName = deviceName
        self.id = id
        self.isActive = isActive
        self.userId = userId
        self.userName = userName
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        accessToken = try decoderContainer.decodeIfPresent("AccessToken")
        appName = try decoderContainer.decodeIfPresent("AppName")
        appVersion = try decoderContainer.decodeIfPresent("AppVersion")
        dateCreated = try decoderContainer.decodeIfPresent("DateCreated")
        dateLastActivity = try decoderContainer.decodeIfPresent("DateLastActivity")
        dateRevoked = try decoderContainer.decodeIfPresent("DateRevoked")
        deviceId = try decoderContainer.decodeIfPresent("DeviceId")
        deviceName = try decoderContainer.decodeIfPresent("DeviceName")
        id = try decoderContainer.decodeIfPresent("Id")
        isActive = try decoderContainer.decodeIfPresent("IsActive")
        userId = try decoderContainer.decodeIfPresent("UserId")
        userName = try decoderContainer.decodeIfPresent("UserName")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(accessToken, forKey: "AccessToken")
        try encoderContainer.encodeIfPresent(appName, forKey: "AppName")
        try encoderContainer.encodeIfPresent(appVersion, forKey: "AppVersion")
        try encoderContainer.encodeIfPresent(dateCreated, forKey: "DateCreated")
        try encoderContainer.encodeIfPresent(dateLastActivity, forKey: "DateLastActivity")
        try encoderContainer.encodeIfPresent(dateRevoked, forKey: "DateRevoked")
        try encoderContainer.encodeIfPresent(deviceId, forKey: "DeviceId")
        try encoderContainer.encodeIfPresent(deviceName, forKey: "DeviceName")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(isActive, forKey: "IsActive")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
        try encoderContainer.encodeIfPresent(userName, forKey: "UserName")
    }

}
