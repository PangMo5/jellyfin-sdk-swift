//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct CodecProfileModel: APIModel {

    public var applyConditions: [ProfileConditionModel]?

    public var codec: String?

    public var conditions: [ProfileConditionModel]?

    public var container: String?

    public var type: CodecType?

    public init(applyConditions: [ProfileConditionModel]? = nil, codec: String? = nil, conditions: [ProfileConditionModel]? = nil, container: String? = nil, type: CodecType? = nil) {
        self.applyConditions = applyConditions
        self.codec = codec
        self.conditions = conditions
        self.container = container
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        applyConditions = try decoderContainer.decodeArrayIfPresent("ApplyConditions")
        codec = try decoderContainer.decodeIfPresent("Codec")
        conditions = try decoderContainer.decodeArrayIfPresent("Conditions")
        container = try decoderContainer.decodeIfPresent("Container")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(applyConditions, forKey: "ApplyConditions")
        try encoderContainer.encodeIfPresent(codec, forKey: "Codec")
        try encoderContainer.encodeIfPresent(conditions, forKey: "Conditions")
        try encoderContainer.encodeIfPresent(container, forKey: "Container")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
