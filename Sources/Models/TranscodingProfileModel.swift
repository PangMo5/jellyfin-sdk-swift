//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct TranscodingProfileModel: APIModel {

    public var audioCodec: String?

    public var breakOnNonKeyFrames: Bool?

    public var container: String?

    public var context: EncodingContext?

    public var copyTimestamps: Bool?

    public var enableMpegtsM2TsMode: Bool?

    public var enableSubtitlesInManifest: Bool?

    public var estimateContentLength: Bool?

    public var maxAudioChannels: String?

    public var minSegments: Int?

    public var `protocol`: String?

    public var segmentLength: Int?

    public var transcodeSeekInfo: TranscodeSeekInfo?

    public var type: DlnaProfileType?

    public var videoCodec: String?

    public init(audioCodec: String? = nil, breakOnNonKeyFrames: Bool? = nil, container: String? = nil, context: EncodingContext? = nil, copyTimestamps: Bool? = nil, enableMpegtsM2TsMode: Bool? = nil, enableSubtitlesInManifest: Bool? = nil, estimateContentLength: Bool? = nil, maxAudioChannels: String? = nil, minSegments: Int? = nil, `protocol`: String? = nil, segmentLength: Int? = nil, transcodeSeekInfo: TranscodeSeekInfo? = nil, type: DlnaProfileType? = nil, videoCodec: String? = nil) {
        self.audioCodec = audioCodec
        self.breakOnNonKeyFrames = breakOnNonKeyFrames
        self.container = container
        self.context = context
        self.copyTimestamps = copyTimestamps
        self.enableMpegtsM2TsMode = enableMpegtsM2TsMode
        self.enableSubtitlesInManifest = enableSubtitlesInManifest
        self.estimateContentLength = estimateContentLength
        self.maxAudioChannels = maxAudioChannels
        self.minSegments = minSegments
        self.`protocol` = `protocol`
        self.segmentLength = segmentLength
        self.transcodeSeekInfo = transcodeSeekInfo
        self.type = type
        self.videoCodec = videoCodec
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioCodec = try decoderContainer.decodeIfPresent("AudioCodec")
        breakOnNonKeyFrames = try decoderContainer.decodeIfPresent("BreakOnNonKeyFrames")
        container = try decoderContainer.decodeIfPresent("Container")
        context = try decoderContainer.decodeIfPresent("Context")
        copyTimestamps = try decoderContainer.decodeIfPresent("CopyTimestamps")
        enableMpegtsM2TsMode = try decoderContainer.decodeIfPresent("EnableMpegtsM2TsMode")
        enableSubtitlesInManifest = try decoderContainer.decodeIfPresent("EnableSubtitlesInManifest")
        estimateContentLength = try decoderContainer.decodeIfPresent("EstimateContentLength")
        maxAudioChannels = try decoderContainer.decodeIfPresent("MaxAudioChannels")
        minSegments = try decoderContainer.decodeIfPresent("MinSegments")
        `protocol` = try decoderContainer.decodeIfPresent("Protocol")
        segmentLength = try decoderContainer.decodeIfPresent("SegmentLength")
        transcodeSeekInfo = try decoderContainer.decodeIfPresent("TranscodeSeekInfo")
        type = try decoderContainer.decodeIfPresent("Type")
        videoCodec = try decoderContainer.decodeIfPresent("VideoCodec")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioCodec, forKey: "AudioCodec")
        try encoderContainer.encodeIfPresent(breakOnNonKeyFrames, forKey: "BreakOnNonKeyFrames")
        try encoderContainer.encodeIfPresent(container, forKey: "Container")
        try encoderContainer.encodeIfPresent(context, forKey: "Context")
        try encoderContainer.encodeIfPresent(copyTimestamps, forKey: "CopyTimestamps")
        try encoderContainer.encodeIfPresent(enableMpegtsM2TsMode, forKey: "EnableMpegtsM2TsMode")
        try encoderContainer.encodeIfPresent(enableSubtitlesInManifest, forKey: "EnableSubtitlesInManifest")
        try encoderContainer.encodeIfPresent(estimateContentLength, forKey: "EstimateContentLength")
        try encoderContainer.encodeIfPresent(maxAudioChannels, forKey: "MaxAudioChannels")
        try encoderContainer.encodeIfPresent(minSegments, forKey: "MinSegments")
        try encoderContainer.encodeIfPresent(`protocol`, forKey: "Protocol")
        try encoderContainer.encodeIfPresent(segmentLength, forKey: "SegmentLength")
        try encoderContainer.encodeIfPresent(transcodeSeekInfo, forKey: "TranscodeSeekInfo")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(videoCodec, forKey: "VideoCodec")
    }

}
