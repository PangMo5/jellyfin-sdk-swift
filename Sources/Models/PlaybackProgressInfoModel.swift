//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class PlaybackProgressInfo. */
public struct PlaybackProgressInfoModel: APIModel {

    public var aspectRatio: String?

    /** Gets or sets the index of the audio stream. */
    public var audioStreamIndex: Int?

    public var brightness: Int?

    /** Gets or sets a value indicating whether this instance can seek. */
    public var canSeek: Bool?

    /** Gets or sets a value indicating whether this instance is muted. */
    public var isMuted: Bool?

    /** Gets or sets a value indicating whether this instance is paused. */
    public var isPaused: Bool?

    public var item: BaseItemDtoModel?

    /** Gets or sets the item identifier. */
    public var itemId: ID?

    /** Gets or sets the live stream identifier. */
    public var liveStreamId: String?

    /** Gets or sets the media version identifier. */
    public var mediaSourceId: String?

    public var nowPlayingQueue: [QueueItemModel]?

    public var playMethod: PlayMethod?

    /** Gets or sets the play session identifier. */
    public var playSessionId: String?

    public var playbackStartTimeTicks: Int?

    public var playlistItemId: String?

    /** Gets or sets the position ticks. */
    public var positionTicks: Int?

    public var repeatMode: RepeatMode?

    /** Gets or sets the session id. */
    public var sessionId: String?

    /** Gets or sets the index of the subtitle stream. */
    public var subtitleStreamIndex: Int?

    /** Gets or sets the volume level. */
    public var volumeLevel: Int?

    public init(aspectRatio: String? = nil, audioStreamIndex: Int? = nil, brightness: Int? = nil, canSeek: Bool? = nil, isMuted: Bool? = nil, isPaused: Bool? = nil, item: BaseItemDtoModel? = nil, itemId: ID? = nil, liveStreamId: String? = nil, mediaSourceId: String? = nil, nowPlayingQueue: [QueueItemModel]? = nil, playMethod: PlayMethod? = nil, playSessionId: String? = nil, playbackStartTimeTicks: Int? = nil, playlistItemId: String? = nil, positionTicks: Int? = nil, repeatMode: RepeatMode? = nil, sessionId: String? = nil, subtitleStreamIndex: Int? = nil, volumeLevel: Int? = nil) {
        self.aspectRatio = aspectRatio
        self.audioStreamIndex = audioStreamIndex
        self.brightness = brightness
        self.canSeek = canSeek
        self.isMuted = isMuted
        self.isPaused = isPaused
        self.item = item
        self.itemId = itemId
        self.liveStreamId = liveStreamId
        self.mediaSourceId = mediaSourceId
        self.nowPlayingQueue = nowPlayingQueue
        self.playMethod = playMethod
        self.playSessionId = playSessionId
        self.playbackStartTimeTicks = playbackStartTimeTicks
        self.playlistItemId = playlistItemId
        self.positionTicks = positionTicks
        self.repeatMode = repeatMode
        self.sessionId = sessionId
        self.subtitleStreamIndex = subtitleStreamIndex
        self.volumeLevel = volumeLevel
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        aspectRatio = try decoderContainer.decodeIfPresent("AspectRatio")
        audioStreamIndex = try decoderContainer.decodeIfPresent("AudioStreamIndex")
        brightness = try decoderContainer.decodeIfPresent("Brightness")
        canSeek = try decoderContainer.decodeIfPresent("CanSeek")
        isMuted = try decoderContainer.decodeIfPresent("IsMuted")
        isPaused = try decoderContainer.decodeIfPresent("IsPaused")
        item = try decoderContainer.decodeIfPresent("Item")
        itemId = try decoderContainer.decodeIfPresent("ItemId")
        liveStreamId = try decoderContainer.decodeIfPresent("LiveStreamId")
        mediaSourceId = try decoderContainer.decodeIfPresent("MediaSourceId")
        nowPlayingQueue = try decoderContainer.decodeArrayIfPresent("NowPlayingQueue")
        playMethod = try decoderContainer.decodeIfPresent("PlayMethod")
        playSessionId = try decoderContainer.decodeIfPresent("PlaySessionId")
        playbackStartTimeTicks = try decoderContainer.decodeIfPresent("PlaybackStartTimeTicks")
        playlistItemId = try decoderContainer.decodeIfPresent("PlaylistItemId")
        positionTicks = try decoderContainer.decodeIfPresent("PositionTicks")
        repeatMode = try decoderContainer.decodeIfPresent("RepeatMode")
        sessionId = try decoderContainer.decodeIfPresent("SessionId")
        subtitleStreamIndex = try decoderContainer.decodeIfPresent("SubtitleStreamIndex")
        volumeLevel = try decoderContainer.decodeIfPresent("VolumeLevel")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(aspectRatio, forKey: "AspectRatio")
        try encoderContainer.encodeIfPresent(audioStreamIndex, forKey: "AudioStreamIndex")
        try encoderContainer.encodeIfPresent(brightness, forKey: "Brightness")
        try encoderContainer.encodeIfPresent(canSeek, forKey: "CanSeek")
        try encoderContainer.encodeIfPresent(isMuted, forKey: "IsMuted")
        try encoderContainer.encodeIfPresent(isPaused, forKey: "IsPaused")
        try encoderContainer.encodeIfPresent(item, forKey: "Item")
        try encoderContainer.encodeIfPresent(itemId, forKey: "ItemId")
        try encoderContainer.encodeIfPresent(liveStreamId, forKey: "LiveStreamId")
        try encoderContainer.encodeIfPresent(mediaSourceId, forKey: "MediaSourceId")
        try encoderContainer.encodeIfPresent(nowPlayingQueue, forKey: "NowPlayingQueue")
        try encoderContainer.encodeIfPresent(playMethod, forKey: "PlayMethod")
        try encoderContainer.encodeIfPresent(playSessionId, forKey: "PlaySessionId")
        try encoderContainer.encodeIfPresent(playbackStartTimeTicks, forKey: "PlaybackStartTimeTicks")
        try encoderContainer.encodeIfPresent(playlistItemId, forKey: "PlaylistItemId")
        try encoderContainer.encodeIfPresent(positionTicks, forKey: "PositionTicks")
        try encoderContainer.encodeIfPresent(repeatMode, forKey: "RepeatMode")
        try encoderContainer.encodeIfPresent(sessionId, forKey: "SessionId")
        try encoderContainer.encodeIfPresent(subtitleStreamIndex, forKey: "SubtitleStreamIndex")
        try encoderContainer.encodeIfPresent(volumeLevel, forKey: "VolumeLevel")
    }

}
