//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ClientCapabilitiesModel: APIModel {

    public var appStoreUrl: String?

    public var deviceProfile: DeviceProfileModel?

    public var iconUrl: String?

    public var messageCallbackUrl: String?

    public var playableMediaTypes: [String]?

    public var supportedCommands: [GeneralCommandType]?

    public var supportsContentUploading: Bool?

    public var supportsMediaControl: Bool?

    public var supportsPersistentIdentifier: Bool?

    public var supportsSync: Bool?

    public init(appStoreUrl: String? = nil, deviceProfile: DeviceProfileModel? = nil, iconUrl: String? = nil, messageCallbackUrl: String? = nil, playableMediaTypes: [String]? = nil, supportedCommands: [GeneralCommandType]? = nil, supportsContentUploading: Bool? = nil, supportsMediaControl: Bool? = nil, supportsPersistentIdentifier: Bool? = nil, supportsSync: Bool? = nil) {
        self.appStoreUrl = appStoreUrl
        self.deviceProfile = deviceProfile
        self.iconUrl = iconUrl
        self.messageCallbackUrl = messageCallbackUrl
        self.playableMediaTypes = playableMediaTypes
        self.supportedCommands = supportedCommands
        self.supportsContentUploading = supportsContentUploading
        self.supportsMediaControl = supportsMediaControl
        self.supportsPersistentIdentifier = supportsPersistentIdentifier
        self.supportsSync = supportsSync
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        appStoreUrl = try decoderContainer.decodeIfPresent("AppStoreUrl")
        deviceProfile = try decoderContainer.decodeIfPresent("DeviceProfile")
        iconUrl = try decoderContainer.decodeIfPresent("IconUrl")
        messageCallbackUrl = try decoderContainer.decodeIfPresent("MessageCallbackUrl")
        playableMediaTypes = try decoderContainer.decodeArrayIfPresent("PlayableMediaTypes")
        supportedCommands = try decoderContainer.decodeArrayIfPresent("SupportedCommands")
        supportsContentUploading = try decoderContainer.decodeIfPresent("SupportsContentUploading")
        supportsMediaControl = try decoderContainer.decodeIfPresent("SupportsMediaControl")
        supportsPersistentIdentifier = try decoderContainer.decodeIfPresent("SupportsPersistentIdentifier")
        supportsSync = try decoderContainer.decodeIfPresent("SupportsSync")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(appStoreUrl, forKey: "AppStoreUrl")
        try encoderContainer.encodeIfPresent(deviceProfile, forKey: "DeviceProfile")
        try encoderContainer.encodeIfPresent(iconUrl, forKey: "IconUrl")
        try encoderContainer.encodeIfPresent(messageCallbackUrl, forKey: "MessageCallbackUrl")
        try encoderContainer.encodeIfPresent(playableMediaTypes, forKey: "PlayableMediaTypes")
        try encoderContainer.encodeIfPresent(supportedCommands, forKey: "SupportedCommands")
        try encoderContainer.encodeIfPresent(supportsContentUploading, forKey: "SupportsContentUploading")
        try encoderContainer.encodeIfPresent(supportsMediaControl, forKey: "SupportsMediaControl")
        try encoderContainer.encodeIfPresent(supportsPersistentIdentifier, forKey: "SupportsPersistentIdentifier")
        try encoderContainer.encodeIfPresent(supportsSync, forKey: "SupportsSync")
    }

}
