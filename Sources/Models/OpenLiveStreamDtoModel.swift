//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Open live stream dto. */
public struct OpenLiveStreamDtoModel: APIModel {

    /** Gets or sets the audio stream index. */
    public var audioStreamIndex: Int?

    public var deviceProfile: DeviceProfileModel?

    /** Gets or sets the device play protocols. */
    public var directPlayProtocols: [MediaProtocol]?

    /** Gets or sets a value indicating whether to enable direct play. */
    public var enableDirectPlay: Bool?

    /** Gets or sets a value indicating whether to enale direct stream. */
    public var enableDirectStream: Bool?

    /** Gets or sets the item id. */
    public var itemId: ID?

    /** Gets or sets the max audio channels. */
    public var maxAudioChannels: Int?

    /** Gets or sets the max streaming bitrate. */
    public var maxStreamingBitrate: Int?

    /** Gets or sets the open token. */
    public var openToken: String?

    /** Gets or sets the play session id. */
    public var playSessionId: String?

    /** Gets or sets the start time in ticks. */
    public var startTimeTicks: Int?

    /** Gets or sets the subtitle stream index. */
    public var subtitleStreamIndex: Int?

    /** Gets or sets the user id. */
    public var userId: ID?

    public init(audioStreamIndex: Int? = nil, deviceProfile: DeviceProfileModel? = nil, directPlayProtocols: [MediaProtocol]? = nil, enableDirectPlay: Bool? = nil, enableDirectStream: Bool? = nil, itemId: ID? = nil, maxAudioChannels: Int? = nil, maxStreamingBitrate: Int? = nil, openToken: String? = nil, playSessionId: String? = nil, startTimeTicks: Int? = nil, subtitleStreamIndex: Int? = nil, userId: ID? = nil) {
        self.audioStreamIndex = audioStreamIndex
        self.deviceProfile = deviceProfile
        self.directPlayProtocols = directPlayProtocols
        self.enableDirectPlay = enableDirectPlay
        self.enableDirectStream = enableDirectStream
        self.itemId = itemId
        self.maxAudioChannels = maxAudioChannels
        self.maxStreamingBitrate = maxStreamingBitrate
        self.openToken = openToken
        self.playSessionId = playSessionId
        self.startTimeTicks = startTimeTicks
        self.subtitleStreamIndex = subtitleStreamIndex
        self.userId = userId
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioStreamIndex = try decoderContainer.decodeIfPresent("AudioStreamIndex")
        deviceProfile = try decoderContainer.decodeIfPresent("DeviceProfile")
        directPlayProtocols = try decoderContainer.decodeArrayIfPresent("DirectPlayProtocols")
        enableDirectPlay = try decoderContainer.decodeIfPresent("EnableDirectPlay")
        enableDirectStream = try decoderContainer.decodeIfPresent("EnableDirectStream")
        itemId = try decoderContainer.decodeIfPresent("ItemId")
        maxAudioChannels = try decoderContainer.decodeIfPresent("MaxAudioChannels")
        maxStreamingBitrate = try decoderContainer.decodeIfPresent("MaxStreamingBitrate")
        openToken = try decoderContainer.decodeIfPresent("OpenToken")
        playSessionId = try decoderContainer.decodeIfPresent("PlaySessionId")
        startTimeTicks = try decoderContainer.decodeIfPresent("StartTimeTicks")
        subtitleStreamIndex = try decoderContainer.decodeIfPresent("SubtitleStreamIndex")
        userId = try decoderContainer.decodeIfPresent("UserId")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioStreamIndex, forKey: "AudioStreamIndex")
        try encoderContainer.encodeIfPresent(deviceProfile, forKey: "DeviceProfile")
        try encoderContainer.encodeIfPresent(directPlayProtocols, forKey: "DirectPlayProtocols")
        try encoderContainer.encodeIfPresent(enableDirectPlay, forKey: "EnableDirectPlay")
        try encoderContainer.encodeIfPresent(enableDirectStream, forKey: "EnableDirectStream")
        try encoderContainer.encodeIfPresent(itemId, forKey: "ItemId")
        try encoderContainer.encodeIfPresent(maxAudioChannels, forKey: "MaxAudioChannels")
        try encoderContainer.encodeIfPresent(maxStreamingBitrate, forKey: "MaxStreamingBitrate")
        try encoderContainer.encodeIfPresent(openToken, forKey: "OpenToken")
        try encoderContainer.encodeIfPresent(playSessionId, forKey: "PlaySessionId")
        try encoderContainer.encodeIfPresent(startTimeTicks, forKey: "StartTimeTicks")
        try encoderContainer.encodeIfPresent(subtitleStreamIndex, forKey: "SubtitleStreamIndex")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
    }

}
