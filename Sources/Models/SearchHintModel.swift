//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class SearchHintResult. */
public struct SearchHintModel: APIModel {

    /** Gets or sets the album. */
    public var album: String?

    /** Gets or sets the album artist. */
    public var albumArtist: String?

    public var albumId: ID?

    /** Gets or sets the artists. */
    public var artists: [String]?

    /** Gets or sets the backdrop image item identifier. */
    public var backdropImageItemId: String?

    /** Gets or sets the backdrop image tag. */
    public var backdropImageTag: String?

    /** Gets or sets the channel identifier. */
    public var channelId: ID?

    /** Gets or sets the name of the channel. */
    public var channelName: String?

    public var endDate: DateTime?

    /** Gets or sets the episode count. */
    public var episodeCount: Int?

    public var id: ID?

    /** Gets or sets the index number. */
    public var indexNumber: Int?

    public var isFolder: Bool?

    /** Gets or sets the item id. */
    public var itemId: ID?

    /** Gets or sets the matched term. */
    public var matchedTerm: String?

    /** Gets or sets the type of the media. */
    public var mediaType: String?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets the parent index number. */
    public var parentIndexNumber: Int?

    /** Gets or sets the primary image aspect ratio. */
    public var primaryImageAspectRatio: Double?

    /** Gets or sets the image tag. */
    public var primaryImageTag: String?

    /** Gets or sets the production year. */
    public var productionYear: Int?

    /** Gets or sets the run time ticks. */
    public var runTimeTicks: Int?

    /** Gets or sets the series. */
    public var series: String?

    /** Gets or sets the song count. */
    public var songCount: Int?

    public var startDate: DateTime?

    public var status: String?

    /** Gets or sets the thumb image item identifier. */
    public var thumbImageItemId: String?

    /** Gets or sets the thumb image tag. */
    public var thumbImageTag: String?

    /** Gets or sets the type. */
    public var type: String?

    public init(album: String? = nil, albumArtist: String? = nil, albumId: ID? = nil, artists: [String]? = nil, backdropImageItemId: String? = nil, backdropImageTag: String? = nil, channelId: ID? = nil, channelName: String? = nil, endDate: DateTime? = nil, episodeCount: Int? = nil, id: ID? = nil, indexNumber: Int? = nil, isFolder: Bool? = nil, itemId: ID? = nil, matchedTerm: String? = nil, mediaType: String? = nil, name: String? = nil, parentIndexNumber: Int? = nil, primaryImageAspectRatio: Double? = nil, primaryImageTag: String? = nil, productionYear: Int? = nil, runTimeTicks: Int? = nil, series: String? = nil, songCount: Int? = nil, startDate: DateTime? = nil, status: String? = nil, thumbImageItemId: String? = nil, thumbImageTag: String? = nil, type: String? = nil) {
        self.album = album
        self.albumArtist = albumArtist
        self.albumId = albumId
        self.artists = artists
        self.backdropImageItemId = backdropImageItemId
        self.backdropImageTag = backdropImageTag
        self.channelId = channelId
        self.channelName = channelName
        self.endDate = endDate
        self.episodeCount = episodeCount
        self.id = id
        self.indexNumber = indexNumber
        self.isFolder = isFolder
        self.itemId = itemId
        self.matchedTerm = matchedTerm
        self.mediaType = mediaType
        self.name = name
        self.parentIndexNumber = parentIndexNumber
        self.primaryImageAspectRatio = primaryImageAspectRatio
        self.primaryImageTag = primaryImageTag
        self.productionYear = productionYear
        self.runTimeTicks = runTimeTicks
        self.series = series
        self.songCount = songCount
        self.startDate = startDate
        self.status = status
        self.thumbImageItemId = thumbImageItemId
        self.thumbImageTag = thumbImageTag
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        album = try decoderContainer.decodeIfPresent("Album")
        albumArtist = try decoderContainer.decodeIfPresent("AlbumArtist")
        albumId = try decoderContainer.decodeIfPresent("AlbumId")
        artists = try decoderContainer.decodeArrayIfPresent("Artists")
        backdropImageItemId = try decoderContainer.decodeIfPresent("BackdropImageItemId")
        backdropImageTag = try decoderContainer.decodeIfPresent("BackdropImageTag")
        channelId = try decoderContainer.decodeIfPresent("ChannelId")
        channelName = try decoderContainer.decodeIfPresent("ChannelName")
        endDate = try decoderContainer.decodeIfPresent("EndDate")
        episodeCount = try decoderContainer.decodeIfPresent("EpisodeCount")
        id = try decoderContainer.decodeIfPresent("Id")
        indexNumber = try decoderContainer.decodeIfPresent("IndexNumber")
        isFolder = try decoderContainer.decodeIfPresent("IsFolder")
        itemId = try decoderContainer.decodeIfPresent("ItemId")
        matchedTerm = try decoderContainer.decodeIfPresent("MatchedTerm")
        mediaType = try decoderContainer.decodeIfPresent("MediaType")
        name = try decoderContainer.decodeIfPresent("Name")
        parentIndexNumber = try decoderContainer.decodeIfPresent("ParentIndexNumber")
        primaryImageAspectRatio = try decoderContainer.decodeIfPresent("PrimaryImageAspectRatio")
        primaryImageTag = try decoderContainer.decodeIfPresent("PrimaryImageTag")
        productionYear = try decoderContainer.decodeIfPresent("ProductionYear")
        runTimeTicks = try decoderContainer.decodeIfPresent("RunTimeTicks")
        series = try decoderContainer.decodeIfPresent("Series")
        songCount = try decoderContainer.decodeIfPresent("SongCount")
        startDate = try decoderContainer.decodeIfPresent("StartDate")
        status = try decoderContainer.decodeIfPresent("Status")
        thumbImageItemId = try decoderContainer.decodeIfPresent("ThumbImageItemId")
        thumbImageTag = try decoderContainer.decodeIfPresent("ThumbImageTag")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(album, forKey: "Album")
        try encoderContainer.encodeIfPresent(albumArtist, forKey: "AlbumArtist")
        try encoderContainer.encodeIfPresent(albumId, forKey: "AlbumId")
        try encoderContainer.encodeIfPresent(artists, forKey: "Artists")
        try encoderContainer.encodeIfPresent(backdropImageItemId, forKey: "BackdropImageItemId")
        try encoderContainer.encodeIfPresent(backdropImageTag, forKey: "BackdropImageTag")
        try encoderContainer.encodeIfPresent(channelId, forKey: "ChannelId")
        try encoderContainer.encodeIfPresent(channelName, forKey: "ChannelName")
        try encoderContainer.encodeIfPresent(endDate, forKey: "EndDate")
        try encoderContainer.encodeIfPresent(episodeCount, forKey: "EpisodeCount")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(indexNumber, forKey: "IndexNumber")
        try encoderContainer.encodeIfPresent(isFolder, forKey: "IsFolder")
        try encoderContainer.encodeIfPresent(itemId, forKey: "ItemId")
        try encoderContainer.encodeIfPresent(matchedTerm, forKey: "MatchedTerm")
        try encoderContainer.encodeIfPresent(mediaType, forKey: "MediaType")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(parentIndexNumber, forKey: "ParentIndexNumber")
        try encoderContainer.encodeIfPresent(primaryImageAspectRatio, forKey: "PrimaryImageAspectRatio")
        try encoderContainer.encodeIfPresent(primaryImageTag, forKey: "PrimaryImageTag")
        try encoderContainer.encodeIfPresent(productionYear, forKey: "ProductionYear")
        try encoderContainer.encodeIfPresent(runTimeTicks, forKey: "RunTimeTicks")
        try encoderContainer.encodeIfPresent(series, forKey: "Series")
        try encoderContainer.encodeIfPresent(songCount, forKey: "SongCount")
        try encoderContainer.encodeIfPresent(startDate, forKey: "StartDate")
        try encoderContainer.encodeIfPresent(status, forKey: "Status")
        try encoderContainer.encodeIfPresent(thumbImageItemId, forKey: "ThumbImageItemId")
        try encoderContainer.encodeIfPresent(thumbImageTag, forKey: "ThumbImageTag")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
