//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Stores the result of an incoming quick connect request. */
public struct QuickConnectResultModel: APIModel {

    /** Gets a value indicating whether this request is authorized. */
    public var authenticated: Bool?

    /** Gets or sets the private access token. */
    public var authentication: String?

    /** Gets or sets the user facing code used so the user can quickly differentiate this request from others. */
    public var code: String?

    /** Gets or sets the DateTime that this request was created. */
    public var dateAdded: DateTime?

    /** Gets or sets an error message. */
    public var error: String?

    /** Gets or sets the secret value used to uniquely identify this request. Can be used to retrieve authentication information. */
    public var secret: String?

    public init(authenticated: Bool? = nil, authentication: String? = nil, code: String? = nil, dateAdded: DateTime? = nil, error: String? = nil, secret: String? = nil) {
        self.authenticated = authenticated
        self.authentication = authentication
        self.code = code
        self.dateAdded = dateAdded
        self.error = error
        self.secret = secret
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        authenticated = try decoderContainer.decodeIfPresent("Authenticated")
        authentication = try decoderContainer.decodeIfPresent("Authentication")
        code = try decoderContainer.decodeIfPresent("Code")
        dateAdded = try decoderContainer.decodeIfPresent("DateAdded")
        error = try decoderContainer.decodeIfPresent("Error")
        secret = try decoderContainer.decodeIfPresent("Secret")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(authenticated, forKey: "Authenticated")
        try encoderContainer.encodeIfPresent(authentication, forKey: "Authentication")
        try encoderContainer.encodeIfPresent(code, forKey: "Code")
        try encoderContainer.encodeIfPresent(dateAdded, forKey: "DateAdded")
        try encoderContainer.encodeIfPresent(error, forKey: "Error")
        try encoderContainer.encodeIfPresent(secret, forKey: "Secret")
    }

}
