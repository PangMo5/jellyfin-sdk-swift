//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ResponseProfileModel: APIModel {

    public var audioCodec: String?

    public var conditions: [ProfileConditionModel]?

    public var container: String?

    public var mimeType: String?

    public var orgPn: String?

    public var type: DlnaProfileType?

    public var videoCodec: String?

    public init(audioCodec: String? = nil, conditions: [ProfileConditionModel]? = nil, container: String? = nil, mimeType: String? = nil, orgPn: String? = nil, type: DlnaProfileType? = nil, videoCodec: String? = nil) {
        self.audioCodec = audioCodec
        self.conditions = conditions
        self.container = container
        self.mimeType = mimeType
        self.orgPn = orgPn
        self.type = type
        self.videoCodec = videoCodec
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioCodec = try decoderContainer.decodeIfPresent("AudioCodec")
        conditions = try decoderContainer.decodeArrayIfPresent("Conditions")
        container = try decoderContainer.decodeIfPresent("Container")
        mimeType = try decoderContainer.decodeIfPresent("MimeType")
        orgPn = try decoderContainer.decodeIfPresent("OrgPn")
        type = try decoderContainer.decodeIfPresent("Type")
        videoCodec = try decoderContainer.decodeIfPresent("VideoCodec")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioCodec, forKey: "AudioCodec")
        try encoderContainer.encodeIfPresent(conditions, forKey: "Conditions")
        try encoderContainer.encodeIfPresent(container, forKey: "Container")
        try encoderContainer.encodeIfPresent(mimeType, forKey: "MimeType")
        try encoderContainer.encodeIfPresent(orgPn, forKey: "OrgPn")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(videoCodec, forKey: "VideoCodec")
    }

}
