//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The notification DTO. */
public struct NotificationDtoModel: APIModel {

    /** Gets or sets the notification date. */
    public var date: DateTime?

    /** Gets or sets the notification's description. Defaults to an empty string. */
    public var description: String?

    /** Gets or sets the notification ID. Defaults to an empty string. */
    public var id: String?

    /** Gets or sets a value indicating whether the notification has been read. Defaults to false. */
    public var isRead: Bool?

    public var level: NotificationLevel?

    /** Gets or sets the notification's name. Defaults to an empty string. */
    public var name: String?

    /** Gets or sets the notification's URL. Defaults to an empty string. */
    public var url: String?

    /** Gets or sets the notification's user ID. Defaults to an empty string. */
    public var userId: String?

    public init(date: DateTime? = nil, description: String? = nil, id: String? = nil, isRead: Bool? = nil, level: NotificationLevel? = nil, name: String? = nil, url: String? = nil, userId: String? = nil) {
        self.date = date
        self.description = description
        self.id = id
        self.isRead = isRead
        self.level = level
        self.name = name
        self.url = url
        self.userId = userId
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        date = try decoderContainer.decodeIfPresent("Date")
        description = try decoderContainer.decodeIfPresent("Description")
        id = try decoderContainer.decodeIfPresent("Id")
        isRead = try decoderContainer.decodeIfPresent("IsRead")
        level = try decoderContainer.decodeIfPresent("Level")
        name = try decoderContainer.decodeIfPresent("Name")
        url = try decoderContainer.decodeIfPresent("Url")
        userId = try decoderContainer.decodeIfPresent("UserId")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(date, forKey: "Date")
        try encoderContainer.encodeIfPresent(description, forKey: "Description")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(isRead, forKey: "IsRead")
        try encoderContainer.encodeIfPresent(level, forKey: "Level")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(url, forKey: "Url")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
    }

}
