//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines the MediaBrowser.Model.Updates.VersionInfo class. */
public struct VersionInfoModel: APIModel {

    public var versionNumber: VersionModel?

    /** Gets or sets the changelog for this version. */
    public var changelog: String?

    /** Gets or sets a checksum for the binary. */
    public var checksum: String?

    /** Gets or sets the repository name. */
    public var repositoryName: String?

    /** Gets or sets the repository url. */
    public var repositoryUrl: String?

    /** Gets or sets the source URL. */
    public var sourceUrl: String?

    /** Gets or sets the ABI that this version was built against. */
    public var targetAbi: String?

    /** Gets or sets a timestamp of when the binary was built. */
    public var timestamp: String?

    /** Gets or sets the version. */
    public var version: String?

    public init(versionNumber: VersionModel? = nil, changelog: String? = nil, checksum: String? = nil, repositoryName: String? = nil, repositoryUrl: String? = nil, sourceUrl: String? = nil, targetAbi: String? = nil, timestamp: String? = nil, version: String? = nil) {
        self.versionNumber = versionNumber
        self.changelog = changelog
        self.checksum = checksum
        self.repositoryName = repositoryName
        self.repositoryUrl = repositoryUrl
        self.sourceUrl = sourceUrl
        self.targetAbi = targetAbi
        self.timestamp = timestamp
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        versionNumber = try decoderContainer.decodeIfPresent("VersionNumber")
        changelog = try decoderContainer.decodeIfPresent("changelog")
        checksum = try decoderContainer.decodeIfPresent("checksum")
        repositoryName = try decoderContainer.decodeIfPresent("repositoryName")
        repositoryUrl = try decoderContainer.decodeIfPresent("repositoryUrl")
        sourceUrl = try decoderContainer.decodeIfPresent("sourceUrl")
        targetAbi = try decoderContainer.decodeIfPresent("targetAbi")
        timestamp = try decoderContainer.decodeIfPresent("timestamp")
        version = try decoderContainer.decodeIfPresent("version")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(versionNumber, forKey: "VersionNumber")
        try encoderContainer.encodeIfPresent(changelog, forKey: "changelog")
        try encoderContainer.encodeIfPresent(checksum, forKey: "checksum")
        try encoderContainer.encodeIfPresent(repositoryName, forKey: "repositoryName")
        try encoderContainer.encodeIfPresent(repositoryUrl, forKey: "repositoryUrl")
        try encoderContainer.encodeIfPresent(sourceUrl, forKey: "sourceUrl")
        try encoderContainer.encodeIfPresent(targetAbi, forKey: "targetAbi")
        try encoderContainer.encodeIfPresent(timestamp, forKey: "timestamp")
        try encoderContainer.encodeIfPresent(version, forKey: "version")
    }

}
