//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Library options result dto. */
public struct LibraryOptionsResultDtoModel: APIModel {

    /** Gets or sets the metadata readers. */
    public var metadataReaders: [LibraryOptionInfoDtoModel]?

    /** Gets or sets the metadata savers. */
    public var metadataSavers: [LibraryOptionInfoDtoModel]?

    /** Gets or sets the subtitle fetchers. */
    public var subtitleFetchers: [LibraryOptionInfoDtoModel]?

    /** Gets or sets the type options. */
    public var typeOptions: [LibraryTypeOptionsDtoModel]?

    public init(metadataReaders: [LibraryOptionInfoDtoModel]? = nil, metadataSavers: [LibraryOptionInfoDtoModel]? = nil, subtitleFetchers: [LibraryOptionInfoDtoModel]? = nil, typeOptions: [LibraryTypeOptionsDtoModel]? = nil) {
        self.metadataReaders = metadataReaders
        self.metadataSavers = metadataSavers
        self.subtitleFetchers = subtitleFetchers
        self.typeOptions = typeOptions
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        metadataReaders = try decoderContainer.decodeArrayIfPresent("MetadataReaders")
        metadataSavers = try decoderContainer.decodeArrayIfPresent("MetadataSavers")
        subtitleFetchers = try decoderContainer.decodeArrayIfPresent("SubtitleFetchers")
        typeOptions = try decoderContainer.decodeArrayIfPresent("TypeOptions")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(metadataReaders, forKey: "MetadataReaders")
        try encoderContainer.encodeIfPresent(metadataSavers, forKey: "MetadataSavers")
        try encoderContainer.encodeIfPresent(subtitleFetchers, forKey: "SubtitleFetchers")
        try encoderContainer.encodeIfPresent(typeOptions, forKey: "TypeOptions")
    }

}
