//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The update user password request body. */
public struct UpdateUserPasswordModel: APIModel {

    /** Gets or sets the current sha1-hashed password. */
    public var currentPassword: String?

    /** Gets or sets the current plain text password. */
    public var currentPw: String?

    /** Gets or sets the new plain text password. */
    public var newPw: String?

    /** Gets or sets a value indicating whether to reset the password. */
    public var resetPassword: Bool?

    public init(currentPassword: String? = nil, currentPw: String? = nil, newPw: String? = nil, resetPassword: Bool? = nil) {
        self.currentPassword = currentPassword
        self.currentPw = currentPw
        self.newPw = newPw
        self.resetPassword = resetPassword
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        currentPassword = try decoderContainer.decodeIfPresent("CurrentPassword")
        currentPw = try decoderContainer.decodeIfPresent("CurrentPw")
        newPw = try decoderContainer.decodeIfPresent("NewPw")
        resetPassword = try decoderContainer.decodeIfPresent("ResetPassword")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(currentPassword, forKey: "CurrentPassword")
        try encoderContainer.encodeIfPresent(currentPw, forKey: "CurrentPw")
        try encoderContainer.encodeIfPresent(newPw, forKey: "NewPw")
        try encoderContainer.encodeIfPresent(resetPassword, forKey: "ResetPassword")
    }

}
