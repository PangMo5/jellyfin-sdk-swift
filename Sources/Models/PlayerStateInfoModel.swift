//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct PlayerStateInfoModel: APIModel {

    /** Gets or sets the index of the now playing audio stream. */
    public var audioStreamIndex: Int?

    /** Gets or sets a value indicating whether this instance can seek. */
    public var canSeek: Bool?

    /** Gets or sets a value indicating whether this instance is muted. */
    public var isMuted: Bool?

    /** Gets or sets a value indicating whether this instance is paused. */
    public var isPaused: Bool?

    /** Gets or sets the now playing media version identifier. */
    public var mediaSourceId: String?

    public var playMethod: PlayMethod?

    /** Gets or sets the now playing position ticks. */
    public var positionTicks: Int?

    public var repeatMode: RepeatMode?

    /** Gets or sets the index of the now playing subtitle stream. */
    public var subtitleStreamIndex: Int?

    /** Gets or sets the volume level. */
    public var volumeLevel: Int?

    public init(audioStreamIndex: Int? = nil, canSeek: Bool? = nil, isMuted: Bool? = nil, isPaused: Bool? = nil, mediaSourceId: String? = nil, playMethod: PlayMethod? = nil, positionTicks: Int? = nil, repeatMode: RepeatMode? = nil, subtitleStreamIndex: Int? = nil, volumeLevel: Int? = nil) {
        self.audioStreamIndex = audioStreamIndex
        self.canSeek = canSeek
        self.isMuted = isMuted
        self.isPaused = isPaused
        self.mediaSourceId = mediaSourceId
        self.playMethod = playMethod
        self.positionTicks = positionTicks
        self.repeatMode = repeatMode
        self.subtitleStreamIndex = subtitleStreamIndex
        self.volumeLevel = volumeLevel
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioStreamIndex = try decoderContainer.decodeIfPresent("AudioStreamIndex")
        canSeek = try decoderContainer.decodeIfPresent("CanSeek")
        isMuted = try decoderContainer.decodeIfPresent("IsMuted")
        isPaused = try decoderContainer.decodeIfPresent("IsPaused")
        mediaSourceId = try decoderContainer.decodeIfPresent("MediaSourceId")
        playMethod = try decoderContainer.decodeIfPresent("PlayMethod")
        positionTicks = try decoderContainer.decodeIfPresent("PositionTicks")
        repeatMode = try decoderContainer.decodeIfPresent("RepeatMode")
        subtitleStreamIndex = try decoderContainer.decodeIfPresent("SubtitleStreamIndex")
        volumeLevel = try decoderContainer.decodeIfPresent("VolumeLevel")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioStreamIndex, forKey: "AudioStreamIndex")
        try encoderContainer.encodeIfPresent(canSeek, forKey: "CanSeek")
        try encoderContainer.encodeIfPresent(isMuted, forKey: "IsMuted")
        try encoderContainer.encodeIfPresent(isPaused, forKey: "IsPaused")
        try encoderContainer.encodeIfPresent(mediaSourceId, forKey: "MediaSourceId")
        try encoderContainer.encodeIfPresent(playMethod, forKey: "PlayMethod")
        try encoderContainer.encodeIfPresent(positionTicks, forKey: "PositionTicks")
        try encoderContainer.encodeIfPresent(repeatMode, forKey: "RepeatMode")
        try encoderContainer.encodeIfPresent(subtitleStreamIndex, forKey: "SubtitleStreamIndex")
        try encoderContainer.encodeIfPresent(volumeLevel, forKey: "VolumeLevel")
    }

}
