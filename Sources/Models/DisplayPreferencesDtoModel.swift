//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines the display preferences for any item that supports them (usually Folders). */
public struct DisplayPreferencesDtoModel: APIModel {

    /** Gets or sets the client. */
    public var client: String?

    /** Gets or sets the custom prefs. */
    public var customPrefs: [String: String]?

    /** Gets or sets the user id. */
    public var id: String?

    /** Gets or sets the index by. */
    public var indexBy: String?

    /** Gets or sets the height of the primary image. */
    public var primaryImageHeight: Int?

    /** Gets or sets the width of the primary image. */
    public var primaryImageWidth: Int?

    /** Gets or sets a value indicating whether [remember indexing]. */
    public var rememberIndexing: Bool?

    /** Gets or sets a value indicating whether [remember sorting]. */
    public var rememberSorting: Bool?

    public var scrollDirection: ScrollDirection?

    /** Gets or sets a value indicating whether to show backdrops on this item. */
    public var showBackdrop: Bool?

    /** Gets or sets a value indicating whether [show sidebar]. */
    public var showSidebar: Bool?

    /** Gets or sets the sort by. */
    public var sortBy: String?

    public var sortOrder: SortOrder?

    /** Gets or sets the type of the view. */
    public var viewType: String?

    public init(client: String? = nil, customPrefs: [String: String]? = nil, id: String? = nil, indexBy: String? = nil, primaryImageHeight: Int? = nil, primaryImageWidth: Int? = nil, rememberIndexing: Bool? = nil, rememberSorting: Bool? = nil, scrollDirection: ScrollDirection? = nil, showBackdrop: Bool? = nil, showSidebar: Bool? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, viewType: String? = nil) {
        self.client = client
        self.customPrefs = customPrefs
        self.id = id
        self.indexBy = indexBy
        self.primaryImageHeight = primaryImageHeight
        self.primaryImageWidth = primaryImageWidth
        self.rememberIndexing = rememberIndexing
        self.rememberSorting = rememberSorting
        self.scrollDirection = scrollDirection
        self.showBackdrop = showBackdrop
        self.showSidebar = showSidebar
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.viewType = viewType
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        client = try decoderContainer.decodeIfPresent("Client")
        customPrefs = try decoderContainer.decodeIfPresent("CustomPrefs")
        id = try decoderContainer.decodeIfPresent("Id")
        indexBy = try decoderContainer.decodeIfPresent("IndexBy")
        primaryImageHeight = try decoderContainer.decodeIfPresent("PrimaryImageHeight")
        primaryImageWidth = try decoderContainer.decodeIfPresent("PrimaryImageWidth")
        rememberIndexing = try decoderContainer.decodeIfPresent("RememberIndexing")
        rememberSorting = try decoderContainer.decodeIfPresent("RememberSorting")
        scrollDirection = try decoderContainer.decodeIfPresent("ScrollDirection")
        showBackdrop = try decoderContainer.decodeIfPresent("ShowBackdrop")
        showSidebar = try decoderContainer.decodeIfPresent("ShowSidebar")
        sortBy = try decoderContainer.decodeIfPresent("SortBy")
        sortOrder = try decoderContainer.decodeIfPresent("SortOrder")
        viewType = try decoderContainer.decodeIfPresent("ViewType")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(client, forKey: "Client")
        try encoderContainer.encodeIfPresent(customPrefs, forKey: "CustomPrefs")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(indexBy, forKey: "IndexBy")
        try encoderContainer.encodeIfPresent(primaryImageHeight, forKey: "PrimaryImageHeight")
        try encoderContainer.encodeIfPresent(primaryImageWidth, forKey: "PrimaryImageWidth")
        try encoderContainer.encodeIfPresent(rememberIndexing, forKey: "RememberIndexing")
        try encoderContainer.encodeIfPresent(rememberSorting, forKey: "RememberSorting")
        try encoderContainer.encodeIfPresent(scrollDirection, forKey: "ScrollDirection")
        try encoderContainer.encodeIfPresent(showBackdrop, forKey: "ShowBackdrop")
        try encoderContainer.encodeIfPresent(showSidebar, forKey: "ShowSidebar")
        try encoderContainer.encodeIfPresent(sortBy, forKey: "SortBy")
        try encoderContainer.encodeIfPresent(sortOrder, forKey: "SortOrder")
        try encoderContainer.encodeIfPresent(viewType, forKey: "ViewType")
    }

}
