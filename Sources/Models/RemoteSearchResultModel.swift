//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct RemoteSearchResultModel: APIModel {

    public var albumArtist: RemoteSearchResultModel?

    public var artists: [RemoteSearchResultModel]?

    public var imageUrl: String?

    public var indexNumber: Int?

    public var indexNumberEnd: Int?

    /** Gets or sets the name. */
    public var name: String?

    public var overview: String?

    public var parentIndexNumber: Int?

    public var premiereDate: DateTime?

    /** Gets or sets the year. */
    public var productionYear: Int?

    /** Gets or sets the provider ids. */
    public var providerIds: [String: String]?

    public var searchProviderName: String?

    public init(albumArtist: RemoteSearchResultModel? = nil, artists: [RemoteSearchResultModel]? = nil, imageUrl: String? = nil, indexNumber: Int? = nil, indexNumberEnd: Int? = nil, name: String? = nil, overview: String? = nil, parentIndexNumber: Int? = nil, premiereDate: DateTime? = nil, productionYear: Int? = nil, providerIds: [String: String]? = nil, searchProviderName: String? = nil) {
        self.albumArtist = albumArtist
        self.artists = artists
        self.imageUrl = imageUrl
        self.indexNumber = indexNumber
        self.indexNumberEnd = indexNumberEnd
        self.name = name
        self.overview = overview
        self.parentIndexNumber = parentIndexNumber
        self.premiereDate = premiereDate
        self.productionYear = productionYear
        self.providerIds = providerIds
        self.searchProviderName = searchProviderName
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        albumArtist = try decoderContainer.decodeIfPresent("AlbumArtist")
        artists = try decoderContainer.decodeArrayIfPresent("Artists")
        imageUrl = try decoderContainer.decodeIfPresent("ImageUrl")
        indexNumber = try decoderContainer.decodeIfPresent("IndexNumber")
        indexNumberEnd = try decoderContainer.decodeIfPresent("IndexNumberEnd")
        name = try decoderContainer.decodeIfPresent("Name")
        overview = try decoderContainer.decodeIfPresent("Overview")
        parentIndexNumber = try decoderContainer.decodeIfPresent("ParentIndexNumber")
        premiereDate = try decoderContainer.decodeIfPresent("PremiereDate")
        productionYear = try decoderContainer.decodeIfPresent("ProductionYear")
        providerIds = try decoderContainer.decodeIfPresent("ProviderIds")
        searchProviderName = try decoderContainer.decodeIfPresent("SearchProviderName")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(albumArtist, forKey: "AlbumArtist")
        try encoderContainer.encodeIfPresent(artists, forKey: "Artists")
        try encoderContainer.encodeIfPresent(imageUrl, forKey: "ImageUrl")
        try encoderContainer.encodeIfPresent(indexNumber, forKey: "IndexNumber")
        try encoderContainer.encodeIfPresent(indexNumberEnd, forKey: "IndexNumberEnd")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(overview, forKey: "Overview")
        try encoderContainer.encodeIfPresent(parentIndexNumber, forKey: "ParentIndexNumber")
        try encoderContainer.encodeIfPresent(premiereDate, forKey: "PremiereDate")
        try encoderContainer.encodeIfPresent(productionYear, forKey: "ProductionYear")
        try encoderContainer.encodeIfPresent(providerIds, forKey: "ProviderIds")
        try encoderContainer.encodeIfPresent(searchProviderName, forKey: "SearchProviderName")
    }

}
