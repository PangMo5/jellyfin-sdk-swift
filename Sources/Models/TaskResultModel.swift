//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class TaskExecutionInfo. */
public struct TaskResultModel: APIModel {

    /** Gets or sets the end time UTC. */
    public var endTimeUtc: DateTime?

    /** Gets or sets the error message. */
    public var errorMessage: String?

    /** Gets or sets the id. */
    public var id: String?

    /** Gets or sets the key. */
    public var key: String?

    /** Gets or sets the long error message. */
    public var longErrorMessage: String?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets the start time UTC. */
    public var startTimeUtc: DateTime?

    public var status: TaskCompletionStatus?

    public init(endTimeUtc: DateTime? = nil, errorMessage: String? = nil, id: String? = nil, key: String? = nil, longErrorMessage: String? = nil, name: String? = nil, startTimeUtc: DateTime? = nil, status: TaskCompletionStatus? = nil) {
        self.endTimeUtc = endTimeUtc
        self.errorMessage = errorMessage
        self.id = id
        self.key = key
        self.longErrorMessage = longErrorMessage
        self.name = name
        self.startTimeUtc = startTimeUtc
        self.status = status
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        endTimeUtc = try decoderContainer.decodeIfPresent("EndTimeUtc")
        errorMessage = try decoderContainer.decodeIfPresent("ErrorMessage")
        id = try decoderContainer.decodeIfPresent("Id")
        key = try decoderContainer.decodeIfPresent("Key")
        longErrorMessage = try decoderContainer.decodeIfPresent("LongErrorMessage")
        name = try decoderContainer.decodeIfPresent("Name")
        startTimeUtc = try decoderContainer.decodeIfPresent("StartTimeUtc")
        status = try decoderContainer.decodeIfPresent("Status")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(endTimeUtc, forKey: "EndTimeUtc")
        try encoderContainer.encodeIfPresent(errorMessage, forKey: "ErrorMessage")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(key, forKey: "Key")
        try encoderContainer.encodeIfPresent(longErrorMessage, forKey: "LongErrorMessage")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(startTimeUtc, forKey: "StartTimeUtc")
        try encoderContainer.encodeIfPresent(status, forKey: "Status")
    }

}
