//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Plabyback info dto. */
public struct PlaybackInfoDtoModel: APIModel {

    /** Gets or sets a value indicating whether to allow audio stream copy. */
    public var allowAudioStreamCopy: Bool?

    /** Gets or sets a value indicating whether to enable video stream copy. */
    public var allowVideoStreamCopy: Bool?

    /** Gets or sets the audio stream index. */
    public var audioStreamIndex: Int?

    /** Gets or sets a value indicating whether to auto open the live stream. */
    public var autoOpenLiveStream: Bool?

    public var deviceProfile: DeviceProfileModel?

    /** Gets or sets a value indicating whether to enable direct play. */
    public var enableDirectPlay: Bool?

    /** Gets or sets a value indicating whether to enable direct stream. */
    public var enableDirectStream: Bool?

    /** Gets or sets a value indicating whether to enable transcoding. */
    public var enableTranscoding: Bool?

    /** Gets or sets the live stream id. */
    public var liveStreamId: String?

    /** Gets or sets the max audio channels. */
    public var maxAudioChannels: Int?

    /** Gets or sets the max streaming bitrate. */
    public var maxStreamingBitrate: Int?

    /** Gets or sets the media source id. */
    public var mediaSourceId: String?

    /** Gets or sets the start time in ticks. */
    public var startTimeTicks: Int?

    /** Gets or sets the subtitle stream index. */
    public var subtitleStreamIndex: Int?

    /** Gets or sets the playback userId. */
    public var userId: ID?

    public init(allowAudioStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, audioStreamIndex: Int? = nil, autoOpenLiveStream: Bool? = nil, deviceProfile: DeviceProfileModel? = nil, enableDirectPlay: Bool? = nil, enableDirectStream: Bool? = nil, enableTranscoding: Bool? = nil, liveStreamId: String? = nil, maxAudioChannels: Int? = nil, maxStreamingBitrate: Int? = nil, mediaSourceId: String? = nil, startTimeTicks: Int? = nil, subtitleStreamIndex: Int? = nil, userId: ID? = nil) {
        self.allowAudioStreamCopy = allowAudioStreamCopy
        self.allowVideoStreamCopy = allowVideoStreamCopy
        self.audioStreamIndex = audioStreamIndex
        self.autoOpenLiveStream = autoOpenLiveStream
        self.deviceProfile = deviceProfile
        self.enableDirectPlay = enableDirectPlay
        self.enableDirectStream = enableDirectStream
        self.enableTranscoding = enableTranscoding
        self.liveStreamId = liveStreamId
        self.maxAudioChannels = maxAudioChannels
        self.maxStreamingBitrate = maxStreamingBitrate
        self.mediaSourceId = mediaSourceId
        self.startTimeTicks = startTimeTicks
        self.subtitleStreamIndex = subtitleStreamIndex
        self.userId = userId
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        allowAudioStreamCopy = try decoderContainer.decodeIfPresent("AllowAudioStreamCopy")
        allowVideoStreamCopy = try decoderContainer.decodeIfPresent("AllowVideoStreamCopy")
        audioStreamIndex = try decoderContainer.decodeIfPresent("AudioStreamIndex")
        autoOpenLiveStream = try decoderContainer.decodeIfPresent("AutoOpenLiveStream")
        deviceProfile = try decoderContainer.decodeIfPresent("DeviceProfile")
        enableDirectPlay = try decoderContainer.decodeIfPresent("EnableDirectPlay")
        enableDirectStream = try decoderContainer.decodeIfPresent("EnableDirectStream")
        enableTranscoding = try decoderContainer.decodeIfPresent("EnableTranscoding")
        liveStreamId = try decoderContainer.decodeIfPresent("LiveStreamId")
        maxAudioChannels = try decoderContainer.decodeIfPresent("MaxAudioChannels")
        maxStreamingBitrate = try decoderContainer.decodeIfPresent("MaxStreamingBitrate")
        mediaSourceId = try decoderContainer.decodeIfPresent("MediaSourceId")
        startTimeTicks = try decoderContainer.decodeIfPresent("StartTimeTicks")
        subtitleStreamIndex = try decoderContainer.decodeIfPresent("SubtitleStreamIndex")
        userId = try decoderContainer.decodeIfPresent("UserId")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(allowAudioStreamCopy, forKey: "AllowAudioStreamCopy")
        try encoderContainer.encodeIfPresent(allowVideoStreamCopy, forKey: "AllowVideoStreamCopy")
        try encoderContainer.encodeIfPresent(audioStreamIndex, forKey: "AudioStreamIndex")
        try encoderContainer.encodeIfPresent(autoOpenLiveStream, forKey: "AutoOpenLiveStream")
        try encoderContainer.encodeIfPresent(deviceProfile, forKey: "DeviceProfile")
        try encoderContainer.encodeIfPresent(enableDirectPlay, forKey: "EnableDirectPlay")
        try encoderContainer.encodeIfPresent(enableDirectStream, forKey: "EnableDirectStream")
        try encoderContainer.encodeIfPresent(enableTranscoding, forKey: "EnableTranscoding")
        try encoderContainer.encodeIfPresent(liveStreamId, forKey: "LiveStreamId")
        try encoderContainer.encodeIfPresent(maxAudioChannels, forKey: "MaxAudioChannels")
        try encoderContainer.encodeIfPresent(maxStreamingBitrate, forKey: "MaxStreamingBitrate")
        try encoderContainer.encodeIfPresent(mediaSourceId, forKey: "MediaSourceId")
        try encoderContainer.encodeIfPresent(startTimeTicks, forKey: "StartTimeTicks")
        try encoderContainer.encodeIfPresent(subtitleStreamIndex, forKey: "SubtitleStreamIndex")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
    }

}
