//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ProblemDetailsModel: APIModel {

    public var detail: String?

    public var instance: String?

    public var status: Int?

    public var title: String?

    public var type: String?

    public var additionalProperties: [String: AnyCodable] = [:]

    public init(detail: String? = nil, instance: String? = nil, status: Int? = nil, title: String? = nil, type: String? = nil) {
        self.detail = detail
        self.instance = instance
        self.status = status
        self.title = title
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        detail = try decoderContainer.decodeIfPresent("detail")
        instance = try decoderContainer.decodeIfPresent("instance")
        status = try decoderContainer.decodeIfPresent("status")
        title = try decoderContainer.decodeIfPresent("title")
        type = try decoderContainer.decodeIfPresent("type")

        let additionalPropertiesContainer = try decoder.container(keyedBy: StringCodingKey.self)
        var additionalProperties = try additionalPropertiesContainer.toDictionary()
        additionalProperties.removeValue(forKey: "detail")
        additionalProperties.removeValue(forKey: "instance")
        additionalProperties.removeValue(forKey: "status")
        additionalProperties.removeValue(forKey: "title")
        additionalProperties.removeValue(forKey: "type")
        var decodedAdditionalProperties: [String: AnyCodable] = [:]
        for key in additionalProperties.keys {
            decodedAdditionalProperties[key] = try additionalPropertiesContainer.decode(StringCodingKey(string: key))
        }
        self.additionalProperties = decodedAdditionalProperties
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(detail, forKey: "detail")
        try encoderContainer.encodeIfPresent(instance, forKey: "instance")
        try encoderContainer.encodeIfPresent(status, forKey: "status")
        try encoderContainer.encodeIfPresent(title, forKey: "title")
        try encoderContainer.encodeIfPresent(type, forKey: "type")

        var additionalPropertiesContainer = encoder.container(keyedBy: StringCodingKey.self)
        for (key, value) in additionalProperties {
            try additionalPropertiesContainer.encode(value, forKey: StringCodingKey(string: key))
        }
    }

    public subscript(key: String) -> AnyCodable? {
        get {
            return additionalProperties[key]
        }
        set {
            additionalProperties[key] = newValue
        }
    }

}
