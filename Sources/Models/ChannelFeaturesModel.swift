//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ChannelFeaturesModel: APIModel {

    /** Gets or sets the automatic refresh levels. */
    public var autoRefreshLevels: Int?

    /** Gets or sets a value indicating whether this instance can filter. */
    public var canFilter: Bool?

    /** Gets or sets a value indicating whether this instance can search. */
    public var canSearch: Bool?

    /** Gets or sets the content types. */
    public var contentTypes: [ChannelMediaContentType]?

    /** Gets or sets the default sort orders. */
    public var defaultSortFields: [ChannelItemSortField]?

    /** Gets or sets the identifier. */
    public var id: String?

    /** Represents the maximum number of records the channel allows retrieving at a time. */
    public var maxPageSize: Int?

    /** Gets or sets the media types. */
    public var mediaTypes: [ChannelMediaType]?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets a value indicating whether [supports content downloading]. */
    public var supportsContentDownloading: Bool?

    /** Gets or sets a value indicating whether [supports latest media]. */
    public var supportsLatestMedia: Bool?

    /** Indicates if a sort ascending/descending toggle is supported or not. */
    public var supportsSortOrderToggle: Bool?

    public init(autoRefreshLevels: Int? = nil, canFilter: Bool? = nil, canSearch: Bool? = nil, contentTypes: [ChannelMediaContentType]? = nil, defaultSortFields: [ChannelItemSortField]? = nil, id: String? = nil, maxPageSize: Int? = nil, mediaTypes: [ChannelMediaType]? = nil, name: String? = nil, supportsContentDownloading: Bool? = nil, supportsLatestMedia: Bool? = nil, supportsSortOrderToggle: Bool? = nil) {
        self.autoRefreshLevels = autoRefreshLevels
        self.canFilter = canFilter
        self.canSearch = canSearch
        self.contentTypes = contentTypes
        self.defaultSortFields = defaultSortFields
        self.id = id
        self.maxPageSize = maxPageSize
        self.mediaTypes = mediaTypes
        self.name = name
        self.supportsContentDownloading = supportsContentDownloading
        self.supportsLatestMedia = supportsLatestMedia
        self.supportsSortOrderToggle = supportsSortOrderToggle
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        autoRefreshLevels = try decoderContainer.decodeIfPresent("AutoRefreshLevels")
        canFilter = try decoderContainer.decodeIfPresent("CanFilter")
        canSearch = try decoderContainer.decodeIfPresent("CanSearch")
        contentTypes = try decoderContainer.decodeArrayIfPresent("ContentTypes")
        defaultSortFields = try decoderContainer.decodeArrayIfPresent("DefaultSortFields")
        id = try decoderContainer.decodeIfPresent("Id")
        maxPageSize = try decoderContainer.decodeIfPresent("MaxPageSize")
        mediaTypes = try decoderContainer.decodeArrayIfPresent("MediaTypes")
        name = try decoderContainer.decodeIfPresent("Name")
        supportsContentDownloading = try decoderContainer.decodeIfPresent("SupportsContentDownloading")
        supportsLatestMedia = try decoderContainer.decodeIfPresent("SupportsLatestMedia")
        supportsSortOrderToggle = try decoderContainer.decodeIfPresent("SupportsSortOrderToggle")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(autoRefreshLevels, forKey: "AutoRefreshLevels")
        try encoderContainer.encodeIfPresent(canFilter, forKey: "CanFilter")
        try encoderContainer.encodeIfPresent(canSearch, forKey: "CanSearch")
        try encoderContainer.encodeIfPresent(contentTypes, forKey: "ContentTypes")
        try encoderContainer.encodeIfPresent(defaultSortFields, forKey: "DefaultSortFields")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(maxPageSize, forKey: "MaxPageSize")
        try encoderContainer.encodeIfPresent(mediaTypes, forKey: "MediaTypes")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(supportsContentDownloading, forKey: "SupportsContentDownloading")
        try encoderContainer.encodeIfPresent(supportsLatestMedia, forKey: "SupportsLatestMedia")
        try encoderContainer.encodeIfPresent(supportsSortOrderToggle, forKey: "SupportsSortOrderToggle")
    }

}
