//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class ImageInfo. */
public struct ImageInfoModel: APIModel {

    /** Gets or sets the blurhash. */
    public var blurHash: String?

    /** Gets or sets the height. */
    public var height: Int?

    /** Gets or sets the index of the image. */
    public var imageIndex: Int?

    /** Gets or sets the image tag. */
    public var imageTag: String?

    public var imageType: ImageType?

    /** Gets or sets the path. */
    public var path: String?

    /** Gets or sets the size. */
    public var size: Int?

    /** Gets or sets the width. */
    public var width: Int?

    public init(blurHash: String? = nil, height: Int? = nil, imageIndex: Int? = nil, imageTag: String? = nil, imageType: ImageType? = nil, path: String? = nil, size: Int? = nil, width: Int? = nil) {
        self.blurHash = blurHash
        self.height = height
        self.imageIndex = imageIndex
        self.imageTag = imageTag
        self.imageType = imageType
        self.path = path
        self.size = size
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        blurHash = try decoderContainer.decodeIfPresent("BlurHash")
        height = try decoderContainer.decodeIfPresent("Height")
        imageIndex = try decoderContainer.decodeIfPresent("ImageIndex")
        imageTag = try decoderContainer.decodeIfPresent("ImageTag")
        imageType = try decoderContainer.decodeIfPresent("ImageType")
        path = try decoderContainer.decodeIfPresent("Path")
        size = try decoderContainer.decodeIfPresent("Size")
        width = try decoderContainer.decodeIfPresent("Width")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(blurHash, forKey: "BlurHash")
        try encoderContainer.encodeIfPresent(height, forKey: "Height")
        try encoderContainer.encodeIfPresent(imageIndex, forKey: "ImageIndex")
        try encoderContainer.encodeIfPresent(imageTag, forKey: "ImageTag")
        try encoderContainer.encodeIfPresent(imageType, forKey: "ImageType")
        try encoderContainer.encodeIfPresent(path, forKey: "Path")
        try encoderContainer.encodeIfPresent(size, forKey: "Size")
        try encoderContainer.encodeIfPresent(width, forKey: "Width")
    }

}
