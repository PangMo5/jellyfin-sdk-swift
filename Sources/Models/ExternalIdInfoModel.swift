//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents the external id information for serialization to the client. */
public struct ExternalIdInfoModel: APIModel {

    /** Gets or sets the unique key for this id. This key should be unique across all providers. */
    public var key: String?

    /** Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc). */
    public var name: String?

    public var type: ExternalIdMediaType?

    /** Gets or sets the URL format string. */
    public var urlFormatString: String?

    public init(key: String? = nil, name: String? = nil, type: ExternalIdMediaType? = nil, urlFormatString: String? = nil) {
        self.key = key
        self.name = name
        self.type = type
        self.urlFormatString = urlFormatString
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        key = try decoderContainer.decodeIfPresent("Key")
        name = try decoderContainer.decodeIfPresent("Name")
        type = try decoderContainer.decodeIfPresent("Type")
        urlFormatString = try decoderContainer.decodeIfPresent("UrlFormatString")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(key, forKey: "Key")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(urlFormatString, forKey: "UrlFormatString")
    }

}
