//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct SeriesInfoRemoteSearchQueryModel: APIModel {

    /** Gets or sets a value indicating whether disabled providers should be included. */
    public var includeDisabledProviders: Bool?

    public var itemId: ID?

    public var searchInfo: SeriesInfoModel?

    /** Will only search within the given provider when set. */
    public var searchProviderName: String?

    public init(includeDisabledProviders: Bool? = nil, itemId: ID? = nil, searchInfo: SeriesInfoModel? = nil, searchProviderName: String? = nil) {
        self.includeDisabledProviders = includeDisabledProviders
        self.itemId = itemId
        self.searchInfo = searchInfo
        self.searchProviderName = searchProviderName
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        includeDisabledProviders = try decoderContainer.decodeIfPresent("IncludeDisabledProviders")
        itemId = try decoderContainer.decodeIfPresent("ItemId")
        searchInfo = try decoderContainer.decodeIfPresent("SearchInfo")
        searchProviderName = try decoderContainer.decodeIfPresent("SearchProviderName")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(includeDisabledProviders, forKey: "IncludeDisabledProviders")
        try encoderContainer.encodeIfPresent(itemId, forKey: "ItemId")
        try encoderContainer.encodeIfPresent(searchInfo, forKey: "SearchInfo")
        try encoderContainer.encodeIfPresent(searchProviderName, forKey: "SearchProviderName")
    }

}
