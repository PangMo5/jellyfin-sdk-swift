//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct TimerInfoDtoModel: APIModel {

    /** ChannelId of the recording. */
    public var channelId: ID?

    /** ChannelName of the recording. */
    public var channelName: String?

    public var channelPrimaryImageTag: String?

    /** The end date of the recording, in UTC. */
    public var endDate: DateTime?

    /** Gets or sets the external channel identifier. */
    public var externalChannelId: String?

    /** Gets or sets the external identifier. */
    public var externalId: String?

    /** Gets or sets the external program identifier. */
    public var externalProgramId: String?

    /** Gets or sets the external series timer identifier. */
    public var externalSeriesTimerId: String?

    /** Id of the recording. */
    public var id: String?

    /** Gets or sets a value indicating whether this instance is post padding required. */
    public var isPostPaddingRequired: Bool?

    /** Gets or sets a value indicating whether this instance is pre padding required. */
    public var isPrePaddingRequired: Bool?

    public var keepUntil: KeepUntil?

    /** Name of the recording. */
    public var name: String?

    /** Description of the recording. */
    public var overview: String?

    /** Gets or sets the parent backdrop image tags. */
    public var parentBackdropImageTags: [String]?

    /** If the item does not have any backdrops, this will hold the Id of the Parent that has one. */
    public var parentBackdropItemId: String?

    /** Gets or sets the post padding seconds. */
    public var postPaddingSeconds: Int?

    /** Gets or sets the pre padding seconds. */
    public var prePaddingSeconds: Int?

    /** Gets or sets the priority. */
    public var priority: Int?

    /** Gets or sets the program identifier. */
    public var programId: String?

    public var programInfo: BaseItemDtoModel?

    /** Gets or sets the run time ticks. */
    public var runTimeTicks: Int?

    /** Gets or sets the series timer identifier. */
    public var seriesTimerId: String?

    /** Gets or sets the server identifier. */
    public var serverId: String?

    /** Gets or sets the name of the service. */
    public var serviceName: String?

    /** The start date of the recording, in UTC. */
    public var startDate: DateTime?

    public var status: RecordingStatus?

    public var type: String?

    public init(channelId: ID? = nil, channelName: String? = nil, channelPrimaryImageTag: String? = nil, endDate: DateTime? = nil, externalChannelId: String? = nil, externalId: String? = nil, externalProgramId: String? = nil, externalSeriesTimerId: String? = nil, id: String? = nil, isPostPaddingRequired: Bool? = nil, isPrePaddingRequired: Bool? = nil, keepUntil: KeepUntil? = nil, name: String? = nil, overview: String? = nil, parentBackdropImageTags: [String]? = nil, parentBackdropItemId: String? = nil, postPaddingSeconds: Int? = nil, prePaddingSeconds: Int? = nil, priority: Int? = nil, programId: String? = nil, programInfo: BaseItemDtoModel? = nil, runTimeTicks: Int? = nil, seriesTimerId: String? = nil, serverId: String? = nil, serviceName: String? = nil, startDate: DateTime? = nil, status: RecordingStatus? = nil, type: String? = nil) {
        self.channelId = channelId
        self.channelName = channelName
        self.channelPrimaryImageTag = channelPrimaryImageTag
        self.endDate = endDate
        self.externalChannelId = externalChannelId
        self.externalId = externalId
        self.externalProgramId = externalProgramId
        self.externalSeriesTimerId = externalSeriesTimerId
        self.id = id
        self.isPostPaddingRequired = isPostPaddingRequired
        self.isPrePaddingRequired = isPrePaddingRequired
        self.keepUntil = keepUntil
        self.name = name
        self.overview = overview
        self.parentBackdropImageTags = parentBackdropImageTags
        self.parentBackdropItemId = parentBackdropItemId
        self.postPaddingSeconds = postPaddingSeconds
        self.prePaddingSeconds = prePaddingSeconds
        self.priority = priority
        self.programId = programId
        self.programInfo = programInfo
        self.runTimeTicks = runTimeTicks
        self.seriesTimerId = seriesTimerId
        self.serverId = serverId
        self.serviceName = serviceName
        self.startDate = startDate
        self.status = status
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        channelId = try decoderContainer.decodeIfPresent("ChannelId")
        channelName = try decoderContainer.decodeIfPresent("ChannelName")
        channelPrimaryImageTag = try decoderContainer.decodeIfPresent("ChannelPrimaryImageTag")
        endDate = try decoderContainer.decodeIfPresent("EndDate")
        externalChannelId = try decoderContainer.decodeIfPresent("ExternalChannelId")
        externalId = try decoderContainer.decodeIfPresent("ExternalId")
        externalProgramId = try decoderContainer.decodeIfPresent("ExternalProgramId")
        externalSeriesTimerId = try decoderContainer.decodeIfPresent("ExternalSeriesTimerId")
        id = try decoderContainer.decodeIfPresent("Id")
        isPostPaddingRequired = try decoderContainer.decodeIfPresent("IsPostPaddingRequired")
        isPrePaddingRequired = try decoderContainer.decodeIfPresent("IsPrePaddingRequired")
        keepUntil = try decoderContainer.decodeIfPresent("KeepUntil")
        name = try decoderContainer.decodeIfPresent("Name")
        overview = try decoderContainer.decodeIfPresent("Overview")
        parentBackdropImageTags = try decoderContainer.decodeArrayIfPresent("ParentBackdropImageTags")
        parentBackdropItemId = try decoderContainer.decodeIfPresent("ParentBackdropItemId")
        postPaddingSeconds = try decoderContainer.decodeIfPresent("PostPaddingSeconds")
        prePaddingSeconds = try decoderContainer.decodeIfPresent("PrePaddingSeconds")
        priority = try decoderContainer.decodeIfPresent("Priority")
        programId = try decoderContainer.decodeIfPresent("ProgramId")
        programInfo = try decoderContainer.decodeIfPresent("ProgramInfo")
        runTimeTicks = try decoderContainer.decodeIfPresent("RunTimeTicks")
        seriesTimerId = try decoderContainer.decodeIfPresent("SeriesTimerId")
        serverId = try decoderContainer.decodeIfPresent("ServerId")
        serviceName = try decoderContainer.decodeIfPresent("ServiceName")
        startDate = try decoderContainer.decodeIfPresent("StartDate")
        status = try decoderContainer.decodeIfPresent("Status")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(channelId, forKey: "ChannelId")
        try encoderContainer.encodeIfPresent(channelName, forKey: "ChannelName")
        try encoderContainer.encodeIfPresent(channelPrimaryImageTag, forKey: "ChannelPrimaryImageTag")
        try encoderContainer.encodeIfPresent(endDate, forKey: "EndDate")
        try encoderContainer.encodeIfPresent(externalChannelId, forKey: "ExternalChannelId")
        try encoderContainer.encodeIfPresent(externalId, forKey: "ExternalId")
        try encoderContainer.encodeIfPresent(externalProgramId, forKey: "ExternalProgramId")
        try encoderContainer.encodeIfPresent(externalSeriesTimerId, forKey: "ExternalSeriesTimerId")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(isPostPaddingRequired, forKey: "IsPostPaddingRequired")
        try encoderContainer.encodeIfPresent(isPrePaddingRequired, forKey: "IsPrePaddingRequired")
        try encoderContainer.encodeIfPresent(keepUntil, forKey: "KeepUntil")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(overview, forKey: "Overview")
        try encoderContainer.encodeIfPresent(parentBackdropImageTags, forKey: "ParentBackdropImageTags")
        try encoderContainer.encodeIfPresent(parentBackdropItemId, forKey: "ParentBackdropItemId")
        try encoderContainer.encodeIfPresent(postPaddingSeconds, forKey: "PostPaddingSeconds")
        try encoderContainer.encodeIfPresent(prePaddingSeconds, forKey: "PrePaddingSeconds")
        try encoderContainer.encodeIfPresent(priority, forKey: "Priority")
        try encoderContainer.encodeIfPresent(programId, forKey: "ProgramId")
        try encoderContainer.encodeIfPresent(programInfo, forKey: "ProgramInfo")
        try encoderContainer.encodeIfPresent(runTimeTicks, forKey: "RunTimeTicks")
        try encoderContainer.encodeIfPresent(seriesTimerId, forKey: "SeriesTimerId")
        try encoderContainer.encodeIfPresent(serverId, forKey: "ServerId")
        try encoderContainer.encodeIfPresent(serviceName, forKey: "ServiceName")
        try encoderContainer.encodeIfPresent(startDate, forKey: "StartDate")
        try encoderContainer.encodeIfPresent(status, forKey: "Status")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
