//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ActivityLogEntryModel: APIModel {

    /** Gets or sets the date. */
    public var date: DateTime?

    /** Gets or sets the identifier. */
    public var id: Int?

    /** Gets or sets the item identifier. */
    public var itemId: String?

    /** Gets or sets the name. */
    public var name: String?

    /** Gets or sets the overview. */
    public var overview: String?

    public var severity: LogLevel?

    /** Gets or sets the short overview. */
    public var shortOverview: String?

    /** Gets or sets the type. */
    public var type: String?

    /** Gets or sets the user identifier. */
    public var userId: ID?

    /** Gets or sets the user primary image tag. */
    public var userPrimaryImageTag: String?

    public init(date: DateTime? = nil, id: Int? = nil, itemId: String? = nil, name: String? = nil, overview: String? = nil, severity: LogLevel? = nil, shortOverview: String? = nil, type: String? = nil, userId: ID? = nil, userPrimaryImageTag: String? = nil) {
        self.date = date
        self.id = id
        self.itemId = itemId
        self.name = name
        self.overview = overview
        self.severity = severity
        self.shortOverview = shortOverview
        self.type = type
        self.userId = userId
        self.userPrimaryImageTag = userPrimaryImageTag
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        date = try decoderContainer.decodeIfPresent("Date")
        id = try decoderContainer.decodeIfPresent("Id")
        itemId = try decoderContainer.decodeIfPresent("ItemId")
        name = try decoderContainer.decodeIfPresent("Name")
        overview = try decoderContainer.decodeIfPresent("Overview")
        severity = try decoderContainer.decodeIfPresent("Severity")
        shortOverview = try decoderContainer.decodeIfPresent("ShortOverview")
        type = try decoderContainer.decodeIfPresent("Type")
        userId = try decoderContainer.decodeIfPresent("UserId")
        userPrimaryImageTag = try decoderContainer.decodeIfPresent("UserPrimaryImageTag")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(date, forKey: "Date")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(itemId, forKey: "ItemId")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(overview, forKey: "Overview")
        try encoderContainer.encodeIfPresent(severity, forKey: "Severity")
        try encoderContainer.encodeIfPresent(shortOverview, forKey: "ShortOverview")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
        try encoderContainer.encodeIfPresent(userPrimaryImageTag, forKey: "UserPrimaryImageTag")
    }

}
