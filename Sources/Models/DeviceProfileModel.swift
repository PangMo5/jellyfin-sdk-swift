//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines the MediaBrowser.Model.Dlna.DeviceProfile. */
public struct DeviceProfileModel: APIModel {

    /** Gets or sets the AlbumArtPn. */
    public var albumArtPn: String?

    /** Gets or sets the CodecProfiles. */
    public var codecProfiles: [CodecProfileModel]?

    /** Gets or sets the ContainerProfiles. */
    public var containerProfiles: [ContainerProfileModel]?

    /** Gets or sets the direct play profiles. */
    public var directPlayProfiles: [DirectPlayProfileModel]?

    /** Gets or sets a value indicating whether EnableAlbumArtInDidl. */
    public var enableAlbumArtInDidl: Bool?

    /** Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar. */
    public var enableMSMediaReceiverRegistrar: Bool?

    /** Gets or sets a value indicating whether EnableSingleAlbumArtLimit. */
    public var enableSingleAlbumArtLimit: Bool?

    /** Gets or sets a value indicating whether EnableSingleSubtitleLimit. */
    public var enableSingleSubtitleLimit: Bool?

    /** Gets or sets the FriendlyName. */
    public var friendlyName: String?

    /** Gets or sets the Id. */
    public var id: String?

    public var identification: DeviceIdentificationModel?

    /** Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests. */
    public var ignoreTranscodeByteRangeRequests: Bool?

    /** Gets or sets the Manufacturer. */
    public var manufacturer: String?

    /** Gets or sets the ManufacturerUrl. */
    public var manufacturerUrl: String?

    /** Gets or sets the MaxAlbumArtHeight. */
    public var maxAlbumArtHeight: Int?

    /** Gets or sets the MaxAlbumArtWidth. */
    public var maxAlbumArtWidth: Int?

    /** Gets or sets the MaxIconHeight. */
    public var maxIconHeight: Int?

    /** Gets or sets the MaxIconWidth. */
    public var maxIconWidth: Int?

    /** Gets or sets the MaxStaticBitrate. */
    public var maxStaticBitrate: Int?

    /** Gets or sets the MaxStaticMusicBitrate. */
    public var maxStaticMusicBitrate: Int?

    /** Gets or sets the MaxStreamingBitrate. */
    public var maxStreamingBitrate: Int?

    /** Gets or sets the ModelDescription. */
    public var modelDescription: String?

    /** Gets or sets the ModelName. */
    public var modelName: String?

    /** Gets or sets the ModelNumber. */
    public var modelNumber: String?

    /** Gets or sets the ModelUrl. */
    public var modelUrl: String?

    /** Gets or sets the MusicStreamingTranscodingBitrate. */
    public var musicStreamingTranscodingBitrate: Int?

    /** Gets or sets the Name. */
    public var name: String?

    /** Gets or sets the ProtocolInfo. */
    public var protocolInfo: String?

    /** Gets or sets a value indicating whether RequiresPlainFolders. */
    public var requiresPlainFolders: Bool?

    /** Gets or sets a value indicating whether RequiresPlainVideoItems. */
    public var requiresPlainVideoItems: Bool?

    /** Gets or sets the ResponseProfiles. */
    public var responseProfiles: [ResponseProfileModel]?

    /** Gets or sets the SerialNumber. */
    public var serialNumber: String?

    /** Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace. */
    public var sonyAggregationFlags: String?

    /** Gets or sets the SubtitleProfiles. */
    public var subtitleProfiles: [SubtitleProfileModel]?

    /** Gets or sets the SupportedMediaTypes. */
    public var supportedMediaTypes: String?

    /** Gets or sets the TimelineOffsetSeconds. */
    public var timelineOffsetSeconds: Int?

    /** Gets or sets the transcoding profiles. */
    public var transcodingProfiles: [TranscodingProfileModel]?

    /** Gets or sets the UserId. */
    public var userId: String?

    /** Gets or sets the XmlRootAttributes. */
    public var xmlRootAttributes: [XmlAttributeModel]?

    public init(albumArtPn: String? = nil, codecProfiles: [CodecProfileModel]? = nil, containerProfiles: [ContainerProfileModel]? = nil, directPlayProfiles: [DirectPlayProfileModel]? = nil, enableAlbumArtInDidl: Bool? = nil, enableMSMediaReceiverRegistrar: Bool? = nil, enableSingleAlbumArtLimit: Bool? = nil, enableSingleSubtitleLimit: Bool? = nil, friendlyName: String? = nil, id: String? = nil, identification: DeviceIdentificationModel? = nil, ignoreTranscodeByteRangeRequests: Bool? = nil, manufacturer: String? = nil, manufacturerUrl: String? = nil, maxAlbumArtHeight: Int? = nil, maxAlbumArtWidth: Int? = nil, maxIconHeight: Int? = nil, maxIconWidth: Int? = nil, maxStaticBitrate: Int? = nil, maxStaticMusicBitrate: Int? = nil, maxStreamingBitrate: Int? = nil, modelDescription: String? = nil, modelName: String? = nil, modelNumber: String? = nil, modelUrl: String? = nil, musicStreamingTranscodingBitrate: Int? = nil, name: String? = nil, protocolInfo: String? = nil, requiresPlainFolders: Bool? = nil, requiresPlainVideoItems: Bool? = nil, responseProfiles: [ResponseProfileModel]? = nil, serialNumber: String? = nil, sonyAggregationFlags: String? = nil, subtitleProfiles: [SubtitleProfileModel]? = nil, supportedMediaTypes: String? = nil, timelineOffsetSeconds: Int? = nil, transcodingProfiles: [TranscodingProfileModel]? = nil, userId: String? = nil, xmlRootAttributes: [XmlAttributeModel]? = nil) {
        self.albumArtPn = albumArtPn
        self.codecProfiles = codecProfiles
        self.containerProfiles = containerProfiles
        self.directPlayProfiles = directPlayProfiles
        self.enableAlbumArtInDidl = enableAlbumArtInDidl
        self.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar
        self.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit
        self.enableSingleSubtitleLimit = enableSingleSubtitleLimit
        self.friendlyName = friendlyName
        self.id = id
        self.identification = identification
        self.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests
        self.manufacturer = manufacturer
        self.manufacturerUrl = manufacturerUrl
        self.maxAlbumArtHeight = maxAlbumArtHeight
        self.maxAlbumArtWidth = maxAlbumArtWidth
        self.maxIconHeight = maxIconHeight
        self.maxIconWidth = maxIconWidth
        self.maxStaticBitrate = maxStaticBitrate
        self.maxStaticMusicBitrate = maxStaticMusicBitrate
        self.maxStreamingBitrate = maxStreamingBitrate
        self.modelDescription = modelDescription
        self.modelName = modelName
        self.modelNumber = modelNumber
        self.modelUrl = modelUrl
        self.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate
        self.name = name
        self.protocolInfo = protocolInfo
        self.requiresPlainFolders = requiresPlainFolders
        self.requiresPlainVideoItems = requiresPlainVideoItems
        self.responseProfiles = responseProfiles
        self.serialNumber = serialNumber
        self.sonyAggregationFlags = sonyAggregationFlags
        self.subtitleProfiles = subtitleProfiles
        self.supportedMediaTypes = supportedMediaTypes
        self.timelineOffsetSeconds = timelineOffsetSeconds
        self.transcodingProfiles = transcodingProfiles
        self.userId = userId
        self.xmlRootAttributes = xmlRootAttributes
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        albumArtPn = try decoderContainer.decodeIfPresent("AlbumArtPn")
        codecProfiles = try decoderContainer.decodeArrayIfPresent("CodecProfiles")
        containerProfiles = try decoderContainer.decodeArrayIfPresent("ContainerProfiles")
        directPlayProfiles = try decoderContainer.decodeArrayIfPresent("DirectPlayProfiles")
        enableAlbumArtInDidl = try decoderContainer.decodeIfPresent("EnableAlbumArtInDidl")
        enableMSMediaReceiverRegistrar = try decoderContainer.decodeIfPresent("EnableMSMediaReceiverRegistrar")
        enableSingleAlbumArtLimit = try decoderContainer.decodeIfPresent("EnableSingleAlbumArtLimit")
        enableSingleSubtitleLimit = try decoderContainer.decodeIfPresent("EnableSingleSubtitleLimit")
        friendlyName = try decoderContainer.decodeIfPresent("FriendlyName")
        id = try decoderContainer.decodeIfPresent("Id")
        identification = try decoderContainer.decodeIfPresent("Identification")
        ignoreTranscodeByteRangeRequests = try decoderContainer.decodeIfPresent("IgnoreTranscodeByteRangeRequests")
        manufacturer = try decoderContainer.decodeIfPresent("Manufacturer")
        manufacturerUrl = try decoderContainer.decodeIfPresent("ManufacturerUrl")
        maxAlbumArtHeight = try decoderContainer.decodeIfPresent("MaxAlbumArtHeight")
        maxAlbumArtWidth = try decoderContainer.decodeIfPresent("MaxAlbumArtWidth")
        maxIconHeight = try decoderContainer.decodeIfPresent("MaxIconHeight")
        maxIconWidth = try decoderContainer.decodeIfPresent("MaxIconWidth")
        maxStaticBitrate = try decoderContainer.decodeIfPresent("MaxStaticBitrate")
        maxStaticMusicBitrate = try decoderContainer.decodeIfPresent("MaxStaticMusicBitrate")
        maxStreamingBitrate = try decoderContainer.decodeIfPresent("MaxStreamingBitrate")
        modelDescription = try decoderContainer.decodeIfPresent("ModelDescription")
        modelName = try decoderContainer.decodeIfPresent("ModelName")
        modelNumber = try decoderContainer.decodeIfPresent("ModelNumber")
        modelUrl = try decoderContainer.decodeIfPresent("ModelUrl")
        musicStreamingTranscodingBitrate = try decoderContainer.decodeIfPresent("MusicStreamingTranscodingBitrate")
        name = try decoderContainer.decodeIfPresent("Name")
        protocolInfo = try decoderContainer.decodeIfPresent("ProtocolInfo")
        requiresPlainFolders = try decoderContainer.decodeIfPresent("RequiresPlainFolders")
        requiresPlainVideoItems = try decoderContainer.decodeIfPresent("RequiresPlainVideoItems")
        responseProfiles = try decoderContainer.decodeArrayIfPresent("ResponseProfiles")
        serialNumber = try decoderContainer.decodeIfPresent("SerialNumber")
        sonyAggregationFlags = try decoderContainer.decodeIfPresent("SonyAggregationFlags")
        subtitleProfiles = try decoderContainer.decodeArrayIfPresent("SubtitleProfiles")
        supportedMediaTypes = try decoderContainer.decodeIfPresent("SupportedMediaTypes")
        timelineOffsetSeconds = try decoderContainer.decodeIfPresent("TimelineOffsetSeconds")
        transcodingProfiles = try decoderContainer.decodeArrayIfPresent("TranscodingProfiles")
        userId = try decoderContainer.decodeIfPresent("UserId")
        xmlRootAttributes = try decoderContainer.decodeArrayIfPresent("XmlRootAttributes")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(albumArtPn, forKey: "AlbumArtPn")
        try encoderContainer.encodeIfPresent(codecProfiles, forKey: "CodecProfiles")
        try encoderContainer.encodeIfPresent(containerProfiles, forKey: "ContainerProfiles")
        try encoderContainer.encodeIfPresent(directPlayProfiles, forKey: "DirectPlayProfiles")
        try encoderContainer.encodeIfPresent(enableAlbumArtInDidl, forKey: "EnableAlbumArtInDidl")
        try encoderContainer.encodeIfPresent(enableMSMediaReceiverRegistrar, forKey: "EnableMSMediaReceiverRegistrar")
        try encoderContainer.encodeIfPresent(enableSingleAlbumArtLimit, forKey: "EnableSingleAlbumArtLimit")
        try encoderContainer.encodeIfPresent(enableSingleSubtitleLimit, forKey: "EnableSingleSubtitleLimit")
        try encoderContainer.encodeIfPresent(friendlyName, forKey: "FriendlyName")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(identification, forKey: "Identification")
        try encoderContainer.encodeIfPresent(ignoreTranscodeByteRangeRequests, forKey: "IgnoreTranscodeByteRangeRequests")
        try encoderContainer.encodeIfPresent(manufacturer, forKey: "Manufacturer")
        try encoderContainer.encodeIfPresent(manufacturerUrl, forKey: "ManufacturerUrl")
        try encoderContainer.encodeIfPresent(maxAlbumArtHeight, forKey: "MaxAlbumArtHeight")
        try encoderContainer.encodeIfPresent(maxAlbumArtWidth, forKey: "MaxAlbumArtWidth")
        try encoderContainer.encodeIfPresent(maxIconHeight, forKey: "MaxIconHeight")
        try encoderContainer.encodeIfPresent(maxIconWidth, forKey: "MaxIconWidth")
        try encoderContainer.encodeIfPresent(maxStaticBitrate, forKey: "MaxStaticBitrate")
        try encoderContainer.encodeIfPresent(maxStaticMusicBitrate, forKey: "MaxStaticMusicBitrate")
        try encoderContainer.encodeIfPresent(maxStreamingBitrate, forKey: "MaxStreamingBitrate")
        try encoderContainer.encodeIfPresent(modelDescription, forKey: "ModelDescription")
        try encoderContainer.encodeIfPresent(modelName, forKey: "ModelName")
        try encoderContainer.encodeIfPresent(modelNumber, forKey: "ModelNumber")
        try encoderContainer.encodeIfPresent(modelUrl, forKey: "ModelUrl")
        try encoderContainer.encodeIfPresent(musicStreamingTranscodingBitrate, forKey: "MusicStreamingTranscodingBitrate")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(protocolInfo, forKey: "ProtocolInfo")
        try encoderContainer.encodeIfPresent(requiresPlainFolders, forKey: "RequiresPlainFolders")
        try encoderContainer.encodeIfPresent(requiresPlainVideoItems, forKey: "RequiresPlainVideoItems")
        try encoderContainer.encodeIfPresent(responseProfiles, forKey: "ResponseProfiles")
        try encoderContainer.encodeIfPresent(serialNumber, forKey: "SerialNumber")
        try encoderContainer.encodeIfPresent(sonyAggregationFlags, forKey: "SonyAggregationFlags")
        try encoderContainer.encodeIfPresent(subtitleProfiles, forKey: "SubtitleProfiles")
        try encoderContainer.encodeIfPresent(supportedMediaTypes, forKey: "SupportedMediaTypes")
        try encoderContainer.encodeIfPresent(timelineOffsetSeconds, forKey: "TimelineOffsetSeconds")
        try encoderContainer.encodeIfPresent(transcodingProfiles, forKey: "TranscodingProfiles")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
        try encoderContainer.encodeIfPresent(xmlRootAttributes, forKey: "XmlRootAttributes")
    }

}
