//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class LibrarySummary. */
public struct ItemCountsModel: APIModel {

    /** Gets or sets the album count. */
    public var albumCount: Int?

    /** Gets or sets the artist count. */
    public var artistCount: Int?

    /** Gets or sets the book count. */
    public var bookCount: Int?

    /** Gets or sets the box set count. */
    public var boxSetCount: Int?

    /** Gets or sets the episode count. */
    public var episodeCount: Int?

    /** Gets or sets the item count. */
    public var itemCount: Int?

    /** Gets or sets the movie count. */
    public var movieCount: Int?

    /** Gets or sets the music video count. */
    public var musicVideoCount: Int?

    /** Gets or sets the program count. */
    public var programCount: Int?

    /** Gets or sets the series count. */
    public var seriesCount: Int?

    /** Gets or sets the song count. */
    public var songCount: Int?

    /** Gets or sets the trailer count. */
    public var trailerCount: Int?

    public init(albumCount: Int? = nil, artistCount: Int? = nil, bookCount: Int? = nil, boxSetCount: Int? = nil, episodeCount: Int? = nil, itemCount: Int? = nil, movieCount: Int? = nil, musicVideoCount: Int? = nil, programCount: Int? = nil, seriesCount: Int? = nil, songCount: Int? = nil, trailerCount: Int? = nil) {
        self.albumCount = albumCount
        self.artistCount = artistCount
        self.bookCount = bookCount
        self.boxSetCount = boxSetCount
        self.episodeCount = episodeCount
        self.itemCount = itemCount
        self.movieCount = movieCount
        self.musicVideoCount = musicVideoCount
        self.programCount = programCount
        self.seriesCount = seriesCount
        self.songCount = songCount
        self.trailerCount = trailerCount
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        albumCount = try decoderContainer.decodeIfPresent("AlbumCount")
        artistCount = try decoderContainer.decodeIfPresent("ArtistCount")
        bookCount = try decoderContainer.decodeIfPresent("BookCount")
        boxSetCount = try decoderContainer.decodeIfPresent("BoxSetCount")
        episodeCount = try decoderContainer.decodeIfPresent("EpisodeCount")
        itemCount = try decoderContainer.decodeIfPresent("ItemCount")
        movieCount = try decoderContainer.decodeIfPresent("MovieCount")
        musicVideoCount = try decoderContainer.decodeIfPresent("MusicVideoCount")
        programCount = try decoderContainer.decodeIfPresent("ProgramCount")
        seriesCount = try decoderContainer.decodeIfPresent("SeriesCount")
        songCount = try decoderContainer.decodeIfPresent("SongCount")
        trailerCount = try decoderContainer.decodeIfPresent("TrailerCount")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(albumCount, forKey: "AlbumCount")
        try encoderContainer.encodeIfPresent(artistCount, forKey: "ArtistCount")
        try encoderContainer.encodeIfPresent(bookCount, forKey: "BookCount")
        try encoderContainer.encodeIfPresent(boxSetCount, forKey: "BoxSetCount")
        try encoderContainer.encodeIfPresent(episodeCount, forKey: "EpisodeCount")
        try encoderContainer.encodeIfPresent(itemCount, forKey: "ItemCount")
        try encoderContainer.encodeIfPresent(movieCount, forKey: "MovieCount")
        try encoderContainer.encodeIfPresent(musicVideoCount, forKey: "MusicVideoCount")
        try encoderContainer.encodeIfPresent(programCount, forKey: "ProgramCount")
        try encoderContainer.encodeIfPresent(seriesCount, forKey: "SeriesCount")
        try encoderContainer.encodeIfPresent(songCount, forKey: "SongCount")
        try encoderContainer.encodeIfPresent(trailerCount, forKey: "TrailerCount")
    }

}
