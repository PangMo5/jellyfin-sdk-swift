//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class PlaybackStopInfo. */
public struct PlaybackStopInfoModel: APIModel {

    /** Gets or sets a value indicating whether this MediaBrowser.Model.Session.PlaybackStopInfo is failed. */
    public var failed: Bool?

    public var item: BaseItemDtoModel?

    /** Gets or sets the item identifier. */
    public var itemId: ID?

    /** Gets or sets the live stream identifier. */
    public var liveStreamId: String?

    /** Gets or sets the media version identifier. */
    public var mediaSourceId: String?

    public var nextMediaType: String?

    public var nowPlayingQueue: [QueueItemModel]?

    /** Gets or sets the play session identifier. */
    public var playSessionId: String?

    public var playlistItemId: String?

    /** Gets or sets the position ticks. */
    public var positionTicks: Int?

    /** Gets or sets the session id. */
    public var sessionId: String?

    public init(failed: Bool? = nil, item: BaseItemDtoModel? = nil, itemId: ID? = nil, liveStreamId: String? = nil, mediaSourceId: String? = nil, nextMediaType: String? = nil, nowPlayingQueue: [QueueItemModel]? = nil, playSessionId: String? = nil, playlistItemId: String? = nil, positionTicks: Int? = nil, sessionId: String? = nil) {
        self.failed = failed
        self.item = item
        self.itemId = itemId
        self.liveStreamId = liveStreamId
        self.mediaSourceId = mediaSourceId
        self.nextMediaType = nextMediaType
        self.nowPlayingQueue = nowPlayingQueue
        self.playSessionId = playSessionId
        self.playlistItemId = playlistItemId
        self.positionTicks = positionTicks
        self.sessionId = sessionId
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        failed = try decoderContainer.decodeIfPresent("Failed")
        item = try decoderContainer.decodeIfPresent("Item")
        itemId = try decoderContainer.decodeIfPresent("ItemId")
        liveStreamId = try decoderContainer.decodeIfPresent("LiveStreamId")
        mediaSourceId = try decoderContainer.decodeIfPresent("MediaSourceId")
        nextMediaType = try decoderContainer.decodeIfPresent("NextMediaType")
        nowPlayingQueue = try decoderContainer.decodeArrayIfPresent("NowPlayingQueue")
        playSessionId = try decoderContainer.decodeIfPresent("PlaySessionId")
        playlistItemId = try decoderContainer.decodeIfPresent("PlaylistItemId")
        positionTicks = try decoderContainer.decodeIfPresent("PositionTicks")
        sessionId = try decoderContainer.decodeIfPresent("SessionId")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(failed, forKey: "Failed")
        try encoderContainer.encodeIfPresent(item, forKey: "Item")
        try encoderContainer.encodeIfPresent(itemId, forKey: "ItemId")
        try encoderContainer.encodeIfPresent(liveStreamId, forKey: "LiveStreamId")
        try encoderContainer.encodeIfPresent(mediaSourceId, forKey: "MediaSourceId")
        try encoderContainer.encodeIfPresent(nextMediaType, forKey: "NextMediaType")
        try encoderContainer.encodeIfPresent(nowPlayingQueue, forKey: "NowPlayingQueue")
        try encoderContainer.encodeIfPresent(playSessionId, forKey: "PlaySessionId")
        try encoderContainer.encodeIfPresent(playlistItemId, forKey: "PlaylistItemId")
        try encoderContainer.encodeIfPresent(positionTicks, forKey: "PositionTicks")
        try encoderContainer.encodeIfPresent(sessionId, forKey: "SessionId")
    }

}
