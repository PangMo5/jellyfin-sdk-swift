//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct TypeOptionsModel: APIModel {

    public var imageFetcherOrder: [String]?

    public var imageFetchers: [String]?

    public var imageOptions: [ImageOptionModel]?

    public var metadataFetcherOrder: [String]?

    public var metadataFetchers: [String]?

    public var type: String?

    public init(imageFetcherOrder: [String]? = nil, imageFetchers: [String]? = nil, imageOptions: [ImageOptionModel]? = nil, metadataFetcherOrder: [String]? = nil, metadataFetchers: [String]? = nil, type: String? = nil) {
        self.imageFetcherOrder = imageFetcherOrder
        self.imageFetchers = imageFetchers
        self.imageOptions = imageOptions
        self.metadataFetcherOrder = metadataFetcherOrder
        self.metadataFetchers = metadataFetchers
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        imageFetcherOrder = try decoderContainer.decodeArrayIfPresent("ImageFetcherOrder")
        imageFetchers = try decoderContainer.decodeArrayIfPresent("ImageFetchers")
        imageOptions = try decoderContainer.decodeArrayIfPresent("ImageOptions")
        metadataFetcherOrder = try decoderContainer.decodeArrayIfPresent("MetadataFetcherOrder")
        metadataFetchers = try decoderContainer.decodeArrayIfPresent("MetadataFetchers")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(imageFetcherOrder, forKey: "ImageFetcherOrder")
        try encoderContainer.encodeIfPresent(imageFetchers, forKey: "ImageFetchers")
        try encoderContainer.encodeIfPresent(imageOptions, forKey: "ImageOptions")
        try encoderContainer.encodeIfPresent(metadataFetcherOrder, forKey: "MetadataFetcherOrder")
        try encoderContainer.encodeIfPresent(metadataFetchers, forKey: "MetadataFetchers")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
