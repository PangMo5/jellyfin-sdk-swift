//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class RemoteImageInfo. */
public struct RemoteImageInfoModel: APIModel {

    /** Gets or sets the community rating. */
    public var communityRating: Double?

    /** Gets or sets the height. */
    public var height: Int?

    /** Gets or sets the language. */
    public var language: String?

    /** Gets or sets the name of the provider. */
    public var providerName: String?

    public var ratingType: RatingType?

    /** Gets a url used for previewing a smaller version. */
    public var thumbnailUrl: String?

    public var type: ImageType?

    /** Gets or sets the URL. */
    public var url: String?

    /** Gets or sets the vote count. */
    public var voteCount: Int?

    /** Gets or sets the width. */
    public var width: Int?

    public init(communityRating: Double? = nil, height: Int? = nil, language: String? = nil, providerName: String? = nil, ratingType: RatingType? = nil, thumbnailUrl: String? = nil, type: ImageType? = nil, url: String? = nil, voteCount: Int? = nil, width: Int? = nil) {
        self.communityRating = communityRating
        self.height = height
        self.language = language
        self.providerName = providerName
        self.ratingType = ratingType
        self.thumbnailUrl = thumbnailUrl
        self.type = type
        self.url = url
        self.voteCount = voteCount
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        communityRating = try decoderContainer.decodeIfPresent("CommunityRating")
        height = try decoderContainer.decodeIfPresent("Height")
        language = try decoderContainer.decodeIfPresent("Language")
        providerName = try decoderContainer.decodeIfPresent("ProviderName")
        ratingType = try decoderContainer.decodeIfPresent("RatingType")
        thumbnailUrl = try decoderContainer.decodeIfPresent("ThumbnailUrl")
        type = try decoderContainer.decodeIfPresent("Type")
        url = try decoderContainer.decodeIfPresent("Url")
        voteCount = try decoderContainer.decodeIfPresent("VoteCount")
        width = try decoderContainer.decodeIfPresent("Width")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(communityRating, forKey: "CommunityRating")
        try encoderContainer.encodeIfPresent(height, forKey: "Height")
        try encoderContainer.encodeIfPresent(language, forKey: "Language")
        try encoderContainer.encodeIfPresent(providerName, forKey: "ProviderName")
        try encoderContainer.encodeIfPresent(ratingType, forKey: "RatingType")
        try encoderContainer.encodeIfPresent(thumbnailUrl, forKey: "ThumbnailUrl")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
        try encoderContainer.encodeIfPresent(url, forKey: "Url")
        try encoderContainer.encodeIfPresent(voteCount, forKey: "VoteCount")
        try encoderContainer.encodeIfPresent(width, forKey: "Width")
    }

}
