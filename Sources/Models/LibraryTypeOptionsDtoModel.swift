//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Library type options dto. */
public struct LibraryTypeOptionsDtoModel: APIModel {

    /** Gets or sets the default image options. */
    public var defaultImageOptions: [ImageOptionModel]?

    /** Gets or sets the image fetchers. */
    public var imageFetchers: [LibraryOptionInfoDtoModel]?

    /** Gets or sets the metadata fetchers. */
    public var metadataFetchers: [LibraryOptionInfoDtoModel]?

    /** Gets or sets the supported image types. */
    public var supportedImageTypes: [ImageType]?

    /** Gets or sets the type. */
    public var type: String?

    public init(defaultImageOptions: [ImageOptionModel]? = nil, imageFetchers: [LibraryOptionInfoDtoModel]? = nil, metadataFetchers: [LibraryOptionInfoDtoModel]? = nil, supportedImageTypes: [ImageType]? = nil, type: String? = nil) {
        self.defaultImageOptions = defaultImageOptions
        self.imageFetchers = imageFetchers
        self.metadataFetchers = metadataFetchers
        self.supportedImageTypes = supportedImageTypes
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        defaultImageOptions = try decoderContainer.decodeArrayIfPresent("DefaultImageOptions")
        imageFetchers = try decoderContainer.decodeArrayIfPresent("ImageFetchers")
        metadataFetchers = try decoderContainer.decodeArrayIfPresent("MetadataFetchers")
        supportedImageTypes = try decoderContainer.decodeArrayIfPresent("SupportedImageTypes")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(defaultImageOptions, forKey: "DefaultImageOptions")
        try encoderContainer.encodeIfPresent(imageFetchers, forKey: "ImageFetchers")
        try encoderContainer.encodeIfPresent(metadataFetchers, forKey: "MetadataFetchers")
        try encoderContainer.encodeIfPresent(supportedImageTypes, forKey: "SupportedImageTypes")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
