//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Get programs dto. */
public struct GetProgramsDtoModel: APIModel {

    /** Gets or sets the channels to return guide information for. */
    public var channelIds: [ID]?

    /** Gets or sets the image types to include in the output.
Optional. */
    public var enableImageTypes: [ImageType]?

    /** Gets or sets include image information in output.
Optional. */
    public var enableImages: Bool?

    /** Gets or sets a value indicating whether retrieve total record count. */
    public var enableTotalRecordCount: Bool?

    /** Gets or sets include user data.
Optional. */
    public var enableUserData: Bool?

    /** Gets or sets specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
Optional. */
    public var fields: [ItemFields]?

    /** Gets or sets the genre ids to return guide information for. */
    public var genreIds: [ID]?

    /** Gets or sets the genres to return guide information for. */
    public var genres: [String]?

    /** Gets or sets filter by programs that have completed airing, or not.
Optional. */
    public var hasAired: Bool?

    /** Gets or sets the max number of images to return, per image type.
Optional. */
    public var imageTypeLimit: Int?

    /** Gets or sets filter by programs that are currently airing, or not.
Optional. */
    public var isAiring: Bool?

    /** Gets or sets filter for kids.
Optional. */
    public var isKids: Bool?

    /** Gets or sets filter for movies.
Optional. */
    public var isMovie: Bool?

    /** Gets or sets filter for news.
Optional. */
    public var isNews: Bool?

    /** Gets or sets filter for series.
Optional. */
    public var isSeries: Bool?

    /** Gets or sets filter for sports.
Optional. */
    public var isSports: Bool?

    /** Gets or sets filter by library series id.
Optional. */
    public var librarySeriesId: ID?

    /** Gets or sets the maximum number of records to return.
Optional. */
    public var limit: Int?

    /** Gets or sets the maximum premiere end date.
Optional. */
    public var maxEndDate: DateTime?

    /** Gets or sets the maximum premiere start date.
Optional. */
    public var maxStartDate: DateTime?

    /** Gets or sets the minimum premiere end date.
Optional. */
    public var minEndDate: DateTime?

    /** Gets or sets the minimum premiere start date.
Optional. */
    public var minStartDate: DateTime?

    /** Gets or sets filter by series timer id.
Optional. */
    public var seriesTimerId: String?

    /** Gets or sets specify one or more sort orders, comma delimited. Options: Name, StartDate.
Optional. */
    public var sortBy: [String]?

    /** Gets or sets sort Order - Ascending,Descending. */
    public var sortOrder: [SortOrder]?

    /** Gets or sets the record index to start at. All items with a lower index will be dropped from the results.
Optional. */
    public var startIndex: Int?

    /** Gets or sets optional. Filter by user id. */
    public var userId: ID?

    public init(channelIds: [ID]? = nil, enableImageTypes: [ImageType]? = nil, enableImages: Bool? = nil, enableTotalRecordCount: Bool? = nil, enableUserData: Bool? = nil, fields: [ItemFields]? = nil, genreIds: [ID]? = nil, genres: [String]? = nil, hasAired: Bool? = nil, imageTypeLimit: Int? = nil, isAiring: Bool? = nil, isKids: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isSeries: Bool? = nil, isSports: Bool? = nil, librarySeriesId: ID? = nil, limit: Int? = nil, maxEndDate: DateTime? = nil, maxStartDate: DateTime? = nil, minEndDate: DateTime? = nil, minStartDate: DateTime? = nil, seriesTimerId: String? = nil, sortBy: [String]? = nil, sortOrder: [SortOrder]? = nil, startIndex: Int? = nil, userId: ID? = nil) {
        self.channelIds = channelIds
        self.enableImageTypes = enableImageTypes
        self.enableImages = enableImages
        self.enableTotalRecordCount = enableTotalRecordCount
        self.enableUserData = enableUserData
        self.fields = fields
        self.genreIds = genreIds
        self.genres = genres
        self.hasAired = hasAired
        self.imageTypeLimit = imageTypeLimit
        self.isAiring = isAiring
        self.isKids = isKids
        self.isMovie = isMovie
        self.isNews = isNews
        self.isSeries = isSeries
        self.isSports = isSports
        self.librarySeriesId = librarySeriesId
        self.limit = limit
        self.maxEndDate = maxEndDate
        self.maxStartDate = maxStartDate
        self.minEndDate = minEndDate
        self.minStartDate = minStartDate
        self.seriesTimerId = seriesTimerId
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.startIndex = startIndex
        self.userId = userId
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        channelIds = try decoderContainer.decodeArrayIfPresent("ChannelIds")
        enableImageTypes = try decoderContainer.decodeArrayIfPresent("EnableImageTypes")
        enableImages = try decoderContainer.decodeIfPresent("EnableImages")
        enableTotalRecordCount = try decoderContainer.decodeIfPresent("EnableTotalRecordCount")
        enableUserData = try decoderContainer.decodeIfPresent("EnableUserData")
        fields = try decoderContainer.decodeArrayIfPresent("Fields")
        genreIds = try decoderContainer.decodeArrayIfPresent("GenreIds")
        genres = try decoderContainer.decodeArrayIfPresent("Genres")
        hasAired = try decoderContainer.decodeIfPresent("HasAired")
        imageTypeLimit = try decoderContainer.decodeIfPresent("ImageTypeLimit")
        isAiring = try decoderContainer.decodeIfPresent("IsAiring")
        isKids = try decoderContainer.decodeIfPresent("IsKids")
        isMovie = try decoderContainer.decodeIfPresent("IsMovie")
        isNews = try decoderContainer.decodeIfPresent("IsNews")
        isSeries = try decoderContainer.decodeIfPresent("IsSeries")
        isSports = try decoderContainer.decodeIfPresent("IsSports")
        librarySeriesId = try decoderContainer.decodeIfPresent("LibrarySeriesId")
        limit = try decoderContainer.decodeIfPresent("Limit")
        maxEndDate = try decoderContainer.decodeIfPresent("MaxEndDate")
        maxStartDate = try decoderContainer.decodeIfPresent("MaxStartDate")
        minEndDate = try decoderContainer.decodeIfPresent("MinEndDate")
        minStartDate = try decoderContainer.decodeIfPresent("MinStartDate")
        seriesTimerId = try decoderContainer.decodeIfPresent("SeriesTimerId")
        sortBy = try decoderContainer.decodeArrayIfPresent("SortBy")
        sortOrder = try decoderContainer.decodeArrayIfPresent("SortOrder")
        startIndex = try decoderContainer.decodeIfPresent("StartIndex")
        userId = try decoderContainer.decodeIfPresent("UserId")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(channelIds, forKey: "ChannelIds")
        try encoderContainer.encodeIfPresent(enableImageTypes, forKey: "EnableImageTypes")
        try encoderContainer.encodeIfPresent(enableImages, forKey: "EnableImages")
        try encoderContainer.encodeIfPresent(enableTotalRecordCount, forKey: "EnableTotalRecordCount")
        try encoderContainer.encodeIfPresent(enableUserData, forKey: "EnableUserData")
        try encoderContainer.encodeIfPresent(fields, forKey: "Fields")
        try encoderContainer.encodeIfPresent(genreIds, forKey: "GenreIds")
        try encoderContainer.encodeIfPresent(genres, forKey: "Genres")
        try encoderContainer.encodeIfPresent(hasAired, forKey: "HasAired")
        try encoderContainer.encodeIfPresent(imageTypeLimit, forKey: "ImageTypeLimit")
        try encoderContainer.encodeIfPresent(isAiring, forKey: "IsAiring")
        try encoderContainer.encodeIfPresent(isKids, forKey: "IsKids")
        try encoderContainer.encodeIfPresent(isMovie, forKey: "IsMovie")
        try encoderContainer.encodeIfPresent(isNews, forKey: "IsNews")
        try encoderContainer.encodeIfPresent(isSeries, forKey: "IsSeries")
        try encoderContainer.encodeIfPresent(isSports, forKey: "IsSports")
        try encoderContainer.encodeIfPresent(librarySeriesId, forKey: "LibrarySeriesId")
        try encoderContainer.encodeIfPresent(limit, forKey: "Limit")
        try encoderContainer.encodeIfPresent(maxEndDate, forKey: "MaxEndDate")
        try encoderContainer.encodeIfPresent(maxStartDate, forKey: "MaxStartDate")
        try encoderContainer.encodeIfPresent(minEndDate, forKey: "MinEndDate")
        try encoderContainer.encodeIfPresent(minStartDate, forKey: "MinStartDate")
        try encoderContainer.encodeIfPresent(seriesTimerId, forKey: "SeriesTimerId")
        try encoderContainer.encodeIfPresent(sortBy, forKey: "SortBy")
        try encoderContainer.encodeIfPresent(sortOrder, forKey: "SortOrder")
        try encoderContainer.encodeIfPresent(startIndex, forKey: "StartIndex")
        try encoderContainer.encodeIfPresent(userId, forKey: "UserId")
    }

}
