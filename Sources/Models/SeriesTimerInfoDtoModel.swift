//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class SeriesTimerInfoDto. */
public struct SeriesTimerInfoDtoModel: APIModel {

    /** ChannelId of the recording. */
    public var channelId: ID?

    /** ChannelName of the recording. */
    public var channelName: String?

    public var channelPrimaryImageTag: String?

    public var dayPattern: DayPattern?

    /** Gets or sets the days. */
    public var days: [DayOfWeek]?

    /** The end date of the recording, in UTC. */
    public var endDate: DateTime?

    /** Gets or sets the external channel identifier. */
    public var externalChannelId: String?

    /** Gets or sets the external identifier. */
    public var externalId: String?

    /** Gets or sets the external program identifier. */
    public var externalProgramId: String?

    /** Id of the recording. */
    public var id: String?

    /** Gets or sets the image tags. */
    public var imageTags: [String: String]?

    /** Gets or sets a value indicating whether this instance is post padding required. */
    public var isPostPaddingRequired: Bool?

    /** Gets or sets a value indicating whether this instance is pre padding required. */
    public var isPrePaddingRequired: Bool?

    public var keepUntil: KeepUntil?

    public var keepUpTo: Int?

    /** Name of the recording. */
    public var name: String?

    /** Description of the recording. */
    public var overview: String?

    /** Gets or sets the parent backdrop image tags. */
    public var parentBackdropImageTags: [String]?

    /** If the item does not have any backdrops, this will hold the Id of the Parent that has one. */
    public var parentBackdropItemId: String?

    /** Gets or sets the parent primary image item identifier. */
    public var parentPrimaryImageItemId: String?

    /** Gets or sets the parent primary image tag. */
    public var parentPrimaryImageTag: String?

    /** Gets or sets the parent thumb image tag. */
    public var parentThumbImageTag: String?

    /** Gets or sets the parent thumb item id. */
    public var parentThumbItemId: String?

    /** Gets or sets the post padding seconds. */
    public var postPaddingSeconds: Int?

    /** Gets or sets the pre padding seconds. */
    public var prePaddingSeconds: Int?

    /** Gets or sets the priority. */
    public var priority: Int?

    /** Gets or sets the program identifier. */
    public var programId: String?

    /** Gets or sets a value indicating whether [record any channel]. */
    public var recordAnyChannel: Bool?

    /** Gets or sets a value indicating whether [record any time]. */
    public var recordAnyTime: Bool?

    /** Gets or sets a value indicating whether [record new only]. */
    public var recordNewOnly: Bool?

    /** Gets or sets the server identifier. */
    public var serverId: String?

    /** Gets or sets the name of the service. */
    public var serviceName: String?

    public var skipEpisodesInLibrary: Bool?

    /** The start date of the recording, in UTC. */
    public var startDate: DateTime?

    public var type: String?

    public init(channelId: ID? = nil, channelName: String? = nil, channelPrimaryImageTag: String? = nil, dayPattern: DayPattern? = nil, days: [DayOfWeek]? = nil, endDate: DateTime? = nil, externalChannelId: String? = nil, externalId: String? = nil, externalProgramId: String? = nil, id: String? = nil, imageTags: [String: String]? = nil, isPostPaddingRequired: Bool? = nil, isPrePaddingRequired: Bool? = nil, keepUntil: KeepUntil? = nil, keepUpTo: Int? = nil, name: String? = nil, overview: String? = nil, parentBackdropImageTags: [String]? = nil, parentBackdropItemId: String? = nil, parentPrimaryImageItemId: String? = nil, parentPrimaryImageTag: String? = nil, parentThumbImageTag: String? = nil, parentThumbItemId: String? = nil, postPaddingSeconds: Int? = nil, prePaddingSeconds: Int? = nil, priority: Int? = nil, programId: String? = nil, recordAnyChannel: Bool? = nil, recordAnyTime: Bool? = nil, recordNewOnly: Bool? = nil, serverId: String? = nil, serviceName: String? = nil, skipEpisodesInLibrary: Bool? = nil, startDate: DateTime? = nil, type: String? = nil) {
        self.channelId = channelId
        self.channelName = channelName
        self.channelPrimaryImageTag = channelPrimaryImageTag
        self.dayPattern = dayPattern
        self.days = days
        self.endDate = endDate
        self.externalChannelId = externalChannelId
        self.externalId = externalId
        self.externalProgramId = externalProgramId
        self.id = id
        self.imageTags = imageTags
        self.isPostPaddingRequired = isPostPaddingRequired
        self.isPrePaddingRequired = isPrePaddingRequired
        self.keepUntil = keepUntil
        self.keepUpTo = keepUpTo
        self.name = name
        self.overview = overview
        self.parentBackdropImageTags = parentBackdropImageTags
        self.parentBackdropItemId = parentBackdropItemId
        self.parentPrimaryImageItemId = parentPrimaryImageItemId
        self.parentPrimaryImageTag = parentPrimaryImageTag
        self.parentThumbImageTag = parentThumbImageTag
        self.parentThumbItemId = parentThumbItemId
        self.postPaddingSeconds = postPaddingSeconds
        self.prePaddingSeconds = prePaddingSeconds
        self.priority = priority
        self.programId = programId
        self.recordAnyChannel = recordAnyChannel
        self.recordAnyTime = recordAnyTime
        self.recordNewOnly = recordNewOnly
        self.serverId = serverId
        self.serviceName = serviceName
        self.skipEpisodesInLibrary = skipEpisodesInLibrary
        self.startDate = startDate
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        channelId = try decoderContainer.decodeIfPresent("ChannelId")
        channelName = try decoderContainer.decodeIfPresent("ChannelName")
        channelPrimaryImageTag = try decoderContainer.decodeIfPresent("ChannelPrimaryImageTag")
        dayPattern = try decoderContainer.decodeIfPresent("DayPattern")
        days = try decoderContainer.decodeArrayIfPresent("Days")
        endDate = try decoderContainer.decodeIfPresent("EndDate")
        externalChannelId = try decoderContainer.decodeIfPresent("ExternalChannelId")
        externalId = try decoderContainer.decodeIfPresent("ExternalId")
        externalProgramId = try decoderContainer.decodeIfPresent("ExternalProgramId")
        id = try decoderContainer.decodeIfPresent("Id")
        imageTags = try decoderContainer.decodeIfPresent("ImageTags")
        isPostPaddingRequired = try decoderContainer.decodeIfPresent("IsPostPaddingRequired")
        isPrePaddingRequired = try decoderContainer.decodeIfPresent("IsPrePaddingRequired")
        keepUntil = try decoderContainer.decodeIfPresent("KeepUntil")
        keepUpTo = try decoderContainer.decodeIfPresent("KeepUpTo")
        name = try decoderContainer.decodeIfPresent("Name")
        overview = try decoderContainer.decodeIfPresent("Overview")
        parentBackdropImageTags = try decoderContainer.decodeArrayIfPresent("ParentBackdropImageTags")
        parentBackdropItemId = try decoderContainer.decodeIfPresent("ParentBackdropItemId")
        parentPrimaryImageItemId = try decoderContainer.decodeIfPresent("ParentPrimaryImageItemId")
        parentPrimaryImageTag = try decoderContainer.decodeIfPresent("ParentPrimaryImageTag")
        parentThumbImageTag = try decoderContainer.decodeIfPresent("ParentThumbImageTag")
        parentThumbItemId = try decoderContainer.decodeIfPresent("ParentThumbItemId")
        postPaddingSeconds = try decoderContainer.decodeIfPresent("PostPaddingSeconds")
        prePaddingSeconds = try decoderContainer.decodeIfPresent("PrePaddingSeconds")
        priority = try decoderContainer.decodeIfPresent("Priority")
        programId = try decoderContainer.decodeIfPresent("ProgramId")
        recordAnyChannel = try decoderContainer.decodeIfPresent("RecordAnyChannel")
        recordAnyTime = try decoderContainer.decodeIfPresent("RecordAnyTime")
        recordNewOnly = try decoderContainer.decodeIfPresent("RecordNewOnly")
        serverId = try decoderContainer.decodeIfPresent("ServerId")
        serviceName = try decoderContainer.decodeIfPresent("ServiceName")
        skipEpisodesInLibrary = try decoderContainer.decodeIfPresent("SkipEpisodesInLibrary")
        startDate = try decoderContainer.decodeIfPresent("StartDate")
        type = try decoderContainer.decodeIfPresent("Type")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(channelId, forKey: "ChannelId")
        try encoderContainer.encodeIfPresent(channelName, forKey: "ChannelName")
        try encoderContainer.encodeIfPresent(channelPrimaryImageTag, forKey: "ChannelPrimaryImageTag")
        try encoderContainer.encodeIfPresent(dayPattern, forKey: "DayPattern")
        try encoderContainer.encodeIfPresent(days, forKey: "Days")
        try encoderContainer.encodeIfPresent(endDate, forKey: "EndDate")
        try encoderContainer.encodeIfPresent(externalChannelId, forKey: "ExternalChannelId")
        try encoderContainer.encodeIfPresent(externalId, forKey: "ExternalId")
        try encoderContainer.encodeIfPresent(externalProgramId, forKey: "ExternalProgramId")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(imageTags, forKey: "ImageTags")
        try encoderContainer.encodeIfPresent(isPostPaddingRequired, forKey: "IsPostPaddingRequired")
        try encoderContainer.encodeIfPresent(isPrePaddingRequired, forKey: "IsPrePaddingRequired")
        try encoderContainer.encodeIfPresent(keepUntil, forKey: "KeepUntil")
        try encoderContainer.encodeIfPresent(keepUpTo, forKey: "KeepUpTo")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
        try encoderContainer.encodeIfPresent(overview, forKey: "Overview")
        try encoderContainer.encodeIfPresent(parentBackdropImageTags, forKey: "ParentBackdropImageTags")
        try encoderContainer.encodeIfPresent(parentBackdropItemId, forKey: "ParentBackdropItemId")
        try encoderContainer.encodeIfPresent(parentPrimaryImageItemId, forKey: "ParentPrimaryImageItemId")
        try encoderContainer.encodeIfPresent(parentPrimaryImageTag, forKey: "ParentPrimaryImageTag")
        try encoderContainer.encodeIfPresent(parentThumbImageTag, forKey: "ParentThumbImageTag")
        try encoderContainer.encodeIfPresent(parentThumbItemId, forKey: "ParentThumbItemId")
        try encoderContainer.encodeIfPresent(postPaddingSeconds, forKey: "PostPaddingSeconds")
        try encoderContainer.encodeIfPresent(prePaddingSeconds, forKey: "PrePaddingSeconds")
        try encoderContainer.encodeIfPresent(priority, forKey: "Priority")
        try encoderContainer.encodeIfPresent(programId, forKey: "ProgramId")
        try encoderContainer.encodeIfPresent(recordAnyChannel, forKey: "RecordAnyChannel")
        try encoderContainer.encodeIfPresent(recordAnyTime, forKey: "RecordAnyTime")
        try encoderContainer.encodeIfPresent(recordNewOnly, forKey: "RecordNewOnly")
        try encoderContainer.encodeIfPresent(serverId, forKey: "ServerId")
        try encoderContainer.encodeIfPresent(serviceName, forKey: "ServiceName")
        try encoderContainer.encodeIfPresent(skipEpisodesInLibrary, forKey: "SkipEpisodesInLibrary")
        try encoderContainer.encodeIfPresent(startDate, forKey: "StartDate")
        try encoderContainer.encodeIfPresent(type, forKey: "Type")
    }

}
