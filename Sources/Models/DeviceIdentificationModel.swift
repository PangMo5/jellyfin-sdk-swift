//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DeviceIdentificationModel: APIModel {

    /** Gets or sets the name of the friendly. */
    public var friendlyName: String?

    /** Gets or sets the headers. */
    public var headers: [HttpHeaderInfoModel]?

    /** Gets or sets the manufacturer. */
    public var manufacturer: String?

    /** Gets or sets the manufacturer URL. */
    public var manufacturerUrl: String?

    /** Gets or sets the model description. */
    public var modelDescription: String?

    /** Gets or sets the name of the model. */
    public var modelName: String?

    /** Gets or sets the model number. */
    public var modelNumber: String?

    /** Gets or sets the model URL. */
    public var modelUrl: String?

    /** Gets or sets the serial number. */
    public var serialNumber: String?

    public init(friendlyName: String? = nil, headers: [HttpHeaderInfoModel]? = nil, manufacturer: String? = nil, manufacturerUrl: String? = nil, modelDescription: String? = nil, modelName: String? = nil, modelNumber: String? = nil, modelUrl: String? = nil, serialNumber: String? = nil) {
        self.friendlyName = friendlyName
        self.headers = headers
        self.manufacturer = manufacturer
        self.manufacturerUrl = manufacturerUrl
        self.modelDescription = modelDescription
        self.modelName = modelName
        self.modelNumber = modelNumber
        self.modelUrl = modelUrl
        self.serialNumber = serialNumber
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        friendlyName = try decoderContainer.decodeIfPresent("FriendlyName")
        headers = try decoderContainer.decodeArrayIfPresent("Headers")
        manufacturer = try decoderContainer.decodeIfPresent("Manufacturer")
        manufacturerUrl = try decoderContainer.decodeIfPresent("ManufacturerUrl")
        modelDescription = try decoderContainer.decodeIfPresent("ModelDescription")
        modelName = try decoderContainer.decodeIfPresent("ModelName")
        modelNumber = try decoderContainer.decodeIfPresent("ModelNumber")
        modelUrl = try decoderContainer.decodeIfPresent("ModelUrl")
        serialNumber = try decoderContainer.decodeIfPresent("SerialNumber")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(friendlyName, forKey: "FriendlyName")
        try encoderContainer.encodeIfPresent(headers, forKey: "Headers")
        try encoderContainer.encodeIfPresent(manufacturer, forKey: "Manufacturer")
        try encoderContainer.encodeIfPresent(manufacturerUrl, forKey: "ManufacturerUrl")
        try encoderContainer.encodeIfPresent(modelDescription, forKey: "ModelDescription")
        try encoderContainer.encodeIfPresent(modelName, forKey: "ModelName")
        try encoderContainer.encodeIfPresent(modelNumber, forKey: "ModelNumber")
        try encoderContainer.encodeIfPresent(modelUrl, forKey: "ModelUrl")
        try encoderContainer.encodeIfPresent(serialNumber, forKey: "SerialNumber")
    }

}
