//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct LibraryOptionsModel: APIModel {

    public var automaticRefreshIntervalDays: Int?

    public var disabledLocalMetadataReaders: [String]?

    public var disabledSubtitleFetchers: [String]?

    public var enableAutomaticSeriesGrouping: Bool?

    public var enableChapterImageExtraction: Bool?

    public var enableEmbeddedEpisodeInfos: Bool?

    public var enableEmbeddedTitles: Bool?

    public var enableInternetProviders: Bool?

    public var enablePhotos: Bool?

    public var enableRealtimeMonitor: Bool?

    public var extractChapterImagesDuringLibraryScan: Bool?

    public var localMetadataReaderOrder: [String]?

    /** Gets or sets the metadata country code. */
    public var metadataCountryCode: String?

    public var metadataSavers: [String]?

    public var pathInfos: [MediaPathInfoModel]?

    /** Gets or sets the preferred metadata language. */
    public var preferredMetadataLanguage: String?

    public var requirePerfectSubtitleMatch: Bool?

    public var saveLocalMetadata: Bool?

    public var saveSubtitlesWithMedia: Bool?

    public var seasonZeroDisplayName: String?

    public var skipSubtitlesIfAudioTrackMatches: Bool?

    public var skipSubtitlesIfEmbeddedSubtitlesPresent: Bool?

    public var subtitleDownloadLanguages: [String]?

    public var subtitleFetcherOrder: [String]?

    public var typeOptions: [TypeOptionsModel]?

    public init(automaticRefreshIntervalDays: Int? = nil, disabledLocalMetadataReaders: [String]? = nil, disabledSubtitleFetchers: [String]? = nil, enableAutomaticSeriesGrouping: Bool? = nil, enableChapterImageExtraction: Bool? = nil, enableEmbeddedEpisodeInfos: Bool? = nil, enableEmbeddedTitles: Bool? = nil, enableInternetProviders: Bool? = nil, enablePhotos: Bool? = nil, enableRealtimeMonitor: Bool? = nil, extractChapterImagesDuringLibraryScan: Bool? = nil, localMetadataReaderOrder: [String]? = nil, metadataCountryCode: String? = nil, metadataSavers: [String]? = nil, pathInfos: [MediaPathInfoModel]? = nil, preferredMetadataLanguage: String? = nil, requirePerfectSubtitleMatch: Bool? = nil, saveLocalMetadata: Bool? = nil, saveSubtitlesWithMedia: Bool? = nil, seasonZeroDisplayName: String? = nil, skipSubtitlesIfAudioTrackMatches: Bool? = nil, skipSubtitlesIfEmbeddedSubtitlesPresent: Bool? = nil, subtitleDownloadLanguages: [String]? = nil, subtitleFetcherOrder: [String]? = nil, typeOptions: [TypeOptionsModel]? = nil) {
        self.automaticRefreshIntervalDays = automaticRefreshIntervalDays
        self.disabledLocalMetadataReaders = disabledLocalMetadataReaders
        self.disabledSubtitleFetchers = disabledSubtitleFetchers
        self.enableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping
        self.enableChapterImageExtraction = enableChapterImageExtraction
        self.enableEmbeddedEpisodeInfos = enableEmbeddedEpisodeInfos
        self.enableEmbeddedTitles = enableEmbeddedTitles
        self.enableInternetProviders = enableInternetProviders
        self.enablePhotos = enablePhotos
        self.enableRealtimeMonitor = enableRealtimeMonitor
        self.extractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan
        self.localMetadataReaderOrder = localMetadataReaderOrder
        self.metadataCountryCode = metadataCountryCode
        self.metadataSavers = metadataSavers
        self.pathInfos = pathInfos
        self.preferredMetadataLanguage = preferredMetadataLanguage
        self.requirePerfectSubtitleMatch = requirePerfectSubtitleMatch
        self.saveLocalMetadata = saveLocalMetadata
        self.saveSubtitlesWithMedia = saveSubtitlesWithMedia
        self.seasonZeroDisplayName = seasonZeroDisplayName
        self.skipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches
        self.skipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent
        self.subtitleDownloadLanguages = subtitleDownloadLanguages
        self.subtitleFetcherOrder = subtitleFetcherOrder
        self.typeOptions = typeOptions
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        automaticRefreshIntervalDays = try decoderContainer.decodeIfPresent("AutomaticRefreshIntervalDays")
        disabledLocalMetadataReaders = try decoderContainer.decodeArrayIfPresent("DisabledLocalMetadataReaders")
        disabledSubtitleFetchers = try decoderContainer.decodeArrayIfPresent("DisabledSubtitleFetchers")
        enableAutomaticSeriesGrouping = try decoderContainer.decodeIfPresent("EnableAutomaticSeriesGrouping")
        enableChapterImageExtraction = try decoderContainer.decodeIfPresent("EnableChapterImageExtraction")
        enableEmbeddedEpisodeInfos = try decoderContainer.decodeIfPresent("EnableEmbeddedEpisodeInfos")
        enableEmbeddedTitles = try decoderContainer.decodeIfPresent("EnableEmbeddedTitles")
        enableInternetProviders = try decoderContainer.decodeIfPresent("EnableInternetProviders")
        enablePhotos = try decoderContainer.decodeIfPresent("EnablePhotos")
        enableRealtimeMonitor = try decoderContainer.decodeIfPresent("EnableRealtimeMonitor")
        extractChapterImagesDuringLibraryScan = try decoderContainer.decodeIfPresent("ExtractChapterImagesDuringLibraryScan")
        localMetadataReaderOrder = try decoderContainer.decodeArrayIfPresent("LocalMetadataReaderOrder")
        metadataCountryCode = try decoderContainer.decodeIfPresent("MetadataCountryCode")
        metadataSavers = try decoderContainer.decodeArrayIfPresent("MetadataSavers")
        pathInfos = try decoderContainer.decodeArrayIfPresent("PathInfos")
        preferredMetadataLanguage = try decoderContainer.decodeIfPresent("PreferredMetadataLanguage")
        requirePerfectSubtitleMatch = try decoderContainer.decodeIfPresent("RequirePerfectSubtitleMatch")
        saveLocalMetadata = try decoderContainer.decodeIfPresent("SaveLocalMetadata")
        saveSubtitlesWithMedia = try decoderContainer.decodeIfPresent("SaveSubtitlesWithMedia")
        seasonZeroDisplayName = try decoderContainer.decodeIfPresent("SeasonZeroDisplayName")
        skipSubtitlesIfAudioTrackMatches = try decoderContainer.decodeIfPresent("SkipSubtitlesIfAudioTrackMatches")
        skipSubtitlesIfEmbeddedSubtitlesPresent = try decoderContainer.decodeIfPresent("SkipSubtitlesIfEmbeddedSubtitlesPresent")
        subtitleDownloadLanguages = try decoderContainer.decodeArrayIfPresent("SubtitleDownloadLanguages")
        subtitleFetcherOrder = try decoderContainer.decodeArrayIfPresent("SubtitleFetcherOrder")
        typeOptions = try decoderContainer.decodeArrayIfPresent("TypeOptions")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(automaticRefreshIntervalDays, forKey: "AutomaticRefreshIntervalDays")
        try encoderContainer.encodeIfPresent(disabledLocalMetadataReaders, forKey: "DisabledLocalMetadataReaders")
        try encoderContainer.encodeIfPresent(disabledSubtitleFetchers, forKey: "DisabledSubtitleFetchers")
        try encoderContainer.encodeIfPresent(enableAutomaticSeriesGrouping, forKey: "EnableAutomaticSeriesGrouping")
        try encoderContainer.encodeIfPresent(enableChapterImageExtraction, forKey: "EnableChapterImageExtraction")
        try encoderContainer.encodeIfPresent(enableEmbeddedEpisodeInfos, forKey: "EnableEmbeddedEpisodeInfos")
        try encoderContainer.encodeIfPresent(enableEmbeddedTitles, forKey: "EnableEmbeddedTitles")
        try encoderContainer.encodeIfPresent(enableInternetProviders, forKey: "EnableInternetProviders")
        try encoderContainer.encodeIfPresent(enablePhotos, forKey: "EnablePhotos")
        try encoderContainer.encodeIfPresent(enableRealtimeMonitor, forKey: "EnableRealtimeMonitor")
        try encoderContainer.encodeIfPresent(extractChapterImagesDuringLibraryScan, forKey: "ExtractChapterImagesDuringLibraryScan")
        try encoderContainer.encodeIfPresent(localMetadataReaderOrder, forKey: "LocalMetadataReaderOrder")
        try encoderContainer.encodeIfPresent(metadataCountryCode, forKey: "MetadataCountryCode")
        try encoderContainer.encodeIfPresent(metadataSavers, forKey: "MetadataSavers")
        try encoderContainer.encodeIfPresent(pathInfos, forKey: "PathInfos")
        try encoderContainer.encodeIfPresent(preferredMetadataLanguage, forKey: "PreferredMetadataLanguage")
        try encoderContainer.encodeIfPresent(requirePerfectSubtitleMatch, forKey: "RequirePerfectSubtitleMatch")
        try encoderContainer.encodeIfPresent(saveLocalMetadata, forKey: "SaveLocalMetadata")
        try encoderContainer.encodeIfPresent(saveSubtitlesWithMedia, forKey: "SaveSubtitlesWithMedia")
        try encoderContainer.encodeIfPresent(seasonZeroDisplayName, forKey: "SeasonZeroDisplayName")
        try encoderContainer.encodeIfPresent(skipSubtitlesIfAudioTrackMatches, forKey: "SkipSubtitlesIfAudioTrackMatches")
        try encoderContainer.encodeIfPresent(skipSubtitlesIfEmbeddedSubtitlesPresent, forKey: "SkipSubtitlesIfEmbeddedSubtitlesPresent")
        try encoderContainer.encodeIfPresent(subtitleDownloadLanguages, forKey: "SubtitleDownloadLanguages")
        try encoderContainer.encodeIfPresent(subtitleFetcherOrder, forKey: "SubtitleFetcherOrder")
        try encoderContainer.encodeIfPresent(typeOptions, forKey: "TypeOptions")
    }

}
