//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Class UserConfiguration. */
public struct UserConfigurationModel: APIModel {

    /** Gets or sets the audio language preference. */
    public var audioLanguagePreference: String?

    public var displayCollectionsView: Bool?

    public var displayMissingEpisodes: Bool?

    public var enableLocalPassword: Bool?

    public var enableNextEpisodeAutoPlay: Bool?

    public var groupedFolders: [String]?

    public var hidePlayedInLatest: Bool?

    public var latestItemsExcludes: [String]?

    public var myMediaExcludes: [String]?

    public var orderedViews: [String]?

    /** Gets or sets a value indicating whether [play default audio track]. */
    public var playDefaultAudioTrack: Bool?

    public var rememberAudioSelections: Bool?

    public var rememberSubtitleSelections: Bool?

    /** Gets or sets the subtitle language preference. */
    public var subtitleLanguagePreference: String?

    public var subtitleMode: SubtitlePlaybackMode?

    public init(audioLanguagePreference: String? = nil, displayCollectionsView: Bool? = nil, displayMissingEpisodes: Bool? = nil, enableLocalPassword: Bool? = nil, enableNextEpisodeAutoPlay: Bool? = nil, groupedFolders: [String]? = nil, hidePlayedInLatest: Bool? = nil, latestItemsExcludes: [String]? = nil, myMediaExcludes: [String]? = nil, orderedViews: [String]? = nil, playDefaultAudioTrack: Bool? = nil, rememberAudioSelections: Bool? = nil, rememberSubtitleSelections: Bool? = nil, subtitleLanguagePreference: String? = nil, subtitleMode: SubtitlePlaybackMode? = nil) {
        self.audioLanguagePreference = audioLanguagePreference
        self.displayCollectionsView = displayCollectionsView
        self.displayMissingEpisodes = displayMissingEpisodes
        self.enableLocalPassword = enableLocalPassword
        self.enableNextEpisodeAutoPlay = enableNextEpisodeAutoPlay
        self.groupedFolders = groupedFolders
        self.hidePlayedInLatest = hidePlayedInLatest
        self.latestItemsExcludes = latestItemsExcludes
        self.myMediaExcludes = myMediaExcludes
        self.orderedViews = orderedViews
        self.playDefaultAudioTrack = playDefaultAudioTrack
        self.rememberAudioSelections = rememberAudioSelections
        self.rememberSubtitleSelections = rememberSubtitleSelections
        self.subtitleLanguagePreference = subtitleLanguagePreference
        self.subtitleMode = subtitleMode
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioLanguagePreference = try decoderContainer.decodeIfPresent("AudioLanguagePreference")
        displayCollectionsView = try decoderContainer.decodeIfPresent("DisplayCollectionsView")
        displayMissingEpisodes = try decoderContainer.decodeIfPresent("DisplayMissingEpisodes")
        enableLocalPassword = try decoderContainer.decodeIfPresent("EnableLocalPassword")
        enableNextEpisodeAutoPlay = try decoderContainer.decodeIfPresent("EnableNextEpisodeAutoPlay")
        groupedFolders = try decoderContainer.decodeArrayIfPresent("GroupedFolders")
        hidePlayedInLatest = try decoderContainer.decodeIfPresent("HidePlayedInLatest")
        latestItemsExcludes = try decoderContainer.decodeArrayIfPresent("LatestItemsExcludes")
        myMediaExcludes = try decoderContainer.decodeArrayIfPresent("MyMediaExcludes")
        orderedViews = try decoderContainer.decodeArrayIfPresent("OrderedViews")
        playDefaultAudioTrack = try decoderContainer.decodeIfPresent("PlayDefaultAudioTrack")
        rememberAudioSelections = try decoderContainer.decodeIfPresent("RememberAudioSelections")
        rememberSubtitleSelections = try decoderContainer.decodeIfPresent("RememberSubtitleSelections")
        subtitleLanguagePreference = try decoderContainer.decodeIfPresent("SubtitleLanguagePreference")
        subtitleMode = try decoderContainer.decodeIfPresent("SubtitleMode")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioLanguagePreference, forKey: "AudioLanguagePreference")
        try encoderContainer.encodeIfPresent(displayCollectionsView, forKey: "DisplayCollectionsView")
        try encoderContainer.encodeIfPresent(displayMissingEpisodes, forKey: "DisplayMissingEpisodes")
        try encoderContainer.encodeIfPresent(enableLocalPassword, forKey: "EnableLocalPassword")
        try encoderContainer.encodeIfPresent(enableNextEpisodeAutoPlay, forKey: "EnableNextEpisodeAutoPlay")
        try encoderContainer.encodeIfPresent(groupedFolders, forKey: "GroupedFolders")
        try encoderContainer.encodeIfPresent(hidePlayedInLatest, forKey: "HidePlayedInLatest")
        try encoderContainer.encodeIfPresent(latestItemsExcludes, forKey: "LatestItemsExcludes")
        try encoderContainer.encodeIfPresent(myMediaExcludes, forKey: "MyMediaExcludes")
        try encoderContainer.encodeIfPresent(orderedViews, forKey: "OrderedViews")
        try encoderContainer.encodeIfPresent(playDefaultAudioTrack, forKey: "PlayDefaultAudioTrack")
        try encoderContainer.encodeIfPresent(rememberAudioSelections, forKey: "RememberAudioSelections")
        try encoderContainer.encodeIfPresent(rememberSubtitleSelections, forKey: "RememberSubtitleSelections")
        try encoderContainer.encodeIfPresent(subtitleLanguagePreference, forKey: "SubtitleLanguagePreference")
        try encoderContainer.encodeIfPresent(subtitleMode, forKey: "SubtitleMode")
    }

}
