//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct TranscodingInfoModel: APIModel {

    public var audioChannels: Int?

    public var audioCodec: String?

    public var bitrate: Int?

    public var completionPercentage: Double?

    public var container: String?

    public var framerate: Float?

    public var height: Int?

    public var isAudioDirect: Bool?

    public var isVideoDirect: Bool?

    public var transcodeReasons: [TranscodeReason]?

    public var videoCodec: String?

    public var width: Int?

    public init(audioChannels: Int? = nil, audioCodec: String? = nil, bitrate: Int? = nil, completionPercentage: Double? = nil, container: String? = nil, framerate: Float? = nil, height: Int? = nil, isAudioDirect: Bool? = nil, isVideoDirect: Bool? = nil, transcodeReasons: [TranscodeReason]? = nil, videoCodec: String? = nil, width: Int? = nil) {
        self.audioChannels = audioChannels
        self.audioCodec = audioCodec
        self.bitrate = bitrate
        self.completionPercentage = completionPercentage
        self.container = container
        self.framerate = framerate
        self.height = height
        self.isAudioDirect = isAudioDirect
        self.isVideoDirect = isVideoDirect
        self.transcodeReasons = transcodeReasons
        self.videoCodec = videoCodec
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        audioChannels = try decoderContainer.decodeIfPresent("AudioChannels")
        audioCodec = try decoderContainer.decodeIfPresent("AudioCodec")
        bitrate = try decoderContainer.decodeIfPresent("Bitrate")
        completionPercentage = try decoderContainer.decodeIfPresent("CompletionPercentage")
        container = try decoderContainer.decodeIfPresent("Container")
        framerate = try decoderContainer.decodeIfPresent("Framerate")
        height = try decoderContainer.decodeIfPresent("Height")
        isAudioDirect = try decoderContainer.decodeIfPresent("IsAudioDirect")
        isVideoDirect = try decoderContainer.decodeIfPresent("IsVideoDirect")
        transcodeReasons = try decoderContainer.decodeArrayIfPresent("TranscodeReasons")
        videoCodec = try decoderContainer.decodeIfPresent("VideoCodec")
        width = try decoderContainer.decodeIfPresent("Width")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(audioChannels, forKey: "AudioChannels")
        try encoderContainer.encodeIfPresent(audioCodec, forKey: "AudioCodec")
        try encoderContainer.encodeIfPresent(bitrate, forKey: "Bitrate")
        try encoderContainer.encodeIfPresent(completionPercentage, forKey: "CompletionPercentage")
        try encoderContainer.encodeIfPresent(container, forKey: "Container")
        try encoderContainer.encodeIfPresent(framerate, forKey: "Framerate")
        try encoderContainer.encodeIfPresent(height, forKey: "Height")
        try encoderContainer.encodeIfPresent(isAudioDirect, forKey: "IsAudioDirect")
        try encoderContainer.encodeIfPresent(isVideoDirect, forKey: "IsVideoDirect")
        try encoderContainer.encodeIfPresent(transcodeReasons, forKey: "TranscodeReasons")
        try encoderContainer.encodeIfPresent(videoCodec, forKey: "VideoCodec")
        try encoderContainer.encodeIfPresent(width, forKey: "Width")
    }

}
