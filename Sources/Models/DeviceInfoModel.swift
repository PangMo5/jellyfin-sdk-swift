//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DeviceInfoModel: APIModel {

    /** Gets or sets the name of the application. */
    public var appName: String?

    /** Gets or sets the application version. */
    public var appVersion: String?

    public var capabilities: ClientCapabilitiesModel?

    /** Gets or sets the date last modified. */
    public var dateLastActivity: DateTime?

    public var iconUrl: String?

    /** Gets or sets the identifier. */
    public var id: String?

    /** Gets or sets the last user identifier. */
    public var lastUserId: ID?

    /** Gets or sets the last name of the user. */
    public var lastUserName: String?

    public var name: String?

    public init(appName: String? = nil, appVersion: String? = nil, capabilities: ClientCapabilitiesModel? = nil, dateLastActivity: DateTime? = nil, iconUrl: String? = nil, id: String? = nil, lastUserId: ID? = nil, lastUserName: String? = nil, name: String? = nil) {
        self.appName = appName
        self.appVersion = appVersion
        self.capabilities = capabilities
        self.dateLastActivity = dateLastActivity
        self.iconUrl = iconUrl
        self.id = id
        self.lastUserId = lastUserId
        self.lastUserName = lastUserName
        self.name = name
    }

    public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: StringCodingKey.self)

        appName = try decoderContainer.decodeIfPresent("AppName")
        appVersion = try decoderContainer.decodeIfPresent("AppVersion")
        capabilities = try decoderContainer.decodeIfPresent("Capabilities")
        dateLastActivity = try decoderContainer.decodeIfPresent("DateLastActivity")
        iconUrl = try decoderContainer.decodeIfPresent("IconUrl")
        id = try decoderContainer.decodeIfPresent("Id")
        lastUserId = try decoderContainer.decodeIfPresent("LastUserId")
        lastUserName = try decoderContainer.decodeIfPresent("LastUserName")
        name = try decoderContainer.decodeIfPresent("Name")
    }

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: StringCodingKey.self)

        try encoderContainer.encodeIfPresent(appName, forKey: "AppName")
        try encoderContainer.encodeIfPresent(appVersion, forKey: "AppVersion")
        try encoderContainer.encodeIfPresent(capabilities, forKey: "Capabilities")
        try encoderContainer.encodeIfPresent(dateLastActivity, forKey: "DateLastActivity")
        try encoderContainer.encodeIfPresent(iconUrl, forKey: "IconUrl")
        try encoderContainer.encodeIfPresent(id, forKey: "Id")
        try encoderContainer.encodeIfPresent(lastUserId, forKey: "LastUserId")
        try encoderContainer.encodeIfPresent(lastUserName, forKey: "LastUserName")
        try encoderContainer.encodeIfPresent(name, forKey: "Name")
    }

}
