//
// AuthenticationResultSessionInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Class SessionInfo. */
public struct AuthenticationResultSessionInfo: Codable, JSONEncodable, Hashable {

    public var playState: SessionInfoPlayState?
    public var additionalUsers: [SessionUserInfo]?
    public var capabilities: SessionInfoCapabilities?
    /** Gets or sets the remote end point. */
    public var remoteEndPoint: String?
    /** Gets the playable media types. */
    public var playableMediaTypes: [String]?
    /** Gets or sets the id. */
    public var id: String?
    /** Gets or sets the user id. */
    public var userId: String?
    /** Gets or sets the username. */
    public var userName: String?
    /** Gets or sets the type of the client. */
    public var client: String?
    /** Gets or sets the last activity date. */
    public var lastActivityDate: Date?
    /** Gets or sets the last playback check in. */
    public var lastPlaybackCheckIn: Date?
    /** Gets or sets the name of the device. */
    public var deviceName: String?
    /** Gets or sets the type of the device. */
    public var deviceType: String?
    public var nowPlayingItem: SessionInfoNowPlayingItem?
    public var fullNowPlayingItem: SessionInfoFullNowPlayingItem?
    public var nowViewingItem: SessionInfoNowViewingItem?
    /** Gets or sets the device id. */
    public var deviceId: String?
    /** Gets or sets the application version. */
    public var applicationVersion: String?
    public var transcodingInfo: SessionInfoTranscodingInfo?
    /** Gets a value indicating whether this instance is active. */
    public var isActive: Bool?
    public var supportsMediaControl: Bool?
    public var supportsRemoteControl: Bool?
    public var nowPlayingQueue: [QueueItem]?
    public var nowPlayingQueueFullItems: [BaseItemDto]?
    public var hasCustomDeviceName: Bool?
    public var playlistItemId: String?
    public var serverId: String?
    public var userPrimaryImageTag: String?
    /** Gets the supported commands. */
    public var supportedCommands: [GeneralCommandType]?

    public init(playState: SessionInfoPlayState? = nil, additionalUsers: [SessionUserInfo]? = nil, capabilities: SessionInfoCapabilities? = nil, remoteEndPoint: String? = nil, playableMediaTypes: [String]? = nil, id: String? = nil, userId: String? = nil, userName: String? = nil, client: String? = nil, lastActivityDate: Date? = nil, lastPlaybackCheckIn: Date? = nil, deviceName: String? = nil, deviceType: String? = nil, nowPlayingItem: SessionInfoNowPlayingItem? = nil, fullNowPlayingItem: SessionInfoFullNowPlayingItem? = nil, nowViewingItem: SessionInfoNowViewingItem? = nil, deviceId: String? = nil, applicationVersion: String? = nil, transcodingInfo: SessionInfoTranscodingInfo? = nil, isActive: Bool? = nil, supportsMediaControl: Bool? = nil, supportsRemoteControl: Bool? = nil, nowPlayingQueue: [QueueItem]? = nil, nowPlayingQueueFullItems: [BaseItemDto]? = nil, hasCustomDeviceName: Bool? = nil, playlistItemId: String? = nil, serverId: String? = nil, userPrimaryImageTag: String? = nil, supportedCommands: [GeneralCommandType]? = nil) {
        self.playState = playState
        self.additionalUsers = additionalUsers
        self.capabilities = capabilities
        self.remoteEndPoint = remoteEndPoint
        self.playableMediaTypes = playableMediaTypes
        self.id = id
        self.userId = userId
        self.userName = userName
        self.client = client
        self.lastActivityDate = lastActivityDate
        self.lastPlaybackCheckIn = lastPlaybackCheckIn
        self.deviceName = deviceName
        self.deviceType = deviceType
        self.nowPlayingItem = nowPlayingItem
        self.fullNowPlayingItem = fullNowPlayingItem
        self.nowViewingItem = nowViewingItem
        self.deviceId = deviceId
        self.applicationVersion = applicationVersion
        self.transcodingInfo = transcodingInfo
        self.isActive = isActive
        self.supportsMediaControl = supportsMediaControl
        self.supportsRemoteControl = supportsRemoteControl
        self.nowPlayingQueue = nowPlayingQueue
        self.nowPlayingQueueFullItems = nowPlayingQueueFullItems
        self.hasCustomDeviceName = hasCustomDeviceName
        self.playlistItemId = playlistItemId
        self.serverId = serverId
        self.userPrimaryImageTag = userPrimaryImageTag
        self.supportedCommands = supportedCommands
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case playState = "PlayState"
        case additionalUsers = "AdditionalUsers"
        case capabilities = "Capabilities"
        case remoteEndPoint = "RemoteEndPoint"
        case playableMediaTypes = "PlayableMediaTypes"
        case id = "Id"
        case userId = "UserId"
        case userName = "UserName"
        case client = "Client"
        case lastActivityDate = "LastActivityDate"
        case lastPlaybackCheckIn = "LastPlaybackCheckIn"
        case deviceName = "DeviceName"
        case deviceType = "DeviceType"
        case nowPlayingItem = "NowPlayingItem"
        case fullNowPlayingItem = "FullNowPlayingItem"
        case nowViewingItem = "NowViewingItem"
        case deviceId = "DeviceId"
        case applicationVersion = "ApplicationVersion"
        case transcodingInfo = "TranscodingInfo"
        case isActive = "IsActive"
        case supportsMediaControl = "SupportsMediaControl"
        case supportsRemoteControl = "SupportsRemoteControl"
        case nowPlayingQueue = "NowPlayingQueue"
        case nowPlayingQueueFullItems = "NowPlayingQueueFullItems"
        case hasCustomDeviceName = "HasCustomDeviceName"
        case playlistItemId = "PlaylistItemId"
        case serverId = "ServerId"
        case userPrimaryImageTag = "UserPrimaryImageTag"
        case supportedCommands = "SupportedCommands"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(playState, forKey: .playState)
        try container.encodeIfPresent(additionalUsers, forKey: .additionalUsers)
        try container.encodeIfPresent(capabilities, forKey: .capabilities)
        try container.encodeIfPresent(remoteEndPoint, forKey: .remoteEndPoint)
        try container.encodeIfPresent(playableMediaTypes, forKey: .playableMediaTypes)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(client, forKey: .client)
        try container.encodeIfPresent(lastActivityDate, forKey: .lastActivityDate)
        try container.encodeIfPresent(lastPlaybackCheckIn, forKey: .lastPlaybackCheckIn)
        try container.encodeIfPresent(deviceName, forKey: .deviceName)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(nowPlayingItem, forKey: .nowPlayingItem)
        try container.encodeIfPresent(fullNowPlayingItem, forKey: .fullNowPlayingItem)
        try container.encodeIfPresent(nowViewingItem, forKey: .nowViewingItem)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(applicationVersion, forKey: .applicationVersion)
        try container.encodeIfPresent(transcodingInfo, forKey: .transcodingInfo)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(supportsMediaControl, forKey: .supportsMediaControl)
        try container.encodeIfPresent(supportsRemoteControl, forKey: .supportsRemoteControl)
        try container.encodeIfPresent(nowPlayingQueue, forKey: .nowPlayingQueue)
        try container.encodeIfPresent(nowPlayingQueueFullItems, forKey: .nowPlayingQueueFullItems)
        try container.encodeIfPresent(hasCustomDeviceName, forKey: .hasCustomDeviceName)
        try container.encodeIfPresent(playlistItemId, forKey: .playlistItemId)
        try container.encodeIfPresent(serverId, forKey: .serverId)
        try container.encodeIfPresent(userPrimaryImageTag, forKey: .userPrimaryImageTag)
        try container.encodeIfPresent(supportedCommands, forKey: .supportedCommands)
    }
}

