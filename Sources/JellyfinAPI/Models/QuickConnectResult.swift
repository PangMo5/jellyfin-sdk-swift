//
// QuickConnectResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Stores the state of an quick connect request. */
public struct QuickConnectResult: Codable, JSONEncodable, Hashable {

    /** Gets or sets a value indicating whether this request is authorized. */
    public var authenticated: Bool?
    /** Gets the secret value used to uniquely identify this request. Can be used to retrieve authentication information. */
    public var secret: String?
    /** Gets the user facing code used so the user can quickly differentiate this request from others. */
    public var code: String?
    /** Gets the requesting device id. */
    public var deviceId: String?
    /** Gets the requesting device name. */
    public var deviceName: String?
    /** Gets the requesting app name. */
    public var appName: String?
    /** Gets the requesting app version. */
    public var appVersion: String?
    /** Gets or sets the DateTime that this request was created. */
    public var dateAdded: Date?

    public init(authenticated: Bool? = nil, secret: String? = nil, code: String? = nil, deviceId: String? = nil, deviceName: String? = nil, appName: String? = nil, appVersion: String? = nil, dateAdded: Date? = nil) {
        self.authenticated = authenticated
        self.secret = secret
        self.code = code
        self.deviceId = deviceId
        self.deviceName = deviceName
        self.appName = appName
        self.appVersion = appVersion
        self.dateAdded = dateAdded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticated = "Authenticated"
        case secret = "Secret"
        case code = "Code"
        case deviceId = "DeviceId"
        case deviceName = "DeviceName"
        case appName = "AppName"
        case appVersion = "AppVersion"
        case dateAdded = "DateAdded"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authenticated, forKey: .authenticated)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(deviceName, forKey: .deviceName)
        try container.encodeIfPresent(appName, forKey: .appName)
        try container.encodeIfPresent(appVersion, forKey: .appVersion)
        try container.encodeIfPresent(dateAdded, forKey: .dateAdded)
    }
}

