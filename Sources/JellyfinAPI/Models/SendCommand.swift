//
// SendCommand.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Class SendCommand. */
public struct SendCommand: Codable, JSONEncodable, Hashable {

    /** Gets the group identifier. */
    public var groupId: String?
    /** Gets the playlist identifier of the playing item. */
    public var playlistItemId: String?
    /** Gets or sets the UTC time when to execute the command. */
    public var when: Date?
    /** Gets the position ticks. */
    public var positionTicks: Int64?
    /** Gets the command. */
    public var command: SendCommandType?
    /** Gets the UTC time when this command has been emitted. */
    public var emittedAt: Date?

    public init(groupId: String? = nil, playlistItemId: String? = nil, when: Date? = nil, positionTicks: Int64? = nil, command: SendCommandType? = nil, emittedAt: Date? = nil) {
        self.groupId = groupId
        self.playlistItemId = playlistItemId
        self.when = when
        self.positionTicks = positionTicks
        self.command = command
        self.emittedAt = emittedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case groupId = "GroupId"
        case playlistItemId = "PlaylistItemId"
        case when = "When"
        case positionTicks = "PositionTicks"
        case command = "Command"
        case emittedAt = "EmittedAt"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(playlistItemId, forKey: .playlistItemId)
        try container.encodeIfPresent(when, forKey: .when)
        try container.encodeIfPresent(positionTicks, forKey: .positionTicks)
        try container.encodeIfPresent(command, forKey: .command)
        try container.encodeIfPresent(emittedAt, forKey: .emittedAt)
    }
}

