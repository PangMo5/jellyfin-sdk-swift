//
// NotificationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The notification DTO. */
public struct NotificationDto: Codable, JSONEncodable, Hashable {

    /** Gets or sets the notification ID. Defaults to an empty string. */
    public var id: String?
    /** Gets or sets the notification's user ID. Defaults to an empty string. */
    public var userId: String?
    /** Gets or sets the notification date. */
    public var date: Date?
    /** Gets or sets a value indicating whether the notification has been read. Defaults to false. */
    public var isRead: Bool?
    /** Gets or sets the notification's name. Defaults to an empty string. */
    public var name: String?
    /** Gets or sets the notification's description. Defaults to an empty string. */
    public var description: String?
    /** Gets or sets the notification's URL. Defaults to an empty string. */
    public var url: String?
    /** Gets or sets the notification level. */
    public var level: NotificationLevel?

    public init(id: String? = nil, userId: String? = nil, date: Date? = nil, isRead: Bool? = nil, name: String? = nil, description: String? = nil, url: String? = nil, level: NotificationLevel? = nil) {
        self.id = id
        self.userId = userId
        self.date = date
        self.isRead = isRead
        self.name = name
        self.description = description
        self.url = url
        self.level = level
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case userId = "UserId"
        case date = "Date"
        case isRead = "IsRead"
        case name = "Name"
        case description = "Description"
        case url = "Url"
        case level = "Level"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(isRead, forKey: .isRead)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(level, forKey: .level)
    }
}

