//
// PlaybackProgressInfoItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Gets or sets the item. */
public struct PlaybackProgressInfoItem: Codable, JSONEncodable, Hashable {

    /** Gets or sets the name. */
    public var name: String?
    public var originalTitle: String?
    /** Gets or sets the server identifier. */
    public var serverId: String?
    /** Gets or sets the id. */
    public var id: String?
    /** Gets or sets the etag. */
    public var etag: String?
    /** Gets or sets the type of the source. */
    public var sourceType: String?
    /** Gets or sets the playlist item identifier. */
    public var playlistItemId: String?
    /** Gets or sets the date created. */
    public var dateCreated: Date?
    public var dateLastMediaAdded: Date?
    public var extraType: String?
    public var airsBeforeSeasonNumber: Int?
    public var airsAfterSeasonNumber: Int?
    public var airsBeforeEpisodeNumber: Int?
    public var canDelete: Bool?
    public var canDownload: Bool?
    public var hasSubtitles: Bool?
    public var preferredMetadataLanguage: String?
    public var preferredMetadataCountryCode: String?
    /** Gets or sets a value indicating whether [supports synchronize]. */
    public var supportsSync: Bool?
    public var container: String?
    /** Gets or sets the name of the sort. */
    public var sortName: String?
    public var forcedSortName: String?
    /** Gets or sets the video3 D format. */
    public var video3DFormat: Video3DFormat?
    /** Gets or sets the premiere date. */
    public var premiereDate: Date?
    /** Gets or sets the external urls. */
    public var externalUrls: [ExternalUrl]?
    /** Gets or sets the media versions. */
    public var mediaSources: [MediaSourceInfo]?
    /** Gets or sets the critic rating. */
    public var criticRating: Float?
    public var productionLocations: [String]?
    /** Gets or sets the path. */
    public var path: String?
    public var enableMediaSourceDisplay: Bool?
    /** Gets or sets the official rating. */
    public var officialRating: String?
    /** Gets or sets the custom rating. */
    public var customRating: String?
    /** Gets or sets the channel identifier. */
    public var channelId: String?
    public var channelName: String?
    /** Gets or sets the overview. */
    public var overview: String?
    /** Gets or sets the taglines. */
    public var taglines: [String]?
    /** Gets or sets the genres. */
    public var genres: [String]?
    /** Gets or sets the community rating. */
    public var communityRating: Float?
    /** Gets or sets the cumulative run time ticks. */
    public var cumulativeRunTimeTicks: Int64?
    /** Gets or sets the run time ticks. */
    public var runTimeTicks: Int64?
    /** Gets or sets the play access. */
    public var playAccess: PlayAccess?
    /** Gets or sets the aspect ratio. */
    public var aspectRatio: String?
    /** Gets or sets the production year. */
    public var productionYear: Int?
    /** Gets or sets a value indicating whether this instance is place holder. */
    public var isPlaceHolder: Bool?
    /** Gets or sets the number. */
    public var number: String?
    public var channelNumber: String?
    /** Gets or sets the index number. */
    public var indexNumber: Int?
    /** Gets or sets the index number end. */
    public var indexNumberEnd: Int?
    /** Gets or sets the parent index number. */
    public var parentIndexNumber: Int?
    /** Gets or sets the trailer urls. */
    public var remoteTrailers: [MediaUrl]?
    /** Gets or sets the provider ids. */
    public var providerIds: [String: String]?
    /** Gets or sets a value indicating whether this instance is HD. */
    public var isHD: Bool?
    /** Gets or sets a value indicating whether this instance is folder. */
    public var isFolder: Bool?
    /** Gets or sets the parent id. */
    public var parentId: String?
    /** The base item kind. */
    public var type: BaseItemKind?
    /** Gets or sets the people. */
    public var people: [BaseItemPerson]?
    /** Gets or sets the studios. */
    public var studios: [NameGuidPair]?
    public var genreItems: [NameGuidPair]?
    /** Gets or sets wether the item has a logo, this will hold the Id of the Parent that has one. */
    public var parentLogoItemId: String?
    /** Gets or sets wether the item has any backdrops, this will hold the Id of the Parent that has one. */
    public var parentBackdropItemId: String?
    /** Gets or sets the parent backdrop image tags. */
    public var parentBackdropImageTags: [String]?
    /** Gets or sets the local trailer count. */
    public var localTrailerCount: Int?
    public var userData: BaseItemDtoUserData?
    /** Gets or sets the recursive item count. */
    public var recursiveItemCount: Int?
    /** Gets or sets the child count. */
    public var childCount: Int?
    /** Gets or sets the name of the series. */
    public var seriesName: String?
    /** Gets or sets the series id. */
    public var seriesId: String?
    /** Gets or sets the season identifier. */
    public var seasonId: String?
    /** Gets or sets the special feature count. */
    public var specialFeatureCount: Int?
    /** Gets or sets the display preferences id. */
    public var displayPreferencesId: String?
    /** Gets or sets the status. */
    public var status: String?
    /** Gets or sets the air time. */
    public var airTime: String?
    /** Gets or sets the air days. */
    public var airDays: [DayOfWeek]?
    /** Gets or sets the tags. */
    public var tags: [String]?
    /** Gets or sets the primary image aspect ratio, after image enhancements. */
    public var primaryImageAspectRatio: Double?
    /** Gets or sets the artists. */
    public var artists: [String]?
    /** Gets or sets the artist items. */
    public var artistItems: [NameGuidPair]?
    /** Gets or sets the album. */
    public var album: String?
    /** Gets or sets the type of the collection. */
    public var collectionType: String?
    /** Gets or sets the display order. */
    public var displayOrder: String?
    /** Gets or sets the album id. */
    public var albumId: String?
    /** Gets or sets the album image tag. */
    public var albumPrimaryImageTag: String?
    /** Gets or sets the series primary image tag. */
    public var seriesPrimaryImageTag: String?
    /** Gets or sets the album artist. */
    public var albumArtist: String?
    /** Gets or sets the album artists. */
    public var albumArtists: [NameGuidPair]?
    /** Gets or sets the name of the season. */
    public var seasonName: String?
    /** Gets or sets the media streams. */
    public var mediaStreams: [MediaStream]?
    /** Gets or sets the type of the video. */
    public var videoType: VideoType?
    /** Gets or sets the part count. */
    public var partCount: Int?
    public var mediaSourceCount: Int?
    /** Gets or sets the image tags. */
    public var imageTags: [String: String]?
    /** Gets or sets the backdrop image tags. */
    public var backdropImageTags: [String]?
    /** Gets or sets the screenshot image tags. */
    public var screenshotImageTags: [String]?
    /** Gets or sets the parent logo image tag. */
    public var parentLogoImageTag: String?
    /** Gets or sets wether the item has fan art, this will hold the Id of the Parent that has one. */
    public var parentArtItemId: String?
    /** Gets or sets the parent art image tag. */
    public var parentArtImageTag: String?
    /** Gets or sets the series thumb image tag. */
    public var seriesThumbImageTag: String?
    public var imageBlurHashes: BaseItemDtoImageBlurHashes?
    /** Gets or sets the series studio. */
    public var seriesStudio: String?
    /** Gets or sets the parent thumb item id. */
    public var parentThumbItemId: String?
    /** Gets or sets the parent thumb image tag. */
    public var parentThumbImageTag: String?
    /** Gets or sets the parent primary image item identifier. */
    public var parentPrimaryImageItemId: String?
    /** Gets or sets the parent primary image tag. */
    public var parentPrimaryImageTag: String?
    /** Gets or sets the chapters. */
    public var chapters: [ChapterInfo]?
    /** Gets or sets the type of the location. */
    public var locationType: LocationType?
    /** Gets or sets the type of the iso. */
    public var isoType: IsoType?
    /** Gets or sets the type of the media. */
    public var mediaType: String?
    /** Gets or sets the end date. */
    public var endDate: Date?
    /** Gets or sets the locked fields. */
    public var lockedFields: [MetadataField]?
    /** Gets or sets the trailer count. */
    public var trailerCount: Int?
    /** Gets or sets the movie count. */
    public var movieCount: Int?
    /** Gets or sets the series count. */
    public var seriesCount: Int?
    public var programCount: Int?
    /** Gets or sets the episode count. */
    public var episodeCount: Int?
    /** Gets or sets the song count. */
    public var songCount: Int?
    /** Gets or sets the album count. */
    public var albumCount: Int?
    public var artistCount: Int?
    /** Gets or sets the music video count. */
    public var musicVideoCount: Int?
    /** Gets or sets a value indicating whether [enable internet providers]. */
    public var lockData: Bool?
    public var width: Int?
    public var height: Int?
    public var cameraMake: String?
    public var cameraModel: String?
    public var software: String?
    public var exposureTime: Double?
    public var focalLength: Double?
    public var imageOrientation: ImageOrientation?
    public var aperture: Double?
    public var shutterSpeed: Double?
    public var latitude: Double?
    public var longitude: Double?
    public var altitude: Double?
    public var isoSpeedRating: Int?
    /** Gets or sets the series timer identifier. */
    public var seriesTimerId: String?
    /** Gets or sets the program identifier. */
    public var programId: String?
    /** Gets or sets the channel primary image tag. */
    public var channelPrimaryImageTag: String?
    /** Gets or sets the start date of the recording, in UTC. */
    public var startDate: Date?
    /** Gets or sets the completion percentage. */
    public var completionPercentage: Double?
    /** Gets or sets a value indicating whether this instance is repeat. */
    public var isRepeat: Bool?
    /** Gets or sets the episode title. */
    public var episodeTitle: String?
    /** Gets or sets the type of the channel. */
    public var channelType: ChannelType?
    /** Gets or sets the audio. */
    public var audio: ProgramAudio?
    /** Gets or sets a value indicating whether this instance is movie. */
    public var isMovie: Bool?
    /** Gets or sets a value indicating whether this instance is sports. */
    public var isSports: Bool?
    /** Gets or sets a value indicating whether this instance is series. */
    public var isSeries: Bool?
    /** Gets or sets a value indicating whether this instance is live. */
    public var isLive: Bool?
    /** Gets or sets a value indicating whether this instance is news. */
    public var isNews: Bool?
    /** Gets or sets a value indicating whether this instance is kids. */
    public var isKids: Bool?
    /** Gets or sets a value indicating whether this instance is premiere. */
    public var isPremiere: Bool?
    /** Gets or sets the timer identifier. */
    public var timerId: String?
    public var currentProgram: BaseItemDtoCurrentProgram?

    public init(name: String? = nil, originalTitle: String? = nil, serverId: String? = nil, id: String? = nil, etag: String? = nil, sourceType: String? = nil, playlistItemId: String? = nil, dateCreated: Date? = nil, dateLastMediaAdded: Date? = nil, extraType: String? = nil, airsBeforeSeasonNumber: Int? = nil, airsAfterSeasonNumber: Int? = nil, airsBeforeEpisodeNumber: Int? = nil, canDelete: Bool? = nil, canDownload: Bool? = nil, hasSubtitles: Bool? = nil, preferredMetadataLanguage: String? = nil, preferredMetadataCountryCode: String? = nil, supportsSync: Bool? = nil, container: String? = nil, sortName: String? = nil, forcedSortName: String? = nil, video3DFormat: Video3DFormat? = nil, premiereDate: Date? = nil, externalUrls: [ExternalUrl]? = nil, mediaSources: [MediaSourceInfo]? = nil, criticRating: Float? = nil, productionLocations: [String]? = nil, path: String? = nil, enableMediaSourceDisplay: Bool? = nil, officialRating: String? = nil, customRating: String? = nil, channelId: String? = nil, channelName: String? = nil, overview: String? = nil, taglines: [String]? = nil, genres: [String]? = nil, communityRating: Float? = nil, cumulativeRunTimeTicks: Int64? = nil, runTimeTicks: Int64? = nil, playAccess: PlayAccess? = nil, aspectRatio: String? = nil, productionYear: Int? = nil, isPlaceHolder: Bool? = nil, number: String? = nil, channelNumber: String? = nil, indexNumber: Int? = nil, indexNumberEnd: Int? = nil, parentIndexNumber: Int? = nil, remoteTrailers: [MediaUrl]? = nil, providerIds: [String: String]? = nil, isHD: Bool? = nil, isFolder: Bool? = nil, parentId: String? = nil, type: BaseItemKind? = nil, people: [BaseItemPerson]? = nil, studios: [NameGuidPair]? = nil, genreItems: [NameGuidPair]? = nil, parentLogoItemId: String? = nil, parentBackdropItemId: String? = nil, parentBackdropImageTags: [String]? = nil, localTrailerCount: Int? = nil, userData: BaseItemDtoUserData? = nil, recursiveItemCount: Int? = nil, childCount: Int? = nil, seriesName: String? = nil, seriesId: String? = nil, seasonId: String? = nil, specialFeatureCount: Int? = nil, displayPreferencesId: String? = nil, status: String? = nil, airTime: String? = nil, airDays: [DayOfWeek]? = nil, tags: [String]? = nil, primaryImageAspectRatio: Double? = nil, artists: [String]? = nil, artistItems: [NameGuidPair]? = nil, album: String? = nil, collectionType: String? = nil, displayOrder: String? = nil, albumId: String? = nil, albumPrimaryImageTag: String? = nil, seriesPrimaryImageTag: String? = nil, albumArtist: String? = nil, albumArtists: [NameGuidPair]? = nil, seasonName: String? = nil, mediaStreams: [MediaStream]? = nil, videoType: VideoType? = nil, partCount: Int? = nil, mediaSourceCount: Int? = nil, imageTags: [String: String]? = nil, backdropImageTags: [String]? = nil, screenshotImageTags: [String]? = nil, parentLogoImageTag: String? = nil, parentArtItemId: String? = nil, parentArtImageTag: String? = nil, seriesThumbImageTag: String? = nil, imageBlurHashes: BaseItemDtoImageBlurHashes? = nil, seriesStudio: String? = nil, parentThumbItemId: String? = nil, parentThumbImageTag: String? = nil, parentPrimaryImageItemId: String? = nil, parentPrimaryImageTag: String? = nil, chapters: [ChapterInfo]? = nil, locationType: LocationType? = nil, isoType: IsoType? = nil, mediaType: String? = nil, endDate: Date? = nil, lockedFields: [MetadataField]? = nil, trailerCount: Int? = nil, movieCount: Int? = nil, seriesCount: Int? = nil, programCount: Int? = nil, episodeCount: Int? = nil, songCount: Int? = nil, albumCount: Int? = nil, artistCount: Int? = nil, musicVideoCount: Int? = nil, lockData: Bool? = nil, width: Int? = nil, height: Int? = nil, cameraMake: String? = nil, cameraModel: String? = nil, software: String? = nil, exposureTime: Double? = nil, focalLength: Double? = nil, imageOrientation: ImageOrientation? = nil, aperture: Double? = nil, shutterSpeed: Double? = nil, latitude: Double? = nil, longitude: Double? = nil, altitude: Double? = nil, isoSpeedRating: Int? = nil, seriesTimerId: String? = nil, programId: String? = nil, channelPrimaryImageTag: String? = nil, startDate: Date? = nil, completionPercentage: Double? = nil, isRepeat: Bool? = nil, episodeTitle: String? = nil, channelType: ChannelType? = nil, audio: ProgramAudio? = nil, isMovie: Bool? = nil, isSports: Bool? = nil, isSeries: Bool? = nil, isLive: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isPremiere: Bool? = nil, timerId: String? = nil, currentProgram: BaseItemDtoCurrentProgram? = nil) {
        self.name = name
        self.originalTitle = originalTitle
        self.serverId = serverId
        self.id = id
        self.etag = etag
        self.sourceType = sourceType
        self.playlistItemId = playlistItemId
        self.dateCreated = dateCreated
        self.dateLastMediaAdded = dateLastMediaAdded
        self.extraType = extraType
        self.airsBeforeSeasonNumber = airsBeforeSeasonNumber
        self.airsAfterSeasonNumber = airsAfterSeasonNumber
        self.airsBeforeEpisodeNumber = airsBeforeEpisodeNumber
        self.canDelete = canDelete
        self.canDownload = canDownload
        self.hasSubtitles = hasSubtitles
        self.preferredMetadataLanguage = preferredMetadataLanguage
        self.preferredMetadataCountryCode = preferredMetadataCountryCode
        self.supportsSync = supportsSync
        self.container = container
        self.sortName = sortName
        self.forcedSortName = forcedSortName
        self.video3DFormat = video3DFormat
        self.premiereDate = premiereDate
        self.externalUrls = externalUrls
        self.mediaSources = mediaSources
        self.criticRating = criticRating
        self.productionLocations = productionLocations
        self.path = path
        self.enableMediaSourceDisplay = enableMediaSourceDisplay
        self.officialRating = officialRating
        self.customRating = customRating
        self.channelId = channelId
        self.channelName = channelName
        self.overview = overview
        self.taglines = taglines
        self.genres = genres
        self.communityRating = communityRating
        self.cumulativeRunTimeTicks = cumulativeRunTimeTicks
        self.runTimeTicks = runTimeTicks
        self.playAccess = playAccess
        self.aspectRatio = aspectRatio
        self.productionYear = productionYear
        self.isPlaceHolder = isPlaceHolder
        self.number = number
        self.channelNumber = channelNumber
        self.indexNumber = indexNumber
        self.indexNumberEnd = indexNumberEnd
        self.parentIndexNumber = parentIndexNumber
        self.remoteTrailers = remoteTrailers
        self.providerIds = providerIds
        self.isHD = isHD
        self.isFolder = isFolder
        self.parentId = parentId
        self.type = type
        self.people = people
        self.studios = studios
        self.genreItems = genreItems
        self.parentLogoItemId = parentLogoItemId
        self.parentBackdropItemId = parentBackdropItemId
        self.parentBackdropImageTags = parentBackdropImageTags
        self.localTrailerCount = localTrailerCount
        self.userData = userData
        self.recursiveItemCount = recursiveItemCount
        self.childCount = childCount
        self.seriesName = seriesName
        self.seriesId = seriesId
        self.seasonId = seasonId
        self.specialFeatureCount = specialFeatureCount
        self.displayPreferencesId = displayPreferencesId
        self.status = status
        self.airTime = airTime
        self.airDays = airDays
        self.tags = tags
        self.primaryImageAspectRatio = primaryImageAspectRatio
        self.artists = artists
        self.artistItems = artistItems
        self.album = album
        self.collectionType = collectionType
        self.displayOrder = displayOrder
        self.albumId = albumId
        self.albumPrimaryImageTag = albumPrimaryImageTag
        self.seriesPrimaryImageTag = seriesPrimaryImageTag
        self.albumArtist = albumArtist
        self.albumArtists = albumArtists
        self.seasonName = seasonName
        self.mediaStreams = mediaStreams
        self.videoType = videoType
        self.partCount = partCount
        self.mediaSourceCount = mediaSourceCount
        self.imageTags = imageTags
        self.backdropImageTags = backdropImageTags
        self.screenshotImageTags = screenshotImageTags
        self.parentLogoImageTag = parentLogoImageTag
        self.parentArtItemId = parentArtItemId
        self.parentArtImageTag = parentArtImageTag
        self.seriesThumbImageTag = seriesThumbImageTag
        self.imageBlurHashes = imageBlurHashes
        self.seriesStudio = seriesStudio
        self.parentThumbItemId = parentThumbItemId
        self.parentThumbImageTag = parentThumbImageTag
        self.parentPrimaryImageItemId = parentPrimaryImageItemId
        self.parentPrimaryImageTag = parentPrimaryImageTag
        self.chapters = chapters
        self.locationType = locationType
        self.isoType = isoType
        self.mediaType = mediaType
        self.endDate = endDate
        self.lockedFields = lockedFields
        self.trailerCount = trailerCount
        self.movieCount = movieCount
        self.seriesCount = seriesCount
        self.programCount = programCount
        self.episodeCount = episodeCount
        self.songCount = songCount
        self.albumCount = albumCount
        self.artistCount = artistCount
        self.musicVideoCount = musicVideoCount
        self.lockData = lockData
        self.width = width
        self.height = height
        self.cameraMake = cameraMake
        self.cameraModel = cameraModel
        self.software = software
        self.exposureTime = exposureTime
        self.focalLength = focalLength
        self.imageOrientation = imageOrientation
        self.aperture = aperture
        self.shutterSpeed = shutterSpeed
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.isoSpeedRating = isoSpeedRating
        self.seriesTimerId = seriesTimerId
        self.programId = programId
        self.channelPrimaryImageTag = channelPrimaryImageTag
        self.startDate = startDate
        self.completionPercentage = completionPercentage
        self.isRepeat = isRepeat
        self.episodeTitle = episodeTitle
        self.channelType = channelType
        self.audio = audio
        self.isMovie = isMovie
        self.isSports = isSports
        self.isSeries = isSeries
        self.isLive = isLive
        self.isNews = isNews
        self.isKids = isKids
        self.isPremiere = isPremiere
        self.timerId = timerId
        self.currentProgram = currentProgram
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case originalTitle = "OriginalTitle"
        case serverId = "ServerId"
        case id = "Id"
        case etag = "Etag"
        case sourceType = "SourceType"
        case playlistItemId = "PlaylistItemId"
        case dateCreated = "DateCreated"
        case dateLastMediaAdded = "DateLastMediaAdded"
        case extraType = "ExtraType"
        case airsBeforeSeasonNumber = "AirsBeforeSeasonNumber"
        case airsAfterSeasonNumber = "AirsAfterSeasonNumber"
        case airsBeforeEpisodeNumber = "AirsBeforeEpisodeNumber"
        case canDelete = "CanDelete"
        case canDownload = "CanDownload"
        case hasSubtitles = "HasSubtitles"
        case preferredMetadataLanguage = "PreferredMetadataLanguage"
        case preferredMetadataCountryCode = "PreferredMetadataCountryCode"
        case supportsSync = "SupportsSync"
        case container = "Container"
        case sortName = "SortName"
        case forcedSortName = "ForcedSortName"
        case video3DFormat = "Video3DFormat"
        case premiereDate = "PremiereDate"
        case externalUrls = "ExternalUrls"
        case mediaSources = "MediaSources"
        case criticRating = "CriticRating"
        case productionLocations = "ProductionLocations"
        case path = "Path"
        case enableMediaSourceDisplay = "EnableMediaSourceDisplay"
        case officialRating = "OfficialRating"
        case customRating = "CustomRating"
        case channelId = "ChannelId"
        case channelName = "ChannelName"
        case overview = "Overview"
        case taglines = "Taglines"
        case genres = "Genres"
        case communityRating = "CommunityRating"
        case cumulativeRunTimeTicks = "CumulativeRunTimeTicks"
        case runTimeTicks = "RunTimeTicks"
        case playAccess = "PlayAccess"
        case aspectRatio = "AspectRatio"
        case productionYear = "ProductionYear"
        case isPlaceHolder = "IsPlaceHolder"
        case number = "Number"
        case channelNumber = "ChannelNumber"
        case indexNumber = "IndexNumber"
        case indexNumberEnd = "IndexNumberEnd"
        case parentIndexNumber = "ParentIndexNumber"
        case remoteTrailers = "RemoteTrailers"
        case providerIds = "ProviderIds"
        case isHD = "IsHD"
        case isFolder = "IsFolder"
        case parentId = "ParentId"
        case type = "Type"
        case people = "People"
        case studios = "Studios"
        case genreItems = "GenreItems"
        case parentLogoItemId = "ParentLogoItemId"
        case parentBackdropItemId = "ParentBackdropItemId"
        case parentBackdropImageTags = "ParentBackdropImageTags"
        case localTrailerCount = "LocalTrailerCount"
        case userData = "UserData"
        case recursiveItemCount = "RecursiveItemCount"
        case childCount = "ChildCount"
        case seriesName = "SeriesName"
        case seriesId = "SeriesId"
        case seasonId = "SeasonId"
        case specialFeatureCount = "SpecialFeatureCount"
        case displayPreferencesId = "DisplayPreferencesId"
        case status = "Status"
        case airTime = "AirTime"
        case airDays = "AirDays"
        case tags = "Tags"
        case primaryImageAspectRatio = "PrimaryImageAspectRatio"
        case artists = "Artists"
        case artistItems = "ArtistItems"
        case album = "Album"
        case collectionType = "CollectionType"
        case displayOrder = "DisplayOrder"
        case albumId = "AlbumId"
        case albumPrimaryImageTag = "AlbumPrimaryImageTag"
        case seriesPrimaryImageTag = "SeriesPrimaryImageTag"
        case albumArtist = "AlbumArtist"
        case albumArtists = "AlbumArtists"
        case seasonName = "SeasonName"
        case mediaStreams = "MediaStreams"
        case videoType = "VideoType"
        case partCount = "PartCount"
        case mediaSourceCount = "MediaSourceCount"
        case imageTags = "ImageTags"
        case backdropImageTags = "BackdropImageTags"
        case screenshotImageTags = "ScreenshotImageTags"
        case parentLogoImageTag = "ParentLogoImageTag"
        case parentArtItemId = "ParentArtItemId"
        case parentArtImageTag = "ParentArtImageTag"
        case seriesThumbImageTag = "SeriesThumbImageTag"
        case imageBlurHashes = "ImageBlurHashes"
        case seriesStudio = "SeriesStudio"
        case parentThumbItemId = "ParentThumbItemId"
        case parentThumbImageTag = "ParentThumbImageTag"
        case parentPrimaryImageItemId = "ParentPrimaryImageItemId"
        case parentPrimaryImageTag = "ParentPrimaryImageTag"
        case chapters = "Chapters"
        case locationType = "LocationType"
        case isoType = "IsoType"
        case mediaType = "MediaType"
        case endDate = "EndDate"
        case lockedFields = "LockedFields"
        case trailerCount = "TrailerCount"
        case movieCount = "MovieCount"
        case seriesCount = "SeriesCount"
        case programCount = "ProgramCount"
        case episodeCount = "EpisodeCount"
        case songCount = "SongCount"
        case albumCount = "AlbumCount"
        case artistCount = "ArtistCount"
        case musicVideoCount = "MusicVideoCount"
        case lockData = "LockData"
        case width = "Width"
        case height = "Height"
        case cameraMake = "CameraMake"
        case cameraModel = "CameraModel"
        case software = "Software"
        case exposureTime = "ExposureTime"
        case focalLength = "FocalLength"
        case imageOrientation = "ImageOrientation"
        case aperture = "Aperture"
        case shutterSpeed = "ShutterSpeed"
        case latitude = "Latitude"
        case longitude = "Longitude"
        case altitude = "Altitude"
        case isoSpeedRating = "IsoSpeedRating"
        case seriesTimerId = "SeriesTimerId"
        case programId = "ProgramId"
        case channelPrimaryImageTag = "ChannelPrimaryImageTag"
        case startDate = "StartDate"
        case completionPercentage = "CompletionPercentage"
        case isRepeat = "IsRepeat"
        case episodeTitle = "EpisodeTitle"
        case channelType = "ChannelType"
        case audio = "Audio"
        case isMovie = "IsMovie"
        case isSports = "IsSports"
        case isSeries = "IsSeries"
        case isLive = "IsLive"
        case isNews = "IsNews"
        case isKids = "IsKids"
        case isPremiere = "IsPremiere"
        case timerId = "TimerId"
        case currentProgram = "CurrentProgram"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(originalTitle, forKey: .originalTitle)
        try container.encodeIfPresent(serverId, forKey: .serverId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(sourceType, forKey: .sourceType)
        try container.encodeIfPresent(playlistItemId, forKey: .playlistItemId)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastMediaAdded, forKey: .dateLastMediaAdded)
        try container.encodeIfPresent(extraType, forKey: .extraType)
        try container.encodeIfPresent(airsBeforeSeasonNumber, forKey: .airsBeforeSeasonNumber)
        try container.encodeIfPresent(airsAfterSeasonNumber, forKey: .airsAfterSeasonNumber)
        try container.encodeIfPresent(airsBeforeEpisodeNumber, forKey: .airsBeforeEpisodeNumber)
        try container.encodeIfPresent(canDelete, forKey: .canDelete)
        try container.encodeIfPresent(canDownload, forKey: .canDownload)
        try container.encodeIfPresent(hasSubtitles, forKey: .hasSubtitles)
        try container.encodeIfPresent(preferredMetadataLanguage, forKey: .preferredMetadataLanguage)
        try container.encodeIfPresent(preferredMetadataCountryCode, forKey: .preferredMetadataCountryCode)
        try container.encodeIfPresent(supportsSync, forKey: .supportsSync)
        try container.encodeIfPresent(container, forKey: .container)
        try container.encodeIfPresent(sortName, forKey: .sortName)
        try container.encodeIfPresent(forcedSortName, forKey: .forcedSortName)
        try container.encodeIfPresent(video3DFormat, forKey: .video3DFormat)
        try container.encodeIfPresent(premiereDate, forKey: .premiereDate)
        try container.encodeIfPresent(externalUrls, forKey: .externalUrls)
        try container.encodeIfPresent(mediaSources, forKey: .mediaSources)
        try container.encodeIfPresent(criticRating, forKey: .criticRating)
        try container.encodeIfPresent(productionLocations, forKey: .productionLocations)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(enableMediaSourceDisplay, forKey: .enableMediaSourceDisplay)
        try container.encodeIfPresent(officialRating, forKey: .officialRating)
        try container.encodeIfPresent(customRating, forKey: .customRating)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(channelName, forKey: .channelName)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(taglines, forKey: .taglines)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(communityRating, forKey: .communityRating)
        try container.encodeIfPresent(cumulativeRunTimeTicks, forKey: .cumulativeRunTimeTicks)
        try container.encodeIfPresent(runTimeTicks, forKey: .runTimeTicks)
        try container.encodeIfPresent(playAccess, forKey: .playAccess)
        try container.encodeIfPresent(aspectRatio, forKey: .aspectRatio)
        try container.encodeIfPresent(productionYear, forKey: .productionYear)
        try container.encodeIfPresent(isPlaceHolder, forKey: .isPlaceHolder)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(channelNumber, forKey: .channelNumber)
        try container.encodeIfPresent(indexNumber, forKey: .indexNumber)
        try container.encodeIfPresent(indexNumberEnd, forKey: .indexNumberEnd)
        try container.encodeIfPresent(parentIndexNumber, forKey: .parentIndexNumber)
        try container.encodeIfPresent(remoteTrailers, forKey: .remoteTrailers)
        try container.encodeIfPresent(providerIds, forKey: .providerIds)
        try container.encodeIfPresent(isHD, forKey: .isHD)
        try container.encodeIfPresent(isFolder, forKey: .isFolder)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(people, forKey: .people)
        try container.encodeIfPresent(studios, forKey: .studios)
        try container.encodeIfPresent(genreItems, forKey: .genreItems)
        try container.encodeIfPresent(parentLogoItemId, forKey: .parentLogoItemId)
        try container.encodeIfPresent(parentBackdropItemId, forKey: .parentBackdropItemId)
        try container.encodeIfPresent(parentBackdropImageTags, forKey: .parentBackdropImageTags)
        try container.encodeIfPresent(localTrailerCount, forKey: .localTrailerCount)
        try container.encodeIfPresent(userData, forKey: .userData)
        try container.encodeIfPresent(recursiveItemCount, forKey: .recursiveItemCount)
        try container.encodeIfPresent(childCount, forKey: .childCount)
        try container.encodeIfPresent(seriesName, forKey: .seriesName)
        try container.encodeIfPresent(seriesId, forKey: .seriesId)
        try container.encodeIfPresent(seasonId, forKey: .seasonId)
        try container.encodeIfPresent(specialFeatureCount, forKey: .specialFeatureCount)
        try container.encodeIfPresent(displayPreferencesId, forKey: .displayPreferencesId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(airTime, forKey: .airTime)
        try container.encodeIfPresent(airDays, forKey: .airDays)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(primaryImageAspectRatio, forKey: .primaryImageAspectRatio)
        try container.encodeIfPresent(artists, forKey: .artists)
        try container.encodeIfPresent(artistItems, forKey: .artistItems)
        try container.encodeIfPresent(album, forKey: .album)
        try container.encodeIfPresent(collectionType, forKey: .collectionType)
        try container.encodeIfPresent(displayOrder, forKey: .displayOrder)
        try container.encodeIfPresent(albumId, forKey: .albumId)
        try container.encodeIfPresent(albumPrimaryImageTag, forKey: .albumPrimaryImageTag)
        try container.encodeIfPresent(seriesPrimaryImageTag, forKey: .seriesPrimaryImageTag)
        try container.encodeIfPresent(albumArtist, forKey: .albumArtist)
        try container.encodeIfPresent(albumArtists, forKey: .albumArtists)
        try container.encodeIfPresent(seasonName, forKey: .seasonName)
        try container.encodeIfPresent(mediaStreams, forKey: .mediaStreams)
        try container.encodeIfPresent(videoType, forKey: .videoType)
        try container.encodeIfPresent(partCount, forKey: .partCount)
        try container.encodeIfPresent(mediaSourceCount, forKey: .mediaSourceCount)
        try container.encodeIfPresent(imageTags, forKey: .imageTags)
        try container.encodeIfPresent(backdropImageTags, forKey: .backdropImageTags)
        try container.encodeIfPresent(screenshotImageTags, forKey: .screenshotImageTags)
        try container.encodeIfPresent(parentLogoImageTag, forKey: .parentLogoImageTag)
        try container.encodeIfPresent(parentArtItemId, forKey: .parentArtItemId)
        try container.encodeIfPresent(parentArtImageTag, forKey: .parentArtImageTag)
        try container.encodeIfPresent(seriesThumbImageTag, forKey: .seriesThumbImageTag)
        try container.encodeIfPresent(imageBlurHashes, forKey: .imageBlurHashes)
        try container.encodeIfPresent(seriesStudio, forKey: .seriesStudio)
        try container.encodeIfPresent(parentThumbItemId, forKey: .parentThumbItemId)
        try container.encodeIfPresent(parentThumbImageTag, forKey: .parentThumbImageTag)
        try container.encodeIfPresent(parentPrimaryImageItemId, forKey: .parentPrimaryImageItemId)
        try container.encodeIfPresent(parentPrimaryImageTag, forKey: .parentPrimaryImageTag)
        try container.encodeIfPresent(chapters, forKey: .chapters)
        try container.encodeIfPresent(locationType, forKey: .locationType)
        try container.encodeIfPresent(isoType, forKey: .isoType)
        try container.encodeIfPresent(mediaType, forKey: .mediaType)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(lockedFields, forKey: .lockedFields)
        try container.encodeIfPresent(trailerCount, forKey: .trailerCount)
        try container.encodeIfPresent(movieCount, forKey: .movieCount)
        try container.encodeIfPresent(seriesCount, forKey: .seriesCount)
        try container.encodeIfPresent(programCount, forKey: .programCount)
        try container.encodeIfPresent(episodeCount, forKey: .episodeCount)
        try container.encodeIfPresent(songCount, forKey: .songCount)
        try container.encodeIfPresent(albumCount, forKey: .albumCount)
        try container.encodeIfPresent(artistCount, forKey: .artistCount)
        try container.encodeIfPresent(musicVideoCount, forKey: .musicVideoCount)
        try container.encodeIfPresent(lockData, forKey: .lockData)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(cameraMake, forKey: .cameraMake)
        try container.encodeIfPresent(cameraModel, forKey: .cameraModel)
        try container.encodeIfPresent(software, forKey: .software)
        try container.encodeIfPresent(exposureTime, forKey: .exposureTime)
        try container.encodeIfPresent(focalLength, forKey: .focalLength)
        try container.encodeIfPresent(imageOrientation, forKey: .imageOrientation)
        try container.encodeIfPresent(aperture, forKey: .aperture)
        try container.encodeIfPresent(shutterSpeed, forKey: .shutterSpeed)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(altitude, forKey: .altitude)
        try container.encodeIfPresent(isoSpeedRating, forKey: .isoSpeedRating)
        try container.encodeIfPresent(seriesTimerId, forKey: .seriesTimerId)
        try container.encodeIfPresent(programId, forKey: .programId)
        try container.encodeIfPresent(channelPrimaryImageTag, forKey: .channelPrimaryImageTag)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(completionPercentage, forKey: .completionPercentage)
        try container.encodeIfPresent(isRepeat, forKey: .isRepeat)
        try container.encodeIfPresent(episodeTitle, forKey: .episodeTitle)
        try container.encodeIfPresent(channelType, forKey: .channelType)
        try container.encodeIfPresent(audio, forKey: .audio)
        try container.encodeIfPresent(isMovie, forKey: .isMovie)
        try container.encodeIfPresent(isSports, forKey: .isSports)
        try container.encodeIfPresent(isSeries, forKey: .isSeries)
        try container.encodeIfPresent(isLive, forKey: .isLive)
        try container.encodeIfPresent(isNews, forKey: .isNews)
        try container.encodeIfPresent(isKids, forKey: .isKids)
        try container.encodeIfPresent(isPremiere, forKey: .isPremiere)
        try container.encodeIfPresent(timerId, forKey: .timerId)
        try container.encodeIfPresent(currentProgram, forKey: .currentProgram)
    }
}

