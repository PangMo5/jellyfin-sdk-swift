//
// NotificationOption.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NotificationOption: Codable, Hashable {

    public var type: String?
    /** Gets or sets user Ids to not monitor (it&#39;s opt out). */
    public var disabledMonitorUsers: [String]?
    /** Gets or sets user Ids to send to (if SendToUserMode &#x3D;&#x3D; Custom). */
    public var sendToUsers: [String]?
    /** Gets or sets a value indicating whether this MediaBrowser.Model.Notifications.NotificationOption is enabled. */
    public var enabled: Bool?
    /** Gets or sets the disabled services. */
    public var disabledServices: [String]?
    /** Gets or sets the send to user mode. */
    public var sendToUserMode: SendToUserType?

    public init(type: String? = nil, disabledMonitorUsers: [String]? = nil, sendToUsers: [String]? = nil, enabled: Bool? = nil, disabledServices: [String]? = nil, sendToUserMode: SendToUserType? = nil) {
        self.type = type
        self.disabledMonitorUsers = disabledMonitorUsers
        self.sendToUsers = sendToUsers
        self.enabled = enabled
        self.disabledServices = disabledServices
        self.sendToUserMode = sendToUserMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type = "Type"
        case disabledMonitorUsers = "DisabledMonitorUsers"
        case sendToUsers = "SendToUsers"
        case enabled = "Enabled"
        case disabledServices = "DisabledServices"
        case sendToUserMode = "SendToUserMode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(type, forKey: .type)
        try encoderContainer.encodeIfPresent(disabledMonitorUsers, forKey: .disabledMonitorUsers)
        try encoderContainer.encodeIfPresent(sendToUsers, forKey: .sendToUsers)
        try encoderContainer.encodeIfPresent(enabled, forKey: .enabled)
        try encoderContainer.encodeIfPresent(disabledServices, forKey: .disabledServices)
        try encoderContainer.encodeIfPresent(sendToUserMode, forKey: .sendToUserMode)
    }
}
