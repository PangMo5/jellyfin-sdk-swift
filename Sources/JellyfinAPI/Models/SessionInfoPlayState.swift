//
// SessionInfoPlayState.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SessionInfoPlayState: Codable, JSONEncodable, Hashable {

    /** Gets or sets the now playing position ticks. */
    public var positionTicks: Int64?
    /** Gets or sets a value indicating whether this instance can seek. */
    public var canSeek: Bool?
    /** Gets or sets a value indicating whether this instance is paused. */
    public var isPaused: Bool?
    /** Gets or sets a value indicating whether this instance is muted. */
    public var isMuted: Bool?
    /** Gets or sets the volume level. */
    public var volumeLevel: Int?
    /** Gets or sets the index of the now playing audio stream. */
    public var audioStreamIndex: Int?
    /** Gets or sets the index of the now playing subtitle stream. */
    public var subtitleStreamIndex: Int?
    /** Gets or sets the now playing media version identifier. */
    public var mediaSourceId: String?
    /** Gets or sets the play method. */
    public var playMethod: PlayMethod?
    /** Gets or sets the repeat mode. */
    public var repeatMode: RepeatMode?
    /** Gets or sets the now playing live stream identifier. */
    public var liveStreamId: String?

    public init(positionTicks: Int64? = nil, canSeek: Bool? = nil, isPaused: Bool? = nil, isMuted: Bool? = nil, volumeLevel: Int? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, mediaSourceId: String? = nil, playMethod: PlayMethod? = nil, repeatMode: RepeatMode? = nil, liveStreamId: String? = nil) {
        self.positionTicks = positionTicks
        self.canSeek = canSeek
        self.isPaused = isPaused
        self.isMuted = isMuted
        self.volumeLevel = volumeLevel
        self.audioStreamIndex = audioStreamIndex
        self.subtitleStreamIndex = subtitleStreamIndex
        self.mediaSourceId = mediaSourceId
        self.playMethod = playMethod
        self.repeatMode = repeatMode
        self.liveStreamId = liveStreamId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case positionTicks = "PositionTicks"
        case canSeek = "CanSeek"
        case isPaused = "IsPaused"
        case isMuted = "IsMuted"
        case volumeLevel = "VolumeLevel"
        case audioStreamIndex = "AudioStreamIndex"
        case subtitleStreamIndex = "SubtitleStreamIndex"
        case mediaSourceId = "MediaSourceId"
        case playMethod = "PlayMethod"
        case repeatMode = "RepeatMode"
        case liveStreamId = "LiveStreamId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(positionTicks, forKey: .positionTicks)
        try container.encodeIfPresent(canSeek, forKey: .canSeek)
        try container.encodeIfPresent(isPaused, forKey: .isPaused)
        try container.encodeIfPresent(isMuted, forKey: .isMuted)
        try container.encodeIfPresent(volumeLevel, forKey: .volumeLevel)
        try container.encodeIfPresent(audioStreamIndex, forKey: .audioStreamIndex)
        try container.encodeIfPresent(subtitleStreamIndex, forKey: .subtitleStreamIndex)
        try container.encodeIfPresent(mediaSourceId, forKey: .mediaSourceId)
        try container.encodeIfPresent(playMethod, forKey: .playMethod)
        try container.encodeIfPresent(repeatMode, forKey: .repeatMode)
        try container.encodeIfPresent(liveStreamId, forKey: .liveStreamId)
    }
}

