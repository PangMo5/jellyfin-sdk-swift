//
// TaskTriggerInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Class TaskTriggerInfo. */
public struct TaskTriggerInfo: Codable, JSONEncodable, Hashable {

    /** Gets or sets the type. */
    public var type: String?
    /** Gets or sets the time of day. */
    public var timeOfDayTicks: Int64?
    /** Gets or sets the interval. */
    public var intervalTicks: Int64?
    /** Gets or sets the day of week. */
    public var dayOfWeek: DayOfWeek?
    /** Gets or sets the maximum runtime ticks. */
    public var maxRuntimeTicks: Int64?

    public init(type: String? = nil, timeOfDayTicks: Int64? = nil, intervalTicks: Int64? = nil, dayOfWeek: DayOfWeek? = nil, maxRuntimeTicks: Int64? = nil) {
        self.type = type
        self.timeOfDayTicks = timeOfDayTicks
        self.intervalTicks = intervalTicks
        self.dayOfWeek = dayOfWeek
        self.maxRuntimeTicks = maxRuntimeTicks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type = "Type"
        case timeOfDayTicks = "TimeOfDayTicks"
        case intervalTicks = "IntervalTicks"
        case dayOfWeek = "DayOfWeek"
        case maxRuntimeTicks = "MaxRuntimeTicks"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(timeOfDayTicks, forKey: .timeOfDayTicks)
        try container.encodeIfPresent(intervalTicks, forKey: .intervalTicks)
        try container.encodeIfPresent(dayOfWeek, forKey: .dayOfWeek)
        try container.encodeIfPresent(maxRuntimeTicks, forKey: .maxRuntimeTicks)
    }
}

