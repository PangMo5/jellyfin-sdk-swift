//
// ConfigurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
#if canImport(Combine)
import Combine
#endif

open class ConfigurationAPI {
    /**
     Gets application configuration.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<ServerConfiguration, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getConfiguration(apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<ServerConfiguration, Error> {
        return Future<ServerConfiguration, Error>.init { promise in
            getConfigurationWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Gets application configuration.
     - GET /System/Configuration
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<ServerConfiguration> 
     */
    open class func getConfigurationWithRequestBuilder() -> RequestBuilder<ServerConfiguration> {
        let urlPath = "/System/Configuration"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ServerConfiguration>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a default MetadataOptions object.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<MetadataOptions, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDefaultMetadataOptions(apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<MetadataOptions, Error> {
        return Future<MetadataOptions, Error>.init { promise in
            getDefaultMetadataOptionsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a default MetadataOptions object.
     - GET /System/Configuration/MetadataOptions/Default
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<MetadataOptions> 
     */
    open class func getDefaultMetadataOptionsWithRequestBuilder() -> RequestBuilder<MetadataOptions> {
        let urlPath = "/System/Configuration/MetadataOptions/Default"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MetadataOptions>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a named configuration.
     
     - parameter key: (path) Configuration key. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNamedConfiguration(key: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<URL, Error> {
        return Future<URL, Error>.init { promise in
            getNamedConfigurationWithRequestBuilder(key: key).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a named configuration.
     - GET /System/Configuration/{key}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter key: (path) Configuration key. 
     - returns: RequestBuilder<URL> 
     */
    open class func getNamedConfigurationWithRequestBuilder(key: String) -> RequestBuilder<URL> {
        var urlPath = "/System/Configuration/{key}"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates application configuration.
     
     - parameter updateConfigurationRequest: (body) Configuration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateConfiguration(updateConfigurationRequest: UpdateConfigurationRequest, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            updateConfigurationWithRequestBuilder(updateConfigurationRequest: updateConfigurationRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Updates application configuration.
     - POST /System/Configuration
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter updateConfigurationRequest: (body) Configuration. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateConfigurationWithRequestBuilder(updateConfigurationRequest: UpdateConfigurationRequest) -> RequestBuilder<Void> {
        let urlPath = "/System/Configuration"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateConfigurationRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates the path to the media encoder.
     
     - parameter updateMediaEncoderPathRequest: (body) Media encoder path form body. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateMediaEncoderPath(updateMediaEncoderPathRequest: UpdateMediaEncoderPathRequest, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            updateMediaEncoderPathWithRequestBuilder(updateMediaEncoderPathRequest: updateMediaEncoderPathRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Updates the path to the media encoder.
     - POST /System/MediaEncoder/Path
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter updateMediaEncoderPathRequest: (body) Media encoder path form body. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateMediaEncoderPathWithRequestBuilder(updateMediaEncoderPathRequest: UpdateMediaEncoderPathRequest) -> RequestBuilder<Void> {
        let urlPath = "/System/MediaEncoder/Path"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMediaEncoderPathRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates named configuration.
     
     - parameter key: (path) Configuration key. 
     - parameter body: (body) Configuration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateNamedConfiguration(key: String, body: AnyCodable, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            updateNamedConfigurationWithRequestBuilder(key: key, body: body).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Updates named configuration.
     - POST /System/Configuration/{key}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter key: (path) Configuration key. 
     - parameter body: (body) Configuration. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateNamedConfigurationWithRequestBuilder(key: String, body: AnyCodable) -> RequestBuilder<Void> {
        var urlPath = "/System/Configuration/{key}"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
