//
// LocalizationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LocalizationAPI {

    /**
     Gets known countries.
     
     - returns: AnyPublisher<[CountryInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCountries() -> AnyPublisher<[CountryInfo], Error> {
        var requestTask: RequestTask?
        return Future<[CountryInfo], Error> { promise in
            requestTask = getCountriesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets known countries.
     - GET /Localization/Countries
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[CountryInfo]> 
     */
    open class func getCountriesWithRequestBuilder() -> RequestBuilder<[CountryInfo]> {
        let localVariablePath = "/Localization/Countries"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CountryInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets known cultures.
     
     - returns: AnyPublisher<[CultureDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCultures() -> AnyPublisher<[CultureDto], Error> {
        var requestTask: RequestTask?
        return Future<[CultureDto], Error> { promise in
            requestTask = getCulturesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets known cultures.
     - GET /Localization/Cultures
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[CultureDto]> 
     */
    open class func getCulturesWithRequestBuilder() -> RequestBuilder<[CultureDto]> {
        let localVariablePath = "/Localization/Cultures"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CultureDto]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets localization options.
     
     - returns: AnyPublisher<[LocalizationOption], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getLocalizationOptions() -> AnyPublisher<[LocalizationOption], Error> {
        var requestTask: RequestTask?
        return Future<[LocalizationOption], Error> { promise in
            requestTask = getLocalizationOptionsWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets localization options.
     - GET /Localization/Options
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[LocalizationOption]> 
     */
    open class func getLocalizationOptionsWithRequestBuilder() -> RequestBuilder<[LocalizationOption]> {
        let localVariablePath = "/Localization/Options"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LocalizationOption]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets known parental ratings.
     
     - returns: AnyPublisher<[ParentalRating], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getParentalRatings() -> AnyPublisher<[ParentalRating], Error> {
        var requestTask: RequestTask?
        return Future<[ParentalRating], Error> { promise in
            requestTask = getParentalRatingsWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets known parental ratings.
     - GET /Localization/ParentalRatings
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[ParentalRating]> 
     */
    open class func getParentalRatingsWithRequestBuilder() -> RequestBuilder<[ParentalRating]> {
        let localVariablePath = "/Localization/ParentalRatings"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ParentalRating]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
