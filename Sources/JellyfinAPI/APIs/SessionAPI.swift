//
// SessionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SessionAPI {

    /**
     Adds an additional user to a session.
     
     - parameter sessionId: (path) The session id. 
     - parameter userId: (path) The user id. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addUserToSession(sessionId: String, userId: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = addUserToSessionWithRequestBuilder(sessionId: sessionId, userId: userId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Adds an additional user to a session.
     - POST /Sessions/{sessionId}/User/{userId}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter userId: (path) The user id. 
     - returns: RequestBuilder<Void> 
     */
    open class func addUserToSessionWithRequestBuilder(sessionId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/User/{userId}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Instructs a session to browse to an item or view.
     
     - parameter sessionId: (path) The session Id. 
     - parameter itemType: (query) The type of item to browse to. 
     - parameter itemId: (query) The Id of the item. 
     - parameter itemName: (query) The name of the item. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func displayContent(sessionId: String, itemType: BaseItemKind, itemId: String, itemName: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = displayContentWithRequestBuilder(sessionId: sessionId, itemType: itemType, itemId: itemId, itemName: itemName).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Instructs a session to browse to an item or view.
     - POST /Sessions/{sessionId}/Viewing
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session Id. 
     - parameter itemType: (query) The type of item to browse to. 
     - parameter itemId: (query) The Id of the item. 
     - parameter itemName: (query) The name of the item. 
     - returns: RequestBuilder<Void> 
     */
    open class func displayContentWithRequestBuilder(sessionId: String, itemType: BaseItemKind, itemId: String, itemName: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/Viewing"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "itemType": itemType.encodeToJSON(),
            "itemId": itemId.encodeToJSON(),
            "itemName": itemName.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all auth providers.
     
     - returns: AnyPublisher<[NameIdPair], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAuthProviders() -> AnyPublisher<[NameIdPair], Error> {
        var requestTask: RequestTask?
        return Future<[NameIdPair], Error> { promise in
            requestTask = getAuthProvidersWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get all auth providers.
     - GET /Auth/Providers
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getAuthProvidersWithRequestBuilder() -> RequestBuilder<[NameIdPair]> {
        let localVariablePath = "/Auth/Providers"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NameIdPair]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all password reset providers.
     
     - returns: AnyPublisher<[NameIdPair], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPasswordResetProviders() -> AnyPublisher<[NameIdPair], Error> {
        var requestTask: RequestTask?
        return Future<[NameIdPair], Error> { promise in
            requestTask = getPasswordResetProvidersWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get all password reset providers.
     - GET /Auth/PasswordResetProviders
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getPasswordResetProvidersWithRequestBuilder() -> RequestBuilder<[NameIdPair]> {
        let localVariablePath = "/Auth/PasswordResetProviders"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NameIdPair]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a list of sessions.
     
     - parameter controllableByUserId: (query) Filter by sessions that a given user is allowed to remote control. (optional)
     - parameter deviceId: (query) Filter by device Id. (optional)
     - parameter activeWithinSeconds: (query) Optional. Filter by sessions that were active in the last n seconds. (optional)
     - returns: AnyPublisher<[SessionInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSessions(controllableByUserId: String? = nil, deviceId: String? = nil, activeWithinSeconds: Int? = nil) -> AnyPublisher<[SessionInfo], Error> {
        var requestTask: RequestTask?
        return Future<[SessionInfo], Error> { promise in
            requestTask = getSessionsWithRequestBuilder(controllableByUserId: controllableByUserId, deviceId: deviceId, activeWithinSeconds: activeWithinSeconds).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a list of sessions.
     - GET /Sessions
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter controllableByUserId: (query) Filter by sessions that a given user is allowed to remote control. (optional)
     - parameter deviceId: (query) Filter by device Id. (optional)
     - parameter activeWithinSeconds: (query) Optional. Filter by sessions that were active in the last n seconds. (optional)
     - returns: RequestBuilder<[SessionInfo]> 
     */
    open class func getSessionsWithRequestBuilder(controllableByUserId: String? = nil, deviceId: String? = nil, activeWithinSeconds: Int? = nil) -> RequestBuilder<[SessionInfo]> {
        let localVariablePath = "/Sessions"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "controllableByUserId": controllableByUserId?.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "activeWithinSeconds": activeWithinSeconds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SessionInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Instructs a session to play an item.
     
     - parameter sessionId: (path) The session id. 
     - parameter playCommand: (query) The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. 
     - parameter itemIds: (query) The ids of the items to play, comma delimited. 
     - parameter startPositionTicks: (query) The starting position of the first item. (optional)
     - parameter mediaSourceId: (query) Optional. The media source id. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to play. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to play. (optional)
     - parameter startIndex: (query) Optional. The start index. (optional)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func play(sessionId: String, playCommand: PlayCommand, itemIds: [String], startPositionTicks: Int64? = nil, mediaSourceId: String? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, startIndex: Int? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = playWithRequestBuilder(sessionId: sessionId, playCommand: playCommand, itemIds: itemIds, startPositionTicks: startPositionTicks, mediaSourceId: mediaSourceId, audioStreamIndex: audioStreamIndex, subtitleStreamIndex: subtitleStreamIndex, startIndex: startIndex).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Instructs a session to play an item.
     - POST /Sessions/{sessionId}/Playing
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter playCommand: (query) The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. 
     - parameter itemIds: (query) The ids of the items to play, comma delimited. 
     - parameter startPositionTicks: (query) The starting position of the first item. (optional)
     - parameter mediaSourceId: (query) Optional. The media source id. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to play. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to play. (optional)
     - parameter startIndex: (query) Optional. The start index. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func playWithRequestBuilder(sessionId: String, playCommand: PlayCommand, itemIds: [String], startPositionTicks: Int64? = nil, mediaSourceId: String? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, startIndex: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/Playing"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "playCommand": playCommand.encodeToJSON(),
            "itemIds": itemIds.encodeToJSON(),
            "startPositionTicks": startPositionTicks?.encodeToJSON(),
            "mediaSourceId": mediaSourceId?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Updates capabilities for a device.
     
     - parameter id: (query) The session id. (optional)
     - parameter playableMediaTypes: (query) A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     - parameter supportedCommands: (query) A list of supported remote control commands, comma delimited. (optional)
     - parameter supportsMediaControl: (query) Determines whether media can be played remotely.. (optional, default to false)
     - parameter supportsSync: (query) Determines whether sync is supported. (optional, default to false)
     - parameter supportsPersistentIdentifier: (query) Determines whether the device supports a unique identifier. (optional, default to true)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postCapabilities(id: String? = nil, playableMediaTypes: [String]? = nil, supportedCommands: [GeneralCommandType]? = nil, supportsMediaControl: Bool? = nil, supportsSync: Bool? = nil, supportsPersistentIdentifier: Bool? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = postCapabilitiesWithRequestBuilder(id: id, playableMediaTypes: playableMediaTypes, supportedCommands: supportedCommands, supportsMediaControl: supportsMediaControl, supportsSync: supportsSync, supportsPersistentIdentifier: supportsPersistentIdentifier).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Updates capabilities for a device.
     - POST /Sessions/Capabilities
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter id: (query) The session id. (optional)
     - parameter playableMediaTypes: (query) A list of playable media types, comma delimited. Audio, Video, Book, Photo. (optional)
     - parameter supportedCommands: (query) A list of supported remote control commands, comma delimited. (optional)
     - parameter supportsMediaControl: (query) Determines whether media can be played remotely.. (optional, default to false)
     - parameter supportsSync: (query) Determines whether sync is supported. (optional, default to false)
     - parameter supportsPersistentIdentifier: (query) Determines whether the device supports a unique identifier. (optional, default to true)
     - returns: RequestBuilder<Void> 
     */
    open class func postCapabilitiesWithRequestBuilder(id: String? = nil, playableMediaTypes: [String]? = nil, supportedCommands: [GeneralCommandType]? = nil, supportsMediaControl: Bool? = nil, supportsSync: Bool? = nil, supportsPersistentIdentifier: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Capabilities"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "playableMediaTypes": playableMediaTypes?.encodeToJSON(),
            "supportedCommands": supportedCommands?.encodeToJSON(),
            "supportsMediaControl": supportsMediaControl?.encodeToJSON(),
            "supportsSync": supportsSync?.encodeToJSON(),
            "supportsPersistentIdentifier": supportsPersistentIdentifier?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Updates capabilities for a device.
     
     - parameter postFullCapabilitiesRequest: (body) The MediaBrowser.Model.Session.ClientCapabilities. 
     - parameter id: (query) The session id. (optional)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func postFullCapabilities(postFullCapabilitiesRequest: PostFullCapabilitiesRequest, id: String? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = postFullCapabilitiesWithRequestBuilder(postFullCapabilitiesRequest: postFullCapabilitiesRequest, id: id).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Updates capabilities for a device.
     - POST /Sessions/Capabilities/Full
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter postFullCapabilitiesRequest: (body) The MediaBrowser.Model.Session.ClientCapabilities. 
     - parameter id: (query) The session id. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postFullCapabilitiesWithRequestBuilder(postFullCapabilitiesRequest: PostFullCapabilitiesRequest, id: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Capabilities/Full"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postFullCapabilitiesRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Removes an additional user from a session.
     
     - parameter sessionId: (path) The session id. 
     - parameter userId: (path) The user id. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func removeUserFromSession(sessionId: String, userId: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = removeUserFromSessionWithRequestBuilder(sessionId: sessionId, userId: userId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Removes an additional user from a session.
     - DELETE /Sessions/{sessionId}/User/{userId}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter userId: (path) The user id. 
     - returns: RequestBuilder<Void> 
     */
    open class func removeUserFromSessionWithRequestBuilder(sessionId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/User/{userId}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Reports that a session has ended.
     
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reportSessionEnded() -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = reportSessionEndedWithRequestBuilder().execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Reports that a session has ended.
     - POST /Sessions/Logout
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<Void> 
     */
    open class func reportSessionEndedWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Logout"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Reports that a session is viewing an item.
     
     - parameter itemId: (query) The item id. 
     - parameter sessionId: (query) The session id. (optional)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reportViewing(itemId: String, sessionId: String? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = reportViewingWithRequestBuilder(itemId: itemId, sessionId: sessionId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Reports that a session is viewing an item.
     - POST /Sessions/Viewing
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter itemId: (query) The item id. 
     - parameter sessionId: (query) The session id. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reportViewingWithRequestBuilder(itemId: String, sessionId: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Viewing"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sessionId": sessionId?.encodeToJSON(),
            "itemId": itemId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issues a full general command to a client.
     
     - parameter sessionId: (path) The session id. 
     - parameter sendFullGeneralCommandRequest: (body) The MediaBrowser.Model.Session.GeneralCommand. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendFullGeneralCommand(sessionId: String, sendFullGeneralCommandRequest: SendFullGeneralCommandRequest) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = sendFullGeneralCommandWithRequestBuilder(sessionId: sessionId, sendFullGeneralCommandRequest: sendFullGeneralCommandRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Issues a full general command to a client.
     - POST /Sessions/{sessionId}/Command
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter sendFullGeneralCommandRequest: (body) The MediaBrowser.Model.Session.GeneralCommand. 
     - returns: RequestBuilder<Void> 
     */
    open class func sendFullGeneralCommandWithRequestBuilder(sessionId: String, sendFullGeneralCommandRequest: SendFullGeneralCommandRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/Command"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendFullGeneralCommandRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issues a general command to a client.
     
     - parameter sessionId: (path) The session id. 
     - parameter command: (path) The command to send. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendGeneralCommand(sessionId: String, command: GeneralCommandType) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = sendGeneralCommandWithRequestBuilder(sessionId: sessionId, command: command).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Issues a general command to a client.
     - POST /Sessions/{sessionId}/Command/{command}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter command: (path) The command to send. 
     - returns: RequestBuilder<Void> 
     */
    open class func sendGeneralCommandWithRequestBuilder(sessionId: String, command: GeneralCommandType) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/Command/{command}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let commandPreEscape = "\(APIHelper.mapValueToPathItem(command))"
        let commandPostEscape = commandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{command}", with: commandPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issues a command to a client to display a message to the user.
     
     - parameter sessionId: (path) The session id. 
     - parameter sendMessageCommandRequest: (body) The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendMessageCommand(sessionId: String, sendMessageCommandRequest: SendMessageCommandRequest) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = sendMessageCommandWithRequestBuilder(sessionId: sessionId, sendMessageCommandRequest: sendMessageCommandRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Issues a command to a client to display a message to the user.
     - POST /Sessions/{sessionId}/Message
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter sendMessageCommandRequest: (body) The MediaBrowser.Model.Session.MessageCommand object containing Header, Message Text, and TimeoutMs. 
     - returns: RequestBuilder<Void> 
     */
    open class func sendMessageCommandWithRequestBuilder(sessionId: String, sendMessageCommandRequest: SendMessageCommandRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/Message"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendMessageCommandRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issues a playstate command to a client.
     
     - parameter sessionId: (path) The session id. 
     - parameter command: (path) The MediaBrowser.Model.Session.PlaystateCommand. 
     - parameter seekPositionTicks: (query) The optional position ticks. (optional)
     - parameter controllingUserId: (query) The optional controlling user id. (optional)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendPlaystateCommand(sessionId: String, command: PlaystateCommand, seekPositionTicks: Int64? = nil, controllingUserId: String? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = sendPlaystateCommandWithRequestBuilder(sessionId: sessionId, command: command, seekPositionTicks: seekPositionTicks, controllingUserId: controllingUserId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Issues a playstate command to a client.
     - POST /Sessions/{sessionId}/Playing/{command}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter command: (path) The MediaBrowser.Model.Session.PlaystateCommand. 
     - parameter seekPositionTicks: (query) The optional position ticks. (optional)
     - parameter controllingUserId: (query) The optional controlling user id. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func sendPlaystateCommandWithRequestBuilder(sessionId: String, command: PlaystateCommand, seekPositionTicks: Int64? = nil, controllingUserId: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/Playing/{command}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let commandPreEscape = "\(APIHelper.mapValueToPathItem(command))"
        let commandPostEscape = commandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{command}", with: commandPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "seekPositionTicks": seekPositionTicks?.encodeToJSON(),
            "controllingUserId": controllingUserId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issues a system command to a client.
     
     - parameter sessionId: (path) The session id. 
     - parameter command: (path) The command to send. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendSystemCommand(sessionId: String, command: GeneralCommandType) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = sendSystemCommandWithRequestBuilder(sessionId: sessionId, command: command).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Issues a system command to a client.
     - POST /Sessions/{sessionId}/System/{command}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter sessionId: (path) The session id. 
     - parameter command: (path) The command to send. 
     - returns: RequestBuilder<Void> 
     */
    open class func sendSystemCommandWithRequestBuilder(sessionId: String, command: GeneralCommandType) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{sessionId}/System/{command}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let commandPreEscape = "\(APIHelper.mapValueToPathItem(command))"
        let commandPostEscape = commandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{command}", with: commandPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
