//
// ItemLookupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ItemLookupAPI {

    /**
     Applies search criteria to an item and refreshes metadata.
     
     - parameter itemId: (path) Item id. 
     - parameter applySearchCriteriaRequest: (body) The remote search result. 
     - parameter replaceAllImages: (query) Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applySearchCriteria(itemId: String, applySearchCriteriaRequest: ApplySearchCriteriaRequest, replaceAllImages: Bool? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = applySearchCriteriaWithRequestBuilder(itemId: itemId, applySearchCriteriaRequest: applySearchCriteriaRequest, replaceAllImages: replaceAllImages).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Applies search criteria to an item and refreshes metadata.
     - POST /Items/RemoteSearch/Apply/{itemId}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter applySearchCriteriaRequest: (body) The remote search result. 
     - parameter replaceAllImages: (query) Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     - returns: RequestBuilder<Void> 
     */
    open class func applySearchCriteriaWithRequestBuilder(itemId: String, applySearchCriteriaRequest: ApplySearchCriteriaRequest, replaceAllImages: Bool? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/RemoteSearch/Apply/{itemId}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applySearchCriteriaRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replaceAllImages": replaceAllImages?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get book remote search.
     
     - parameter getBookRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getBookRemoteSearchResults(getBookRemoteSearchResultsRequest: GetBookRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getBookRemoteSearchResultsWithRequestBuilder(getBookRemoteSearchResultsRequest: getBookRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get book remote search.
     - POST /Items/RemoteSearch/Book
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getBookRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getBookRemoteSearchResultsWithRequestBuilder(getBookRemoteSearchResultsRequest: GetBookRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Book"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getBookRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get box set remote search.
     
     - parameter getBoxSetRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getBoxSetRemoteSearchResults(getBoxSetRemoteSearchResultsRequest: GetBoxSetRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getBoxSetRemoteSearchResultsWithRequestBuilder(getBoxSetRemoteSearchResultsRequest: getBoxSetRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get box set remote search.
     - POST /Items/RemoteSearch/BoxSet
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getBoxSetRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getBoxSetRemoteSearchResultsWithRequestBuilder(getBoxSetRemoteSearchResultsRequest: GetBoxSetRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/BoxSet"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getBoxSetRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the item's external id info.
     
     - parameter itemId: (path) Item id. 
     - returns: AnyPublisher<[ExternalIdInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getExternalIdInfos(itemId: String) -> AnyPublisher<[ExternalIdInfo], Error> {
        var requestTask: RequestTask?
        return Future<[ExternalIdInfo], Error> { promise in
            requestTask = getExternalIdInfosWithRequestBuilder(itemId: itemId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get the item's external id info.
     - GET /Items/{itemId}/ExternalIdInfos
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - returns: RequestBuilder<[ExternalIdInfo]> 
     */
    open class func getExternalIdInfosWithRequestBuilder(itemId: String) -> RequestBuilder<[ExternalIdInfo]> {
        var localVariablePath = "/Items/{itemId}/ExternalIdInfos"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExternalIdInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get movie remote search.
     
     - parameter getMovieRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMovieRemoteSearchResults(getMovieRemoteSearchResultsRequest: GetMovieRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getMovieRemoteSearchResultsWithRequestBuilder(getMovieRemoteSearchResultsRequest: getMovieRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get movie remote search.
     - POST /Items/RemoteSearch/Movie
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getMovieRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMovieRemoteSearchResultsWithRequestBuilder(getMovieRemoteSearchResultsRequest: GetMovieRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Movie"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMovieRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get music album remote search.
     
     - parameter getMusicAlbumRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMusicAlbumRemoteSearchResults(getMusicAlbumRemoteSearchResultsRequest: GetMusicAlbumRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getMusicAlbumRemoteSearchResultsWithRequestBuilder(getMusicAlbumRemoteSearchResultsRequest: getMusicAlbumRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get music album remote search.
     - POST /Items/RemoteSearch/MusicAlbum
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getMusicAlbumRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMusicAlbumRemoteSearchResultsWithRequestBuilder(getMusicAlbumRemoteSearchResultsRequest: GetMusicAlbumRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/MusicAlbum"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMusicAlbumRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get music artist remote search.
     
     - parameter getMusicArtistRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMusicArtistRemoteSearchResults(getMusicArtistRemoteSearchResultsRequest: GetMusicArtistRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getMusicArtistRemoteSearchResultsWithRequestBuilder(getMusicArtistRemoteSearchResultsRequest: getMusicArtistRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get music artist remote search.
     - POST /Items/RemoteSearch/MusicArtist
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getMusicArtistRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMusicArtistRemoteSearchResultsWithRequestBuilder(getMusicArtistRemoteSearchResultsRequest: GetMusicArtistRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/MusicArtist"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMusicArtistRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get music video remote search.
     
     - parameter getMusicVideoRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMusicVideoRemoteSearchResults(getMusicVideoRemoteSearchResultsRequest: GetMusicVideoRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getMusicVideoRemoteSearchResultsWithRequestBuilder(getMusicVideoRemoteSearchResultsRequest: getMusicVideoRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get music video remote search.
     - POST /Items/RemoteSearch/MusicVideo
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getMusicVideoRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMusicVideoRemoteSearchResultsWithRequestBuilder(getMusicVideoRemoteSearchResultsRequest: GetMusicVideoRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/MusicVideo"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMusicVideoRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get person remote search.
     
     - parameter getPersonRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPersonRemoteSearchResults(getPersonRemoteSearchResultsRequest: GetPersonRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getPersonRemoteSearchResultsWithRequestBuilder(getPersonRemoteSearchResultsRequest: getPersonRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get person remote search.
     - POST /Items/RemoteSearch/Person
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getPersonRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getPersonRemoteSearchResultsWithRequestBuilder(getPersonRemoteSearchResultsRequest: GetPersonRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Person"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getPersonRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get series remote search.
     
     - parameter getSeriesRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSeriesRemoteSearchResults(getSeriesRemoteSearchResultsRequest: GetSeriesRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getSeriesRemoteSearchResultsWithRequestBuilder(getSeriesRemoteSearchResultsRequest: getSeriesRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get series remote search.
     - POST /Items/RemoteSearch/Series
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getSeriesRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getSeriesRemoteSearchResultsWithRequestBuilder(getSeriesRemoteSearchResultsRequest: GetSeriesRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Series"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getSeriesRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get trailer remote search.
     
     - parameter getTrailerRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: AnyPublisher<[RemoteSearchResult], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTrailerRemoteSearchResults(getTrailerRemoteSearchResultsRequest: GetTrailerRemoteSearchResultsRequest) -> AnyPublisher<[RemoteSearchResult], Error> {
        var requestTask: RequestTask?
        return Future<[RemoteSearchResult], Error> { promise in
            requestTask = getTrailerRemoteSearchResultsWithRequestBuilder(getTrailerRemoteSearchResultsRequest: getTrailerRemoteSearchResultsRequest).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get trailer remote search.
     - POST /Items/RemoteSearch/Trailer
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter getTrailerRemoteSearchResultsRequest: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getTrailerRemoteSearchResultsWithRequestBuilder(getTrailerRemoteSearchResultsRequest: GetTrailerRemoteSearchResultsRequest) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Trailer"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getTrailerRemoteSearchResultsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
