//
// DisplayPreferencesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
#if canImport(Combine)
import Combine
#endif

open class DisplayPreferencesAPI {
    /**
     Get Display Preferences.
     
     - parameter displayPreferencesId: (path) Display preferences id. 
     - parameter userId: (query) User id. 
     - parameter client: (query) Client. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<DisplayPreferencesDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDisplayPreferences(displayPreferencesId: String, userId: String, client: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<DisplayPreferencesDto, Error> {
        return Future<DisplayPreferencesDto, Error>.init { promise in
            getDisplayPreferencesWithRequestBuilder(displayPreferencesId: displayPreferencesId, userId: userId, client: client).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Get Display Preferences.
     - GET /DisplayPreferences/{displayPreferencesId}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter displayPreferencesId: (path) Display preferences id. 
     - parameter userId: (query) User id. 
     - parameter client: (query) Client. 
     - returns: RequestBuilder<DisplayPreferencesDto> 
     */
    open class func getDisplayPreferencesWithRequestBuilder(displayPreferencesId: String, userId: String, client: String) -> RequestBuilder<DisplayPreferencesDto> {
        var urlPath = "/DisplayPreferences/{displayPreferencesId}"
        let displayPreferencesIdPreEscape = "\(APIHelper.mapValueToPathItem(displayPreferencesId))"
        let displayPreferencesIdPostEscape = displayPreferencesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{displayPreferencesId}", with: displayPreferencesIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId.encodeToJSON(),
            "client": client.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DisplayPreferencesDto>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Display Preferences.
     
     - parameter displayPreferencesId: (path) Display preferences id. 
     - parameter userId: (query) User Id. 
     - parameter client: (query) Client. 
     - parameter updateDisplayPreferencesRequest: (body) New Display Preferences object. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateDisplayPreferences(displayPreferencesId: String, userId: String, client: String, updateDisplayPreferencesRequest: UpdateDisplayPreferencesRequest, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            updateDisplayPreferencesWithRequestBuilder(displayPreferencesId: displayPreferencesId, userId: userId, client: client, updateDisplayPreferencesRequest: updateDisplayPreferencesRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Update Display Preferences.
     - POST /DisplayPreferences/{displayPreferencesId}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter displayPreferencesId: (path) Display preferences id. 
     - parameter userId: (query) User Id. 
     - parameter client: (query) Client. 
     - parameter updateDisplayPreferencesRequest: (body) New Display Preferences object. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateDisplayPreferencesWithRequestBuilder(displayPreferencesId: String, userId: String, client: String, updateDisplayPreferencesRequest: UpdateDisplayPreferencesRequest) -> RequestBuilder<Void> {
        var urlPath = "/DisplayPreferences/{displayPreferencesId}"
        let displayPreferencesIdPreEscape = "\(APIHelper.mapValueToPathItem(displayPreferencesId))"
        let displayPreferencesIdPostEscape = displayPreferencesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{displayPreferencesId}", with: displayPreferencesIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDisplayPreferencesRequest)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId.encodeToJSON(),
            "client": client.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
