//
// ClientLogAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
#if canImport(Combine)
import Combine
#endif

open class ClientLogAPI {
    /**
     Upload a document.
     
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<ClientLogDocumentResponseDto, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func logFile(body: URL? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> AnyPublisher<ClientLogDocumentResponseDto, Error> {
        return Future<ClientLogDocumentResponseDto, Error>.init { promise in
            logFileWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Upload a document.
     - POST /ClientLog/Document
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<ClientLogDocumentResponseDto> 
     */
    open class func logFileWithRequestBuilder(body: URL? = nil) -> RequestBuilder<ClientLogDocumentResponseDto> {
        let urlPath = "/ClientLog/Document"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ClientLogDocumentResponseDto>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
