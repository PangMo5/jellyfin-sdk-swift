//
// DlnaServerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DlnaServerAPI {

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getConnectionManager(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getConnectionManagerWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/ConnectionManager
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getConnectionManagerWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ConnectionManager"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getConnectionManager2(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getConnectionManager2WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/ConnectionManager/ConnectionManager
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getConnectionManager2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getConnectionManager3(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getConnectionManager3WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/ConnectionManager/ConnectionManager.xml
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getConnectionManager3WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna content directory xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getContentDirectory(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getContentDirectoryWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna content directory xml.
     - GET /Dlna/{serverId}/ContentDirectory
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getContentDirectoryWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ContentDirectory"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna content directory xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getContentDirectory2(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getContentDirectory2WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna content directory xml.
     - GET /Dlna/{serverId}/ContentDirectory/ContentDirectory
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getContentDirectory2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna content directory xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getContentDirectory3(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getContentDirectory3WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna content directory xml.
     - GET /Dlna/{serverId}/ContentDirectory/ContentDirectory.xml
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getContentDirectory3WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Description Xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDescriptionXml(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getDescriptionXmlWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get Description Xml.
     - GET /Dlna/{serverId}/description
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getDescriptionXmlWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/description"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Description Xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDescriptionXml2(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getDescriptionXml2WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get Description Xml.
     - GET /Dlna/{serverId}/description.xml
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getDescriptionXml2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/description.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a server icon.
     
     - parameter fileName: (path) The icon filename. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIcon(fileName: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getIconWithRequestBuilder(fileName: fileName).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a server icon.
     - GET /Dlna/icons/{fileName}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter fileName: (path) The icon filename. 
     - returns: RequestBuilder<URL> 
     */
    open class func getIconWithRequestBuilder(fileName: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/icons/{fileName}"
        let fileNamePreEscape = "\(APIHelper.mapValueToPathItem(fileName))"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a server icon.
     
     - parameter serverId: (path) Server UUID. 
     - parameter fileName: (path) The icon filename. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIconId(serverId: String, fileName: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getIconIdWithRequestBuilder(serverId: serverId, fileName: fileName).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a server icon.
     - GET /Dlna/{serverId}/icons/{fileName}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - parameter fileName: (path) The icon filename. 
     - returns: RequestBuilder<URL> 
     */
    open class func getIconIdWithRequestBuilder(serverId: String, fileName: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/icons/{fileName}"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(APIHelper.mapValueToPathItem(fileName))"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMediaReceiverRegistrar(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getMediaReceiverRegistrarWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/MediaReceiverRegistrar
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getMediaReceiverRegistrarWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/MediaReceiverRegistrar"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMediaReceiverRegistrar2(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getMediaReceiverRegistrar2WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getMediaReceiverRegistrar2WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets Dlna media receiver registrar xml.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMediaReceiverRegistrar3(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getMediaReceiverRegistrar3WithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets Dlna media receiver registrar xml.
     - GET /Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func getMediaReceiverRegistrar3WithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Process a connection manager control request.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processConnectionManagerControlRequest(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = processConnectionManagerControlRequestWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Process a connection manager control request.
     - POST /Dlna/{serverId}/ConnectionManager/Control
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func processConnectionManagerControlRequestWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ConnectionManager/Control"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Process a content directory control request.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processContentDirectoryControlRequest(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = processContentDirectoryControlRequestWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Process a content directory control request.
     - POST /Dlna/{serverId}/ContentDirectory/Control
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func processContentDirectoryControlRequestWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/ContentDirectory/Control"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Process a media receiver registrar control request.
     
     - parameter serverId: (path) Server UUID. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processMediaReceiverRegistrarControlRequest(serverId: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = processMediaReceiverRegistrarControlRequestWithRequestBuilder(serverId: serverId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Process a media receiver registrar control request.
     - POST /Dlna/{serverId}/MediaReceiverRegistrar/Control
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter serverId: (path) Server UUID. 
     - returns: RequestBuilder<URL> 
     */
    open class func processMediaReceiverRegistrarControlRequestWithRequestBuilder(serverId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Dlna/{serverId}/MediaReceiverRegistrar/Control"
        let serverIdPreEscape = "\(APIHelper.mapValueToPathItem(serverId))"
        let serverIdPostEscape = serverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serverId}", with: serverIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
