//
// MoviesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MoviesAPI {

    /**
     Gets movie recommendations.
     
     - parameter userId: (query) Optional. Filter by user id, and attach user data. (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter fields: (query) Optional. The fields to return. (optional)
     - parameter categoryLimit: (query) The max number of categories to return. (optional, default to 5)
     - parameter itemLimit: (query) The max number of items to return per category. (optional, default to 8)
     - returns: AnyPublisher<[RecommendationDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMovieRecommendations(userId: String? = nil, parentId: String? = nil, fields: [ItemFields]? = nil, categoryLimit: Int? = nil, itemLimit: Int? = nil) -> AnyPublisher<[RecommendationDto], Error> {
        var requestTask: RequestTask?
        return Future<[RecommendationDto], Error> { promise in
            requestTask = getMovieRecommendationsWithRequestBuilder(userId: userId, parentId: parentId, fields: fields, categoryLimit: categoryLimit, itemLimit: itemLimit).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets movie recommendations.
     - GET /Movies/Recommendations
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) Optional. Filter by user id, and attach user data. (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter fields: (query) Optional. The fields to return. (optional)
     - parameter categoryLimit: (query) The max number of categories to return. (optional, default to 5)
     - parameter itemLimit: (query) The max number of items to return per category. (optional, default to 8)
     - returns: RequestBuilder<[RecommendationDto]> 
     */
    open class func getMovieRecommendationsWithRequestBuilder(userId: String? = nil, parentId: String? = nil, fields: [ItemFields]? = nil, categoryLimit: Int? = nil, itemLimit: Int? = nil) -> RequestBuilder<[RecommendationDto]> {
        let localVariablePath = "/Movies/Recommendations"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
            "parentId": parentId?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "categoryLimit": categoryLimit?.encodeToJSON(),
            "itemLimit": itemLimit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RecommendationDto]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
