//
// DashboardAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DashboardAPI {

    /**
     Gets the configuration pages.
     
     - parameter enableInMainMenu: (query) Whether to enable in the main menu. (optional)
     - returns: AnyPublisher<[ConfigurationPageInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getConfigurationPages(enableInMainMenu: Bool? = nil) -> AnyPublisher<[ConfigurationPageInfo], Error> {
        var requestTask: RequestTask?
        return Future<[ConfigurationPageInfo], Error> { promise in
            requestTask = getConfigurationPagesWithRequestBuilder(enableInMainMenu: enableInMainMenu).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets the configuration pages.
     - GET /web/ConfigurationPages
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter enableInMainMenu: (query) Whether to enable in the main menu. (optional)
     - returns: RequestBuilder<[ConfigurationPageInfo]> 
     */
    open class func getConfigurationPagesWithRequestBuilder(enableInMainMenu: Bool? = nil) -> RequestBuilder<[ConfigurationPageInfo]> {
        let localVariablePath = "/web/ConfigurationPages"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "enableInMainMenu": enableInMainMenu?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConfigurationPageInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a dashboard configuration page.
     
     - parameter name: (query) The name of the page. (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDashboardConfigurationPage(name: String? = nil) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getDashboardConfigurationPageWithRequestBuilder(name: name).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a dashboard configuration page.
     - GET /web/ConfigurationPage
     - parameter name: (query) The name of the page. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getDashboardConfigurationPageWithRequestBuilder(name: String? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/web/ConfigurationPage"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
