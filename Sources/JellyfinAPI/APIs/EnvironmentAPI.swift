//
// EnvironmentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EnvironmentAPI {

    /**
     Get Default directory browser.
     
     - returns: AnyPublisher<DefaultDirectoryBrowserInfoDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDefaultDirectoryBrowser() -> AnyPublisher<DefaultDirectoryBrowserInfoDto, Error> {
        var requestTask: RequestTask?
        return Future<DefaultDirectoryBrowserInfoDto, Error> { promise in
            requestTask = getDefaultDirectoryBrowserWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get Default directory browser.
     - GET /Environment/DefaultDirectoryBrowser
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<DefaultDirectoryBrowserInfoDto> 
     */
    open class func getDefaultDirectoryBrowserWithRequestBuilder() -> RequestBuilder<DefaultDirectoryBrowserInfoDto> {
        let localVariablePath = "/Environment/DefaultDirectoryBrowser"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DefaultDirectoryBrowserInfoDto>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets the contents of a given directory in the file system.
     
     - parameter path: (query) The path. 
     - parameter includeFiles: (query) An optional filter to include or exclude files from the results. true/false. (optional, default to false)
     - parameter includeDirectories: (query) An optional filter to include or exclude folders from the results. true/false. (optional, default to false)
     - returns: AnyPublisher<[FileSystemEntryInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDirectoryContents(path: String, includeFiles: Bool? = nil, includeDirectories: Bool? = nil) -> AnyPublisher<[FileSystemEntryInfo], Error> {
        var requestTask: RequestTask?
        return Future<[FileSystemEntryInfo], Error> { promise in
            requestTask = getDirectoryContentsWithRequestBuilder(path: path, includeFiles: includeFiles, includeDirectories: includeDirectories).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets the contents of a given directory in the file system.
     - GET /Environment/DirectoryContents
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter path: (query) The path. 
     - parameter includeFiles: (query) An optional filter to include or exclude files from the results. true/false. (optional, default to false)
     - parameter includeDirectories: (query) An optional filter to include or exclude folders from the results. true/false. (optional, default to false)
     - returns: RequestBuilder<[FileSystemEntryInfo]> 
     */
    open class func getDirectoryContentsWithRequestBuilder(path: String, includeFiles: Bool? = nil, includeDirectories: Bool? = nil) -> RequestBuilder<[FileSystemEntryInfo]> {
        let localVariablePath = "/Environment/DirectoryContents"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": path.encodeToJSON(),
            "includeFiles": includeFiles?.encodeToJSON(),
            "includeDirectories": includeDirectories?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FileSystemEntryInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets available drives from the server's file system.
     
     - returns: AnyPublisher<[FileSystemEntryInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDrives() -> AnyPublisher<[FileSystemEntryInfo], Error> {
        var requestTask: RequestTask?
        return Future<[FileSystemEntryInfo], Error> { promise in
            requestTask = getDrivesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets available drives from the server's file system.
     - GET /Environment/Drives
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[FileSystemEntryInfo]> 
     */
    open class func getDrivesWithRequestBuilder() -> RequestBuilder<[FileSystemEntryInfo]> {
        let localVariablePath = "/Environment/Drives"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FileSystemEntryInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets network paths.
     
     - returns: AnyPublisher<[FileSystemEntryInfo], Error>
     */
    #if canImport(Combine)
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNetworkShares() -> AnyPublisher<[FileSystemEntryInfo], Error> {
        var requestTask: RequestTask?
        return Future<[FileSystemEntryInfo], Error> { promise in
            requestTask = getNetworkSharesWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets network paths.
     - GET /Environment/NetworkShares
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[FileSystemEntryInfo]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getNetworkSharesWithRequestBuilder() -> RequestBuilder<[FileSystemEntryInfo]> {
        let localVariablePath = "/Environment/NetworkShares"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FileSystemEntryInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets the parent path of a given path.
     
     - parameter path: (query) The path. 
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getParentPath(path: String) -> AnyPublisher<String, Error> {
        var requestTask: RequestTask?
        return Future<String, Error> { promise in
            requestTask = getParentPathWithRequestBuilder(path: path).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets the parent path of a given path.
     - GET /Environment/ParentPath
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter path: (query) The path. 
     - returns: RequestBuilder<String> 
     */
    open class func getParentPathWithRequestBuilder(path: String) -> RequestBuilder<String> {
        let localVariablePath = "/Environment/ParentPath"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": path.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Validates path.
     
     - parameter validatePathRequest: (body) Validate request object. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func validatePath(validatePathRequest: ValidatePathRequest) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = validatePathWithRequestBuilder(validatePathRequest: validatePathRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Validates path.
     - POST /Environment/ValidatePath
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter validatePathRequest: (body) Validate request object. 
     - returns: RequestBuilder<Void> 
     */
    open class func validatePathWithRequestBuilder(validatePathRequest: ValidatePathRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/Environment/ValidatePath"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: validatePathRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
