//
// PluginsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PluginsAPI {

    /**
     Disable a plugin.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func disablePlugin(pluginId: String, version: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = disablePluginWithRequestBuilder(pluginId: pluginId, version: version).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Disable a plugin.
     - POST /Plugins/{pluginId}/{version}/Disable
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<Void> 
     */
    open class func disablePluginWithRequestBuilder(pluginId: String, version: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Plugins/{pluginId}/{version}/Disable"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Enables a disabled plugin.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enablePlugin(pluginId: String, version: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = enablePluginWithRequestBuilder(pluginId: pluginId, version: version).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Enables a disabled plugin.
     - POST /Plugins/{pluginId}/{version}/Enable
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<Void> 
     */
    open class func enablePluginWithRequestBuilder(pluginId: String, version: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Plugins/{pluginId}/{version}/Enable"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets plugin configuration.
     
     - parameter pluginId: (path) Plugin id. 
     - returns: AnyPublisher<AnyCodable, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPluginConfiguration(pluginId: String) -> AnyPublisher<AnyCodable, Error> {
        var requestTask: RequestTask?
        return Future<AnyCodable, Error> { promise in
            requestTask = getPluginConfigurationWithRequestBuilder(pluginId: pluginId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets plugin configuration.
     - GET /Plugins/{pluginId}/Configuration
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getPluginConfigurationWithRequestBuilder(pluginId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/Plugins/{pluginId}/Configuration"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a plugin's image.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPluginImage(pluginId: String, version: String) -> AnyPublisher<URL, Error> {
        var requestTask: RequestTask?
        return Future<URL, Error> { promise in
            requestTask = getPluginImageWithRequestBuilder(pluginId: pluginId, version: version).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a plugin's image.
     - GET /Plugins/{pluginId}/{version}/Image
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<URL> 
     */
    open class func getPluginImageWithRequestBuilder(pluginId: String, version: String) -> RequestBuilder<URL> {
        var localVariablePath = "/Plugins/{pluginId}/{version}/Image"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a plugin's manifest.
     
     - parameter pluginId: (path) Plugin id. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPluginManifest(pluginId: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = getPluginManifestWithRequestBuilder(pluginId: pluginId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a plugin's manifest.
     - POST /Plugins/{pluginId}/Manifest
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<Void> 
     */
    open class func getPluginManifestWithRequestBuilder(pluginId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Plugins/{pluginId}/Manifest"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets a list of currently installed plugins.
     
     - returns: AnyPublisher<[PluginInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlugins() -> AnyPublisher<[PluginInfo], Error> {
        var requestTask: RequestTask?
        return Future<[PluginInfo], Error> { promise in
            requestTask = getPluginsWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets a list of currently installed plugins.
     - GET /Plugins
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[PluginInfo]> 
     */
    open class func getPluginsWithRequestBuilder() -> RequestBuilder<[PluginInfo]> {
        let localVariablePath = "/Plugins"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PluginInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Uninstalls a plugin.
     
     - parameter pluginId: (path) Plugin id. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func uninstallPlugin(pluginId: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = uninstallPluginWithRequestBuilder(pluginId: pluginId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Uninstalls a plugin.
     - DELETE /Plugins/{pluginId}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func uninstallPluginWithRequestBuilder(pluginId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Plugins/{pluginId}"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Uninstalls a plugin by version.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func uninstallPluginByVersion(pluginId: String, version: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = uninstallPluginByVersionWithRequestBuilder(pluginId: pluginId, version: version).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Uninstalls a plugin by version.
     - DELETE /Plugins/{pluginId}/{version}
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<Void> 
     */
    open class func uninstallPluginByVersionWithRequestBuilder(pluginId: String, version: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Plugins/{pluginId}/{version}"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Updates plugin configuration.
     
     - parameter pluginId: (path) Plugin id. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updatePluginConfiguration(pluginId: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = updatePluginConfigurationWithRequestBuilder(pluginId: pluginId).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Updates plugin configuration.
     - POST /Plugins/{pluginId}/Configuration
     - Accepts plugin configuration as JSON body.
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<Void> 
     */
    open class func updatePluginConfigurationWithRequestBuilder(pluginId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Plugins/{pluginId}/Configuration"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
