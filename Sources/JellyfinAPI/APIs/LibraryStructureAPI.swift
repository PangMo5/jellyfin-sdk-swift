//
// LibraryStructureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LibraryStructureAPI {

    /**
     Add a media path to a library.
     
     - parameter addMediaPathRequest: (body) The media path dto. 
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addMediaPath(addMediaPathRequest: AddMediaPathRequest, refreshLibrary: Bool? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = addMediaPathWithRequestBuilder(addMediaPathRequest: addMediaPathRequest, refreshLibrary: refreshLibrary).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Add a media path to a library.
     - POST /Library/VirtualFolders/Paths
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter addMediaPathRequest: (body) The media path dto. 
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func addMediaPathWithRequestBuilder(addMediaPathRequest: AddMediaPathRequest, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders/Paths"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addMediaPathRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Adds a virtual folder.
     
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter collectionType: (query) The type of the collection. (optional)
     - parameter paths: (query) The paths of the virtual folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter addVirtualFolderRequest: (body) The library options. (optional)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addVirtualFolder(name: String? = nil, collectionType: CollectionTypeOptions? = nil, paths: [String]? = nil, refreshLibrary: Bool? = nil, addVirtualFolderRequest: AddVirtualFolderRequest? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = addVirtualFolderWithRequestBuilder(name: name, collectionType: collectionType, paths: paths, refreshLibrary: refreshLibrary, addVirtualFolderRequest: addVirtualFolderRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Adds a virtual folder.
     - POST /Library/VirtualFolders
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter collectionType: (query) The type of the collection. (optional)
     - parameter paths: (query) The paths of the virtual folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - parameter addVirtualFolderRequest: (body) The library options. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func addVirtualFolderWithRequestBuilder(name: String? = nil, collectionType: CollectionTypeOptions? = nil, paths: [String]? = nil, refreshLibrary: Bool? = nil, addVirtualFolderRequest: AddVirtualFolderRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addVirtualFolderRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "collectionType": collectionType?.encodeToJSON(),
            "paths": paths?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Gets all virtual folders.
     
     - returns: AnyPublisher<[VirtualFolderInfo], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getVirtualFolders() -> AnyPublisher<[VirtualFolderInfo], Error> {
        var requestTask: RequestTask?
        return Future<[VirtualFolderInfo], Error> { promise in
            requestTask = getVirtualFoldersWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Gets all virtual folders.
     - GET /Library/VirtualFolders
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[VirtualFolderInfo]> 
     */
    open class func getVirtualFoldersWithRequestBuilder() -> RequestBuilder<[VirtualFolderInfo]> {
        let localVariablePath = "/Library/VirtualFolders"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VirtualFolderInfo]>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove a media path.
     
     - parameter name: (query) The name of the library. (optional)
     - parameter path: (query) The path to remove. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func removeMediaPath(name: String? = nil, path: String? = nil, refreshLibrary: Bool? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = removeMediaPathWithRequestBuilder(name: name, path: path, refreshLibrary: refreshLibrary).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Remove a media path.
     - DELETE /Library/VirtualFolders/Paths
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the library. (optional)
     - parameter path: (query) The path to remove. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func removeMediaPathWithRequestBuilder(name: String? = nil, path: String? = nil, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders/Paths"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "path": path?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Removes a virtual folder.
     
     - parameter name: (query) The name of the folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func removeVirtualFolder(name: String? = nil, refreshLibrary: Bool? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = removeVirtualFolderWithRequestBuilder(name: name, refreshLibrary: refreshLibrary).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Removes a virtual folder.
     - DELETE /Library/VirtualFolders
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the folder. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func removeVirtualFolderWithRequestBuilder(name: String? = nil, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Renames a virtual folder.
     
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter newName: (query) The new name. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func renameVirtualFolder(name: String? = nil, newName: String? = nil, refreshLibrary: Bool? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = renameVirtualFolderWithRequestBuilder(name: name, newName: newName, refreshLibrary: refreshLibrary).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Renames a virtual folder.
     - POST /Library/VirtualFolders/Name
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter name: (query) The name of the virtual folder. (optional)
     - parameter newName: (query) The new name. (optional)
     - parameter refreshLibrary: (query) Whether to refresh the library. (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func renameVirtualFolderWithRequestBuilder(name: String? = nil, newName: String? = nil, refreshLibrary: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders/Name"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "newName": newName?.encodeToJSON(),
            "refreshLibrary": refreshLibrary?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update library options.
     
     - parameter updateLibraryOptionsRequest: (body) The library name and options. (optional)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateLibraryOptions(updateLibraryOptionsRequest: UpdateLibraryOptionsRequest? = nil) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = updateLibraryOptionsWithRequestBuilder(updateLibraryOptionsRequest: updateLibraryOptionsRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Update library options.
     - POST /Library/VirtualFolders/LibraryOptions
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter updateLibraryOptionsRequest: (body) The library name and options. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateLibraryOptionsWithRequestBuilder(updateLibraryOptionsRequest: UpdateLibraryOptionsRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders/LibraryOptions"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateLibraryOptionsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Updates a media path.
     
     - parameter updateMediaPathRequest: (body) The name of the library and path infos. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateMediaPath(updateMediaPathRequest: UpdateMediaPathRequest) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = updateMediaPathWithRequestBuilder(updateMediaPathRequest: updateMediaPathRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Updates a media path.
     - POST /Library/VirtualFolders/Paths/Update
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter updateMediaPathRequest: (body) The name of the library and path infos. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateMediaPathWithRequestBuilder(updateMediaPathRequest: UpdateMediaPathRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/Library/VirtualFolders/Paths/Update"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMediaPathRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
