//
// DevicesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DevicesAPI {

    /**
     Deletes a device.
     
     - parameter id: (query) Device Id. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteDevice(id: String) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = deleteDeviceWithRequestBuilder(id: id).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Deletes a device.
     - DELETE /Devices
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Device Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDeviceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        let localVariablePath = "/Devices"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get info for a device.
     
     - parameter id: (query) Device Id. 
     - returns: AnyPublisher<DeviceInfo, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDeviceInfo(id: String) -> AnyPublisher<DeviceInfo, Error> {
        var requestTask: RequestTask?
        return Future<DeviceInfo, Error> { promise in
            requestTask = getDeviceInfoWithRequestBuilder(id: id).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get info for a device.
     - GET /Devices/Info
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Device Id. 
     - returns: RequestBuilder<DeviceInfo> 
     */
    open class func getDeviceInfoWithRequestBuilder(id: String) -> RequestBuilder<DeviceInfo> {
        let localVariablePath = "/Devices/Info"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceInfo>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get options for a device.
     
     - parameter id: (query) Device Id. 
     - returns: AnyPublisher<DeviceOptions, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDeviceOptions(id: String) -> AnyPublisher<DeviceOptions, Error> {
        var requestTask: RequestTask?
        return Future<DeviceOptions, Error> { promise in
            requestTask = getDeviceOptionsWithRequestBuilder(id: id).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get options for a device.
     - GET /Devices/Options
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Device Id. 
     - returns: RequestBuilder<DeviceOptions> 
     */
    open class func getDeviceOptionsWithRequestBuilder(id: String) -> RequestBuilder<DeviceOptions> {
        let localVariablePath = "/Devices/Options"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceOptions>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Devices.
     
     - parameter supportsSync: (query) Gets or sets a value indicating whether [supports synchronize]. (optional)
     - parameter userId: (query) Gets or sets the user identifier. (optional)
     - returns: AnyPublisher<DeviceInfoQueryResult, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDevices(supportsSync: Bool? = nil, userId: String? = nil) -> AnyPublisher<DeviceInfoQueryResult, Error> {
        var requestTask: RequestTask?
        return Future<DeviceInfoQueryResult, Error> { promise in
            requestTask = getDevicesWithRequestBuilder(supportsSync: supportsSync, userId: userId).execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get Devices.
     - GET /Devices
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter supportsSync: (query) Gets or sets a value indicating whether [supports synchronize]. (optional)
     - parameter userId: (query) Gets or sets the user identifier. (optional)
     - returns: RequestBuilder<DeviceInfoQueryResult> 
     */
    open class func getDevicesWithRequestBuilder(supportsSync: Bool? = nil, userId: String? = nil) -> RequestBuilder<DeviceInfoQueryResult> {
        let localVariablePath = "/Devices"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "supportsSync": supportsSync?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceInfoQueryResult>.Type = JellyfinAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update device options.
     
     - parameter id: (query) Device Id. 
     - parameter updateDeviceOptionsRequest: (body) Device Options. 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateDeviceOptions(id: String, updateDeviceOptionsRequest: UpdateDeviceOptionsRequest) -> AnyPublisher<Void, Error> {
        var requestTask: RequestTask?
        return Future<Void, Error> { promise in
            requestTask = updateDeviceOptionsWithRequestBuilder(id: id, updateDeviceOptionsRequest: updateDeviceOptionsRequest).execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask?.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Update device options.
     - POST /Devices/Options
     - API Key:
       - type: apiKey Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Device Id. 
     - parameter updateDeviceOptionsRequest: (body) Device Options. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateDeviceOptionsWithRequestBuilder(id: String, updateDeviceOptionsRequest: UpdateDeviceOptionsRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/Devices/Options"
        let localVariableURLString = JellyfinAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDeviceOptionsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = JellyfinAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
